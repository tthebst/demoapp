{"version":3,"file":"css-vars-ponyfill.esm.js","sources":["../node_modules/get-css-data/dist/get-css-data.esm.js","../node_modules/balanced-match/index.js","../src/parse-css.js","../src/parse-vars.js","../src/stringify-css.js","../src/walk-css.js","../src/transform-css.js","../src/index.js"],"sourcesContent":["/*!\n * get-css-data\n * v1.7.1\n * https://github.com/jhildenbiddle/get-css-data\n * (c) 2018-2020 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction getUrls(urls) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var settings = {\n        mimeType: options.mimeType || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var urlArray = Array.isArray(urls) ? urls : [ urls ];\n    var urlQueue = Array.apply(null, Array(urlArray.length)).map((function(x) {\n        return null;\n    }));\n    function isValidCss() {\n        var cssText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        var isHTML = cssText.trim().charAt(0) === \"<\";\n        return !isHTML;\n    }\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n    function onSuccess(responseText, urlIndex) {\n        var returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n        responseText = returnVal === false ? \"\" : returnVal || responseText;\n        urlQueue[urlIndex] = responseText;\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n    var parser = document.createElement(\"a\");\n    urlArray.forEach((function(url, i) {\n        parser.setAttribute(\"href\", url);\n        parser.href = String(parser.href);\n        var isIElte9 = Boolean(document.all && !window.atob);\n        var isIElte9CORS = isIElte9 && parser.host.split(\":\")[0] !== location.host.split(\":\")[0];\n        if (isIElte9CORS) {\n            var isSameProtocol = parser.protocol === location.protocol;\n            if (isSameProtocol) {\n                var xdr = new XDomainRequest;\n                xdr.open(\"GET\", url);\n                xdr.timeout = 0;\n                xdr.onprogress = Function.prototype;\n                xdr.ontimeout = Function.prototype;\n                xdr.onload = function() {\n                    if (isValidCss(xdr.responseText)) {\n                        onSuccess(xdr.responseText, i);\n                    } else {\n                        onError(xdr, i);\n                    }\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n                setTimeout((function() {\n                    xdr.send();\n                }), 0);\n            } else {\n                console.warn(\"Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol (\".concat(url, \")\"));\n                onError(null, i);\n            }\n        } else {\n            var xhr = new XMLHttpRequest;\n            xhr.open(\"GET\", url);\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n            settings.onBeforeSend(xhr, url, i);\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200 && isValidCss(xhr.responseText)) {\n                        onSuccess(xhr.responseText, i);\n                    } else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n            xhr.send();\n        }\n    }));\n}\n\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object}   [options] The options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include] CSS selector matching <link> and <style>\n *                   nodes to include\n * @param {string}   [options.exclude] CSS selector matching <link> and <style>\n *                   nodes to exclude\n * @param {object}   [options.filter] Regular expression used to filter node CSS\n *                   data. Each block of CSS data is tested against the filter,\n *                   and only matching data is included.\n * @param {object}   [options.useCSSOM=false] Determines if CSS data will be\n *                   collected from a stylesheet's runtime values instead of its\n *                   text content. This is required to get accurate CSS data\n *                   when a stylesheet has been modified using the deleteRule()\n *                   or insertRule() methods because these modifications will\n *                   not be reflected in the stylesheet's text content.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback on each CSS node read. Passes\n *                   1) CSS text, 2) source node reference, and 3) the source\n *                   URL as arguments.\n * @param {function} [options.onError] Callback on each error. Passes 1) the XHR\n *                   object for inspection, 2) soure node reference, and 3) the\n *                   source URL that failed (either a <link> href or an @import)\n *                   as arguments\n * @param {function} [options.onComplete] Callback after all nodes have been\n *                   processed. Passes 1) concatenated CSS text, 2) an array of\n *                   CSS text in DOM order, and 3) an array of nodes in DOM\n *                   order as arguments.\n *\n * @example\n *\n *   getCssData({\n *     rootElement: document,\n *     include    : 'style,link[rel=\"stylesheet\"]',\n *     exclude    : '[href=\"skip.css\"]',\n *     filter     : /red/,\n *     useCSSOM   : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onComplete(cssText, cssArray, nodeArray) {\n *       // ...\n *     }\n *   });\n */ function getCssData(options) {\n    var regex = {\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        cssImports: /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    var settings = {\n        rootElement: options.rootElement || document,\n        include: options.include || 'style,link[rel=\"stylesheet\"]',\n        exclude: options.exclude || null,\n        filter: options.filter || null,\n        useCSSOM: options.useCSSOM || false,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter((function(node) {\n        return !matchesSelector(node, settings.exclude);\n    }));\n    var cssArray = Array.apply(null, Array(sourceNodes.length)).map((function(x) {\n        return null;\n    }));\n    function handleComplete() {\n        var isComplete = cssArray.indexOf(null) === -1;\n        if (isComplete) {\n            var cssText = cssArray.join(\"\");\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n    function handleSuccess(cssText, cssIndex, node, sourceUrl) {\n        var returnVal = settings.onSuccess(cssText, node, sourceUrl);\n        cssText = returnVal !== undefined && Boolean(returnVal) === false ? \"\" : returnVal || cssText;\n        resolveImports(cssText, node, sourceUrl, (function(resolvedCssText, errorData) {\n            if (cssArray[cssIndex] === null) {\n                errorData.forEach((function(data) {\n                    return settings.onError(data.xhr, node, data.url);\n                }));\n                if (!settings.filter || settings.filter.test(resolvedCssText)) {\n                    cssArray[cssIndex] = resolvedCssText;\n                } else {\n                    cssArray[cssIndex] = \"\";\n                }\n                handleComplete();\n            }\n        }));\n    }\n    function parseImportData(cssText, baseUrl) {\n        var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var importData = {};\n        importData.rules = (cssText.replace(regex.cssComments, \"\").match(regex.cssImports) || []).filter((function(rule) {\n            return ignoreRules.indexOf(rule) === -1;\n        }));\n        importData.urls = importData.rules.map((function(rule) {\n            return rule.replace(regex.cssImports, \"$1\");\n        }));\n        importData.absoluteUrls = importData.urls.map((function(url) {\n            return getFullUrl(url, baseUrl);\n        }));\n        importData.absoluteRules = importData.rules.map((function(rule, i) {\n            var oldUrl = importData.urls[i];\n            var newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);\n            return rule.replace(oldUrl, newUrl);\n        }));\n        return importData;\n    }\n    function resolveImports(cssText, node, baseUrl, callbackFn) {\n        var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n        var importData = parseImportData(cssText, baseUrl, __errorRules);\n        if (importData.rules.length) {\n            getUrls(importData.absoluteUrls, {\n                onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                    settings.onBeforeSend(xhr, node, url);\n                },\n                onSuccess: function onSuccess(cssText, url, urlIndex) {\n                    var returnVal = settings.onSuccess(cssText, node, url);\n                    cssText = returnVal === false ? \"\" : returnVal || cssText;\n                    var responseImportData = parseImportData(cssText, url, __errorRules);\n                    responseImportData.rules.forEach((function(rule, i) {\n                        cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);\n                    }));\n                    return cssText;\n                },\n                onError: function onError(xhr, url, urlIndex) {\n                    __errorData.push({\n                        xhr: xhr,\n                        url: url\n                    });\n                    __errorRules.push(importData.rules[urlIndex]);\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                },\n                onComplete: function onComplete(responseArray) {\n                    responseArray.forEach((function(importText, i) {\n                        cssText = cssText.replace(importData.rules[i], importText);\n                    }));\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                }\n            });\n        } else {\n            callbackFn(cssText, __errorData);\n        }\n    }\n    if (sourceNodes.length) {\n        sourceNodes.forEach((function(node, i) {\n            var linkHref = node.getAttribute(\"href\");\n            var linkRel = node.getAttribute(\"rel\");\n            var isLink = node.nodeName === \"LINK\" && linkHref && linkRel && linkRel.toLowerCase() === \"stylesheet\";\n            var isStyle = node.nodeName === \"STYLE\";\n            if (isLink) {\n                getUrls(linkHref, {\n                    mimeType: \"text/css\",\n                    onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                        settings.onBeforeSend(xhr, node, url);\n                    },\n                    onSuccess: function onSuccess(cssText, url, urlIndex) {\n                        var sourceUrl = getFullUrl(linkHref);\n                        handleSuccess(cssText, i, node, sourceUrl);\n                    },\n                    onError: function onError(xhr, url, urlIndex) {\n                        cssArray[i] = \"\";\n                        settings.onError(xhr, node, url);\n                        handleComplete();\n                    }\n                });\n            } else if (isStyle) {\n                var cssText = node.textContent;\n                if (settings.useCSSOM) {\n                    cssText = Array.apply(null, node.sheet.cssRules).map((function(rule) {\n                        return rule.cssText;\n                    })).join(\"\");\n                }\n                handleSuccess(cssText, i, node, location.href);\n            } else {\n                cssArray[i] = \"\";\n                handleComplete();\n            }\n        }));\n    } else {\n        settings.onComplete(\"\", []);\n    }\n}\n\nfunction getFullUrl(url, base) {\n    var d = document.implementation.createHTMLDocument(\"\");\n    var b = d.createElement(\"base\");\n    var a = d.createElement(\"a\");\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base || document.baseURI || (document.querySelector(\"base\") || {}).href || location.href;\n    a.href = url;\n    return a.href;\n}\n\nfunction matchesSelector(elm, selector) {\n    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    return matches.call(elm, selector);\n}\n\nexport default getCssData;\n//# sourceMappingURL=get-css-data.esm.js.map\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced from 'balanced-match';\n\n\n// Functions\n// =============================================================================\n/**\n * Parses CSS string and generates AST object\n *\n * @param {string}  css The CSS stringt to be converted to an AST\n * @param {object}  [options] Options object\n * @param {boolean} [options.preserveStatic=true] Determines if CSS\n *                  declarations that do not reference a custom property will\n *                  be preserved in the transformed CSS\n * @param {boolean} [options.removeComments=false] Remove comments from returned\n *                  object\n * @returns {object}\n */\nfunction parseCss(css, options = {}) {\n    const defaults = {\n        preserveStatic: true,\n        removeComments: false\n    };\n    const settings = Object.assign({}, defaults, options);\n    const errors   = [];\n\n    // Errors\n    // -------------------------------------------------------------------------\n    function error(msg) {\n        throw new Error(`CSS parse error: ${msg}`);\n    }\n\n    // RegEx\n    // -------------------------------------------------------------------------\n    // Match regexp and return captures\n    function match(re) {\n        const m = re.exec(css);\n\n        if (m) {\n            css = css.slice(m[0].length);\n\n            return m;\n        }\n    }\n\n    function open() {\n        return match(/^{\\s*/);\n    }\n\n    function close() {\n        return match(/^}/);\n    }\n\n    function whitespace() {\n        match(/^\\s*/);\n    }\n\n    // Comments\n    // -------------------------------------------------------------------------\n    function comment() {\n        whitespace();\n\n        if (css[0] !== '/' || css[1] !== '*') {\n            return;\n        }\n\n        let i = 2;\n\n        while (css[i] && (css[i] !== '*' || css[i + 1] !== '/')) {\n            i++;\n        }\n\n        if (!css[i]) {\n            return error('end of comment is missing');\n        }\n\n        const str = css.slice(2, i);\n\n        css = css.slice(i + 2);\n\n        return {\n            type   : 'comment',\n            comment: str\n        };\n    }\n\n    function comments() {\n        const cmnts = [];\n        let c;\n\n        while ((c = comment())) {\n            cmnts.push(c);\n        }\n\n        return settings.removeComments ? [] : cmnts;\n    }\n\n    // Selector\n    // -------------------------------------------------------------------------\n    function selector() {\n        whitespace();\n\n        while (css[0] === '}') {\n            error('extra closing bracket');\n        }\n\n        const m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\n\n        if (m) {\n            return m[0]\n                .trim() // remove all comments from selectors\n                .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n                .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function(m) {\n                    return m.replace(/,/g, '\\u200C');\n                })\n                .split(/\\s*(?![^(]*\\)),\\s*/)\n                .map(function(s) {\n                    return s.replace(/\\u200C/g, ',');\n                });\n        }\n    }\n\n    // Declarations\n    // -------------------------------------------------------------------------\n    function declaration() {\n        // Nested @ rule(s)\n        if (css[0] === '@') {\n            return at_rule();\n        }\n\n        match(/^([;\\s]*)+/); // ignore empty declarations + whitespace\n\n        const comment_regexp = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n        let prop = match(/^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n\n        if (!prop) {\n            return;\n        }\n\n        prop = prop[0].trim();\n\n        if (!match(/^:\\s*/)) {\n            return error('property missing \\':\\'');\n        }\n\n        // Quotes regex repeats verbatim inside and outside parentheses\n        const val = match(/^((?:\\/\\*.*?\\*\\/|'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\((\\s*'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|[^)]*?)\\s*\\)|[^};])+)/);\n        const ret = {\n            type    : 'declaration',\n            property: prop.replace(comment_regexp, ''),\n            value   : val ? val[0].replace(comment_regexp, '').trim() : ''\n        };\n\n        match(/^[;\\s]*/);\n\n        return ret;\n    }\n\n    function declarations() {\n        if (!open()) {\n            return error('missing \\'{\\'');\n        }\n\n        let d;\n        let decls = comments();\n\n        while ((d = declaration())) {\n            decls.push(d);\n            decls = decls.concat(comments());\n        }\n\n        if (!close()) {\n            return error('missing \\'}\\'');\n        }\n\n        return decls;\n    }\n\n    // Keyframes\n    // -------------------------------------------------------------------------\n    function keyframe() {\n        whitespace();\n\n        const vals = [];\n        let m;\n\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n\n        if (vals.length) {\n            return {\n                type        : 'keyframe',\n                values      : vals,\n                declarations: declarations()\n            };\n        }\n    }\n\n    function at_keyframes() {\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n\n        if (!m) {\n            return;\n        }\n\n        const vendor = m[1];\n\n        m = match(/^([-\\w]+)\\s*/);\n\n        if (!m) {\n            return error('@keyframes missing name');\n        }\n\n        const name = m[1];\n\n        if (!open()) {\n            return error('@keyframes missing \\'{\\'');\n        }\n\n        let frame;\n        let frames = comments();\n\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n\n        if (!close()) {\n            return error('@keyframes missing \\'}\\'');\n        }\n\n        return {\n            type     : 'keyframes',\n            name     : name,\n            vendor   : vendor,\n            keyframes: frames\n        };\n    }\n\n    // @ Rules\n    // -------------------------------------------------------------------------\n    function at_page() {\n        const m = match(/^@page */);\n        if (m) {\n            const sel = selector() || [];\n            return { type: 'page', selectors: sel, declarations: declarations() };\n        }\n    }\n    function at_page_margin_box() {\n        const m = match(/@(top|bottom|left|right)-(left|center|right|top|middle|bottom)-?(corner)?\\s*/);\n        if (m) {\n            const name = `${m[1]}-${m[2]}` + (m[3] ? `-${m[3]}` : '');\n            return { type: 'page-margin-box', name, declarations: declarations() };\n        }\n    }\n    function at_fontface() {\n        const m = match(/^@font-face\\s*/);\n        if (m) { return { type: 'font-face', declarations: declarations() }; }\n    }\n    function at_supports() {\n        const m = match(/^@supports *([^{]+)/);\n        if (m) { return { type: 'supports', supports: m[1].trim(), rules: rules() }; }\n    }\n    function at_host() {\n        const m = match(/^@host\\s*/);\n        if (m) { return { type: 'host', rules: rules() }; }\n    }\n    function at_media() {\n        const m = match(/^@media([^{]+)*/);\n        if (m) { return { type: 'media', media: (m[1] || '').trim(), rules: rules() }; }\n    }\n    function at_custom_m() {\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (m) { return { type: 'custom-media', name: m[1].trim(), media: m[2].trim() }; }\n    }\n    function at_document() {\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        if (m) { return { type: 'document', document: m[2].trim(), vendor: m[1] ? m[1].trim() : null, rules: rules() }; }\n    }\n    function at_x() {\n        const m = match(/^@(import|charset|namespace)\\s*([^;]+);/);\n        if (m) { return { type: m[1], name: m[2].trim() }; }\n    }\n    function at_rule() {\n        whitespace();\n\n        if (css[0] === '@') {\n            const ret =\n                at_x() ||\n                at_fontface() ||\n                at_media() ||\n                at_keyframes() ||\n                at_supports() ||\n                at_document() ||\n                at_custom_m() ||\n                at_host() ||\n                at_page() ||\n                at_page_margin_box(); // Must be last\n\n            if (ret && !settings.preserveStatic) {\n                let hasVarFunc = false;\n\n                // @page, @font-face\n                if (ret.declarations) {\n                    hasVarFunc = ret.declarations.some(decl => /var\\(/.test(decl.value));\n                }\n                // @keyframes, @media, @supports, etc.\n                else {\n                    const arr = ret.keyframes || ret.rules || [];\n\n                    hasVarFunc = arr.some(obj => (obj.declarations || []).some(decl => /var\\(/.test(decl.value)));\n                }\n\n                return hasVarFunc ? ret : {};\n            }\n\n            return ret;\n        }\n    }\n\n    // Rules\n    // -------------------------------------------------------------------------\n    function rule() {\n        if (!settings.preserveStatic) {\n            const balancedMatch = balanced('{', '}', css);\n\n            // Skip rulset if it does not contain a root/host variable\n            // declaration or a variable function value\n            if (balancedMatch) {\n                const hasVarDecl = /:(?:root|host)(?![.:#(])/.test(balancedMatch.pre) && /--\\S*\\s*:/.test(balancedMatch.body);\n                const hasVarFunc = /var\\(/.test(balancedMatch.body);\n\n                if (!hasVarDecl && !hasVarFunc) {\n                    css = css.slice(balancedMatch.end + 1);\n\n                    return {};\n                }\n            }\n        }\n\n        const sel   = selector() || [];\n        const decls = settings.preserveStatic ? declarations() : declarations().filter(decl => {\n            const hasVarDecl = sel.some(s => /:(?:root|host)(?![.:#(])/.test(s)) && /^--\\S/.test(decl.property);\n            const hasVarFunc = /var\\(/.test(decl.value);\n\n            return hasVarDecl || hasVarFunc;\n        });\n\n        if (!sel.length) {\n            error('selector missing');\n        }\n\n        return {\n            type        : 'rule',\n            selectors   : sel,\n            declarations: decls\n        };\n    }\n\n    function rules(core) {\n        if (!core && !open()) {\n            return error('missing \\'{\\'');\n        }\n\n        let node;\n        let rules = comments();\n\n        while (css.length && (core || css[0] !== '}') && (node = at_rule() || rule())) {\n            if (node.type) {\n                rules.push(node);\n            }\n\n            rules = rules.concat(comments());\n        }\n\n        if (!core && !close()) {\n            return error('missing \\'}\\'');\n        }\n\n        return rules;\n    }\n\n    return {\n        type: 'stylesheet',\n        stylesheet: {\n            rules: rules(true),\n            errors: errors\n        }\n    };\n}\n\n\n// Exports\n// =============================================================================\nexport default parseCss;\n","// Dependencies\n// =============================================================================\nimport parseCss from './parse-css';\n\n\n// Functions\n// =============================================================================\n/**\n * Description\n *\n * @param {object|string} cssData CSS data to parse\n * @param {object} [options] Options object\n * @param {object} [options.store={}] CSS variable definitions to include during\n *     transformation. Can be used to add new override exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *     warning. Passes 1) warningMessage as an argument.\n * @returns {object}\n */\nfunction parseVars(cssData, options = {}) {\n    const defaults = {\n        parseHost: false,\n        store    : {},\n        onWarning() {}\n    };\n    const settings           = Object.assign({}, defaults, options);\n    const reVarDeclSelectors = new RegExp(`:${ settings.parseHost ? 'host' : 'root' }$`);\n\n    // Convert CSS string to AST\n    if (typeof cssData === 'string') {\n        cssData = parseCss(cssData, settings);\n    }\n\n    // Define variables\n    cssData.stylesheet.rules.forEach(function(rule) {\n        const varNameIndices = [];\n\n        if (rule.type !== 'rule' || !rule.selectors.some(s => reVarDeclSelectors.test(s))) {\n            return;\n        }\n\n        rule.declarations.forEach(function(decl, i) {\n            const prop  = decl.property;\n            const value = decl.value;\n\n            if (prop && prop.indexOf('--') === 0) {\n                settings.store[prop] = value;\n                varNameIndices.push(i);\n            }\n        });\n    });\n\n    // Return variable store\n    return settings.store;\n}\n\n\n// Exports\n// =============================================================================\nexport default parseVars;\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Compiles CSS AST to string\n *\n * @param {object}   tree CSS AST object\n * @param {string}   [delim=''] CSS rule delimiter\n * @param {function} cb Function to be called before each node is processed\n * @returns {string}\n */\nfunction stringifyCss(tree, delim = '', cb) {\n    const renderMethods = {\n        charset(node) {\n            return '@charset ' + node.name + ';';\n        },\n        comment(node) {\n            // Preserve ponyfill marker comments\n            return node.comment.indexOf('__CSSVARSPONYFILL') === 0 ? '/*' + node.comment + '*/' : '';\n        },\n        'custom-media'(node) {\n            return '@custom-media ' + node.name + ' ' + node.media + ';';\n        },\n        declaration(node) {\n            return node.property + ':' + node.value + ';';\n        },\n        document(node) {\n            return '@' + (node.vendor || '') + 'document ' + node.document + '{' + visit(node.rules) + '}';\n        },\n        'font-face'(node) {\n            return '@font-face' + '{' + visit(node.declarations) + '}';\n        },\n        host(node) {\n            return '@host' + '{' + visit(node.rules) + '}';\n        },\n        import(node) {\n            // FIXED\n            return '@import ' + node.name + ';';\n        },\n        keyframe(node) {\n            return node.values.join(',') + '{' + visit(node.declarations) + '}';\n        },\n        keyframes(node) {\n            return '@' + (node.vendor || '') + 'keyframes ' + node.name + '{' + visit(node.keyframes) + '}';\n        },\n        media(node) {\n            return '@media ' + node.media + '{' + visit(node.rules) + '}';\n        },\n        namespace(node) {\n            return '@namespace ' + node.name + ';';\n        },\n        page(node) {\n            return '@page ' + (node.selectors.length ? node.selectors.join(', ') : '') + '{' + visit(node.declarations) + '}';\n        },\n        'page-margin-box'(node) {\n            return '@' + node.name + '{' + visit(node.declarations) + '}';\n        },\n        rule(node) {\n            const decls = node.declarations;\n\n            if (decls.length) {\n                return node.selectors.join(',') + '{' + visit(decls) + '}';\n            }\n        },\n        supports(node) {\n            // FIXED\n            return '@supports ' + node.supports + '{' + visit(node.rules) + '}';\n        }\n    };\n\n    function visit(nodes) {\n        let buf = '';\n\n        for (let i = 0; i < nodes.length; i++) {\n            const n = nodes[i];\n\n            if (cb) {\n                cb(n);\n            }\n\n            const txt = renderMethods[n.type](n);\n\n            if (txt) {\n                buf += txt;\n\n                if (txt.length && n.selectors) {\n                    buf += delim;\n                }\n            }\n        }\n\n        return buf;\n    }\n\n    return visit(tree.stylesheet.rules);\n}\n\n\n// Exports\n// =============================================================================\nexport default stringifyCss;\n","/**\n * Based on rework-visit by reworkcss\n * https://github.com/reworkcss/rework-visit\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Visit `node` declarations recursively and invoke `fn(declarations, node)`.\n *\n * @param {object} node\n * @param {function} fn\n */\nfunction walkCss(node, fn){\n    node.rules.forEach(function(rule){\n        // @media etc\n        if (rule.rules) {\n            walkCss(rule, fn);\n\n            return;\n        }\n\n        // keyframes\n        if (rule.keyframes) {\n            rule.keyframes.forEach(function(keyframe){\n                if (keyframe.type === 'keyframe') {\n                    fn(keyframe.declarations, rule);\n                }\n            });\n\n            return;\n        }\n\n        // @charset, @import etc\n        if (!rule.declarations) {\n            return;\n        }\n\n        fn(rule.declarations, node);\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default walkCss;\n","/**\n * Based on rework-vars by reworkcss\n * https://github.com/reworkcss/rework-vars\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced     from 'balanced-match';\nimport parseCss     from './parse-css';\nimport stringifyCss from './stringify-css';\nimport walkCss      from './walk-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst VAR_PROP_IDENTIFIER = '--';\nconst VAR_FUNC_IDENTIFIER = 'var';\n\n\n// Functions\n// =============================================================================\n/**\n * Transforms W3C-style CSS variables to static values and returns an updated\n * CSS string.\n *\n * @param {object}   cssData CSS text or AST\n * @param {object}   [options] Options object\n * @param {boolean}  [options.preserveStatic=true] Determines if CSS\n *                   declarations that do not reference a custom property will\n *                   be preserved in the transformed CSS\n * @param {boolean}  [options.preserveVars=false] Determines if CSS custom\n *                   property declarations will be preserved in the transformed\n *                   CSS\n * @param {object}   [options.variables={}] CSS variable definitions to include\n *                   during transformation. Can be used to add new override\n *                   exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *                   warning. Passes 1) warningMessage as an argument.\n * @returns {string}\n */\nfunction transformCss(cssData, options = {}) {\n    const defaults = {\n        preserveStatic: true,\n        preserveVars  : false,\n        variables     : {},\n        onWarning() {}\n    };\n    const settings = Object.assign({}, defaults, options);\n\n    // Convert CSS string to AST\n    if (typeof cssData === 'string') {\n        cssData = parseCss(cssData, settings);\n    }\n\n    // Resolve variables\n    walkCss(cssData.stylesheet, function(declarations, node) {\n        for (let i = 0; i < declarations.length; i++) {\n            const decl  = declarations[i];\n            const type  = decl.type;\n            const prop  = decl.property;\n            const value = decl.value;\n\n            // Skip comments\n            if (type !== 'declaration') {\n                continue;\n            }\n\n            // Remove custom property declarations\n            if (!settings.preserveVars && prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {\n                declarations.splice(i, 1);\n                i--;\n                continue;\n            }\n\n            // Transform custom property functions\n            if (value.indexOf(VAR_FUNC_IDENTIFIER + '(') !== -1) {\n                let resolvedValue = resolveValue(value, settings);\n\n                if (resolvedValue !== decl.value) {\n                    // Fix nested calc\n                    resolvedValue = fixNestedCalc(resolvedValue);\n\n                    // Overwrite value\n                    if (!settings.preserveVars) {\n                        decl.value = resolvedValue;\n                    }\n                    // Insert new rule with resolved value\n                    else {\n                        declarations.splice(i, 0, {\n                            type    : type,\n                            property: prop,\n                            value   : resolvedValue\n                        });\n\n                        // Skip ahead of preserved declaration\n                        i++;\n                    }\n                }\n            }\n        }\n    });\n\n    // Return CSS string\n    return stringifyCss(cssData);\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Removes nested calc keywords for legacy browser compatibility.\n * Example: calc(1 + calc(2 + calc(3 + 3))) => calc(1 + (2 + (3 + 3)))\n *\n * @param {value} string\n */\nfunction fixNestedCalc(value) {\n    const reCalcVal = /calc\\(([^)]+)\\)/g;\n\n    (value.match(reCalcVal) || []).forEach(match => {\n        const newVal = `calc${match.split('calc').join('')}`;\n        value = value.replace(match, newVal);\n    });\n\n    return value;\n}\n\n/**\n * Resolves CSS var() function(s) with `settings.variables` or fallback\n * value(s). Returns original `value` if unable to resolve.\n *\n * @param {string} value String containing CSS var() functions to resolve\n * @param {object} settings Settings object passed from transformCss()\n * @param {string} [__recursiveFallback] Fallback when unable to resolve CSS\n *                 var() function to a `settings.variables` or fallback value.\n *                 Allows restoring original var() function from recursive\n *                 resolveValue() calls.\n * @return {string} CSS value with var() function(s) resolved to\n *                  `settings.variables` or fallback value.\n *\n * @example\n *\n *   resolveValue('10px var(--x) 30px', {'--x':'20px'}, {...settings});\n *   // => '10px 20px 30px'\n *\n *   resolveValue('10px', {}, {...settings});\n *   // => '10px'\n */\nfunction resolveValue(value, settings = {}, __recursiveFallback) {\n    if (value.indexOf('var(') === -1) {\n        return value;\n    }\n\n    const valueData = balanced('(', ')', value);\n\n    /**\n     * Resolves contents of CSS custom property function\n     *\n     * @param {string} value String containing contents of CSS var() function\n     * @returns {string}\n     *\n     * @example\n     *\n     *   resolveFunc('--x, var(--y, green)')\n     *   // => obj['--x'] or obj['--y'] or 'green'\n     *\n     *   resolveFunc('--fail')\n     *   // => 'var(--fail)' when obj['--fail'] does not exist\n     */\n    function resolveFunc(value) {\n        const name               = value.split(',')[0].replace(/[\\s\\n\\t]/g, '');\n        const fallback           = (value.match(/(?:\\s*,\\s*){1}(.*)?/) || [])[1];\n        const match              = Object.prototype.hasOwnProperty.call(settings.variables, name) ? String(settings.variables[name]) : undefined;\n        const replacement        = match || (fallback ? String(fallback) : undefined);\n        const unresolvedFallback = __recursiveFallback || value;\n\n        if (!match) {\n            settings.onWarning(`variable \"${name}\" is undefined`);\n        }\n\n        if (replacement && replacement !== 'undefined' && replacement.length > 0) {\n            return resolveValue(replacement, settings, unresolvedFallback);\n        }\n        else {\n            return `var(${unresolvedFallback})`;\n        }\n    }\n\n    // No balanced brace data\n    if (!valueData) {\n        if (value.indexOf('var(') !== -1) {\n            settings.onWarning(`missing closing \")\" in the value \"${value}\"`);\n        }\n\n        return value;\n    }\n    // Balanced brace data is var() function\n    else if (valueData.pre.slice(-3) === 'var') {\n        const isEmptyVarFunc = valueData.body.trim().length === 0;\n\n        if (isEmptyVarFunc) {\n            settings.onWarning('var() must contain a non-whitespace string');\n\n            return value;\n        }\n        else {\n            return (\n                valueData.pre.slice(0,-3)\n                + resolveFunc(valueData.body)\n                + resolveValue(valueData.post, settings)\n            );\n        }\n    }\n    // Balanced brace data is NOT var() function\n    else {\n        return (\n            valueData.pre\n            + `(${resolveValue(valueData.body, settings)})`\n            + resolveValue(valueData.post, settings)\n        );\n    }\n}\n\n\n// Exports\n// =============================================================================\nexport default transformCss;\n","// Dependencies\n// =============================================================================\nimport getCssData   from 'get-css-data';\nimport parseCss     from './parse-css';\nimport parseVars    from './parse-vars';\nimport stringifyCss from './stringify-css';\nimport transformCss from './transform-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst isBrowser       = typeof window !== 'undefined';\nconst isNativeSupport = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports('(--a: 0)');\n\nconst counters = {\n    group: 0,\n    job  : 0\n};\nconst defaults = {\n    // Targets\n    rootElement   : isBrowser ? document : null,\n    shadowDOM     : false,\n    // Sources\n    include       : 'style,link[rel=stylesheet]',\n    exclude       : '',\n    variables     : {},    // cssVars, transformCss\n    // Options\n    onlyLegacy    : true,  // cssVars\n    preserveStatic: true,  // parseCSS\n    preserveVars  : false, // transformCss\n    silent        : false, // cssVars\n    updateDOM     : true,  // cssVars\n    updateURLs    : true,  // cssVars\n    watch         : null,  // cssVars\n    // Callbacks\n    onBeforeSend() {},     // cssVars\n    onWarning() {},        // transformCss\n    onError() {},          // cssVars\n    onSuccess() {},        // cssVars\n    onComplete() {}        // cssVars\n};\nconst regex = {\n    // CSS comments\n    cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n    // CSS keyframes\n    // Ex: @keyframes & @-VENDOR-keyframes\n    cssKeyframes: /@(?:-\\w*-)?keyframes/,\n    // CSS media queries\n    // Ex: @media (min-width: 640px) { ... }\n    cssMediaQueries: /@media[^{]+\\{([\\s\\S]+?})\\s*}/g,\n    // CSS Urls\n    // Ex: url('path/to/file')\n    cssUrls: /url\\((?!['\"]?(?:data|http|\\/\\/):)['\"]?([^'\")]*)['\"]?\\)/g,\n    // CSS root/host rules\n    // Ex: :root { ... } or :host { ... }\n    cssVarDeclRules: /(?::(?:root|host)(?![.:#(])[\\s,]*[^{]*{\\s*[^}]*})/g,\n    // CSS variable declarations (e.g. --color: red;)\n    cssVarDecls: /(?:[\\s;]*)(-{2}\\w[\\w-]*)(?:\\s*:\\s*)([^;]*);/g,\n    // CSS variable function (e.g. var(--color))\n    cssVarFunc: /var\\(\\s*--[\\w-]/,\n    // CSS variable root/host declarations and var() function values\n    cssVars: /(?:(?::(?:root|host)(?![.:#(])[\\s,]*[^{]*{\\s*[^;]*;*\\s*)|(?:var\\(\\s*))(--[^:)]+)(?:\\s*[:)])/\n};\nconst variableStore = {\n    // Parsed DOM values (from <link> and <style> nodes)\n    dom : {},\n    // Temporary storage for each job\n    job : {},\n    // Persisted options.variables values\n    user: {}\n};\n\n// Flag used to prevent successive ponyfill calls from stacking\nlet cssVarsIsRunning = false;\n\n// Mutation observer reference created via options.watch\nlet cssVarsObserver = null;\n\n// Count used to detect manual removal of [data-cssvars=\"src\"] nodes\nlet cssVarsSrcNodeCount = 0;\n\n// Debounce timer used with options.watch\nlet debounceTimer = null;\n\n// Flag used to indicate if document-level custom property values have been\n// parsed, stored, and ready for use with options.shadowDOM\nlet isShadowDOMReady = false;\n\n\n// Functions\n// =============================================================================\n/**\n * Fetches, parses, and transforms CSS custom properties from specified\n * <style> and <link> elements into static values, then appends a new <style>\n * element with static values to the DOM to provide CSS custom property\n * compatibility for legacy browsers. Also provides a single interface for\n * live updates of runtime values in both modern and legacy browsers.\n *\n * @preserve\n * @param {object}   [options] Options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes\n * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>\n *                   and <style> nodes will be processed.\n * @param {string}   [options.include=\"style,link[rel=stylesheet]\"] CSS selector\n *                   matching <link re=\"stylesheet\"> and <style> nodes to\n *                   process\n * @param {string}   [options.exclude] CSS selector matching <link\n *                   rel=\"stylehseet\"> and <style> nodes to exclude from those\n *                   matches by options.include\n * @param {object}   [options.variables] A map of custom property name/value\n *                   pairs. Property names can omit or include the leading\n *                   double-hyphen (—), and values specified will override\n *                   previous values\n * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will\n *                   only generate legacy-compatible CSS in browsers that lack\n *                   native support (i.e., legacy browsers)\n * @param {boolean}  [options.preserveStatic=true] Determines if CSS\n *                   declarations that do not reference a custom property will\n *                   be preserved in the transformed CSS\n * @param {boolean}  [options.preserveVars=false] Determines if CSS custom\n *                   property declarations will be preserved in the transformed\n *                   CSS\n * @param {boolean}  [options.silent=false] Determines if warning and error\n *                   messages will be displayed on the console\n * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will\n *                   update the DOM after processing CSS custom properties\n * @param {boolean}  [options.updateURLs=true] Determines if the ponyfill will\n *                   convert relative url() paths to absolute urls\n * @param {boolean}  [options.watch=false] Determines if a MutationObserver will\n *                   be created that will execute the ponyfill when a <link> or\n *                   <style> DOM mutation is observed\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments\n * @param {function} [options.onWarning] Callback after each CSS parsing warning\n *                   has occurred. Passes 1) a warning message as an argument.\n * @param {function} [options.onError] Callback after a CSS parsing error has\n *                   occurred or an XHR request has failed. Passes 1) an error\n *                   message, and 2) source node reference, 3) xhr, and 4 url as\n *                   arguments.\n * @param {function} [options.onSuccess] Callback after CSS data has been\n *                   collected from each node and before CSS custom properties\n *                   have been transformed. Allows modifying the CSS data before\n *                   it is transformed by returning any string value (or false\n *                   to skip). Passes 1) CSS text, 2) source node reference, and\n *                   3) the source URL as arguments.\n * @param {function} [options.onComplete] Callback after all CSS has been\n *                   processed, legacy-compatible CSS has been generated, and\n *                   (optionally) the DOM has been updated. Passes 1) a CSS\n *                   string with CSS variable values resolved, 2) an array of\n *                   output <style> node references that have been appended to\n *                   the DOM, 3) an object containing all custom properies names\n *                   and values, and 4) the ponyfill execution time in\n *                   milliseconds.\n *\n * @example\n *\n *   cssVars({\n *     rootElement   : document,\n *     shadowDOM     : false,\n *     include       : 'style,link[rel=\"stylesheet\"]',\n *     exclude       : '',\n *     variables     : {},\n *     onlyLegacy    : true,\n *     preserveStatic: true,\n *     preserveVars  : false,\n *     silent        : false,\n *     updateDOM     : true,\n *     updateURLs    : true,\n *     watch         : false,\n *     onBeforeSend(xhr, node, url) {},\n *     onWarning(message) {},\n *     onError(message, node, xhr, url) {},\n *     onSuccess(cssText, node, url) {},\n *     onComplete(cssText, styleNode, cssVariables, benchmark) {}\n *   });\n */\nfunction cssVars(options = {}) {\n    const msgPrefix = 'cssVars(): ';\n    const settings  = Object.assign({}, defaults, options);\n\n    function handleError(message, sourceNode, xhr, url) {\n        /* istanbul ignore next */\n        if (!settings.silent && window.console) {\n            // eslint-disable-next-line\n            console.error(`${msgPrefix}${message}\\n`, sourceNode);\n        }\n\n        settings.onError(message, sourceNode, xhr, url);\n    }\n\n    function handleWarning(message) {\n        /* istanbul ignore next */\n        if (!settings.silent && window.console) {\n            // eslint-disable-next-line\n            console.warn(`${msgPrefix}${message}`);\n        }\n\n        settings.onWarning(message);\n    }\n\n    // Exit if non-browser environment (e.g. Node)\n    if (!isBrowser) {\n        return;\n    }\n\n    // Add / recreate MutationObserver\n    if (settings.watch) {\n        settings.watch = defaults.watch;\n        addMutationObserver(settings);\n        cssVars(settings);\n        return;\n    }\n    // Disconnect existing MutationObserver\n    else if (settings.watch === false && cssVarsObserver) {\n        cssVarsObserver.disconnect();\n        cssVarsObserver = null;\n    }\n\n    // If benchmark key is not availalbe, this is a non-recursive call\n    if (!settings.__benchmark) {\n        // Check flag and debounce to prevent successive call from stacking\n        if (cssVarsIsRunning === settings.rootElement) {\n            cssVarsDebounced(options);\n            return;\n        }\n\n        // Store benchmark start time\n        settings.__benchmark = getTimeStamp();\n\n        // Exclude previously processed elements\n        settings.exclude = [\n            // 1. When the ponyfill is called by the MutationObserver, all\n            //    previously processed nodes are exluded except those that have\n            //    had their out/skip/src values cleared by the MutationObserver.\n            // 2. When the ponyfill is called directly, only output nodes are\n            //    excluded. This allows the ponyfill to update skip/src nodes\n            //    after a previously processed link/style node has been removed.\n            cssVarsObserver ? '[data-cssvars]:not([data-cssvars=\"\"])' : '[data-cssvars=\"out\"]',\n            settings.exclude\n        ].filter(selector => selector).join(',');\n\n        // Fix malformed custom property names (e.g. \"color\" or \"-color\")\n        settings.variables = fixVarNames(settings.variables);\n\n        // Direct call preparation (i.e. non-MutationObserver call)\n        if (!cssVarsObserver) {\n            const outNodes = Array.apply(null, settings.rootElement.querySelectorAll('[data-cssvars=\"out\"]'));\n\n            // Remove orphaned output nodes\n            outNodes.forEach(outNode => {\n                const dataGroup = outNode.getAttribute('data-cssvars-group');\n                const srcNode   = dataGroup ? settings.rootElement.querySelector(`[data-cssvars=\"src\"][data-cssvars-group=\"${dataGroup}\"]`) : null;\n\n                if (!srcNode) {\n                    outNode.parentNode.removeChild(outNode);\n                }\n            });\n\n            // Handle removed source nodes\n            if (cssVarsSrcNodeCount) {\n                const srcNodes = settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars=\"out\"])');\n\n                if (srcNodes.length < cssVarsSrcNodeCount) {\n                    // Update source node count\n                    cssVarsSrcNodeCount = srcNodes.length;\n\n                    // Reset variableStore\n                    variableStore.dom = {};\n                }\n            }\n        }\n    }\n\n    // Verify readyState to ensure all <link> and <style> nodes are available\n    if (document.readyState !== 'loading') {\n        // Native support\n        if (isNativeSupport && settings.onlyLegacy) {\n            // Apply settings.variables\n            if (settings.updateDOM) {\n                const targetElm = settings.rootElement.host || (settings.rootElement === document ? document.documentElement : settings.rootElement);\n\n                // Set variables using native methods\n                Object.keys(settings.variables).forEach(key => {\n                    targetElm.style.setProperty(key, settings.variables[key]);\n                });\n            }\n        }\n        // Ponyfill: Handle rootElement set to a shadow host or root\n        else if (!isShadowDOMReady && (settings.shadowDOM || settings.rootElement.shadowRoot || settings.rootElement.host)) {\n            // Get all document-level CSS\n            getCssData({\n                rootElement: defaults.rootElement,\n                include: defaults.include,\n                exclude: settings.exclude,\n                onSuccess(cssText, node, url) {\n                    cssText = cssText\n                        .replace(regex.cssComments, '')\n                        .replace(regex.cssMediaQueries, '');\n\n                    cssText = (cssText.match(regex.cssVarDeclRules) || []).join('');\n\n                    // Return only matching :root {...} blocks\n                    return cssText || false;\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    // Parse variables and store in variableStore. This step\n                    // ensures that variableStore contains all document-level\n                    // custom property values for subsequent ponyfill calls.\n                    parseVars(cssText, {\n                        store    : variableStore.dom,\n                        onWarning: handleWarning\n                    });\n\n                    isShadowDOMReady = true;\n\n                    // Call the ponyfill again to process the rootElement\n                    // initially specified. Values stored in variableStore will\n                    // be used to transform values in shadow host/root elements.\n                    cssVars(settings);\n                }\n            });\n        }\n        // Ponyfill: Process CSS\n        else {\n            // Set flag to prevent successive call from stacking. Using the\n            // rootElement insead of `true` allows simultaneous ponyfill calls\n            // using different rootElement values (e.g. documetn and one-or-more\n            // shadowDOM nodes).\n            cssVarsIsRunning = settings.rootElement;\n\n            getCssData({\n                rootElement : settings.rootElement,\n                include     : settings.include,\n                exclude     : settings.exclude,\n                onBeforeSend: settings.onBeforeSend,\n                onError(xhr, node, url) {\n                    const responseUrl = xhr.responseURL || getFullUrl(url, location.href);\n                    const statusText  = xhr.statusText ? `(${xhr.statusText})` : 'Unspecified Error' + (xhr.status === 0 ? ' (possibly CORS related)' : '');\n                    const errorMsg    = `CSS XHR Error: ${responseUrl} ${xhr.status} ${statusText}`;\n\n                    handleError(errorMsg, node, xhr, responseUrl);\n                },\n                onSuccess(cssText, node, url) {\n                    const returnVal = settings.onSuccess(cssText, node, url);\n\n                    // Use callback return value if provided (skip CSS if false)\n                    cssText = returnVal !== undefined && Boolean(returnVal) === false ? '' : returnVal || cssText;\n\n                    // Convert relative url(...) values to absolute\n                    if (settings.updateURLs) {\n                        cssText = fixRelativeCssUrls(cssText, url);\n                    }\n\n                    return cssText;\n                },\n                onComplete(cssText, cssArray, nodeArray = []) {\n                    const currentVars = Object.assign({}, variableStore.dom, variableStore.user);\n\n                    let hasVarChange = false;\n\n                    // Reset temporary variable store\n                    variableStore.job = {};\n\n                    // Parse CSS and variables\n                    nodeArray.forEach((node, i) => {\n                        // Only process CSS contains a custom property\n                        // declarations or function\n                        if (regex.cssVars.test(cssArray[i])) {\n                            try {\n                                const cssTree = parseCss(cssArray[i], {\n                                    preserveStatic: settings.preserveStatic,\n                                    removeComments: true\n                                });\n\n                                // Parse variables\n                                parseVars(cssTree, {\n                                    parseHost: Boolean(settings.rootElement.host),\n                                    store    : variableStore.dom,\n                                    onWarning: handleWarning\n                                });\n\n                                // Cache data\n                                node.__cssVars = { tree: cssTree };\n                            }\n                            catch(err) {\n                                handleError(err.message, node);\n                            }\n                        }\n                    });\n\n                    // Merge DOM values with job values\n                    Object.assign(variableStore.job, variableStore.dom);\n\n                    if (settings.updateDOM) {\n                        // Persist user values\n                        Object.assign(variableStore.user, settings.variables);\n\n                        // Merge persisted user values with job values\n                        Object.assign(variableStore.job, variableStore.user);\n                    }\n                    else {\n                        // Merge persisted and non-persisted user values with job values\n                        Object.assign(variableStore.job, variableStore.user, settings.variables);\n\n                        // Update currentVars with non-persisted user values\n                        Object.assign(currentVars, settings.variables);\n                    }\n\n                    // Detect new variable declaration or changed value\n                    hasVarChange =\n                        // Ponyfill has been called before with updateDOM\n                        counters.job > 0 &&\n                        // New/Change\n                        Boolean(\n                            // New declaration\n                            (Object.keys(variableStore.job).length > Object.keys(currentVars).length) ||\n                            // Changed declaration value\n                            Boolean(\n                                // Previous declarations exist\n                                Object.keys(currentVars).length &&\n                                // At least one job value does has changed\n                                Object.keys(variableStore.job).some(key => variableStore.job[key] !== currentVars[key])\n                            )\n                        );\n\n                    // New variable declaration or modified value detected\n                    if (hasVarChange) {\n                        resetCssNodes(settings.rootElement);\n                        cssVars(settings);\n                    }\n                    // No variable changes detected\n                    else {\n                        const outCssArray  = [];\n                        const outNodeArray = [];\n\n                        let hasKeyframesWithVars = false;\n\n                        // Increment job\n                        if (settings.updateDOM) {\n                            counters.job++;\n                        }\n\n                        nodeArray.forEach(node => {\n                            let isSkip = !node.__cssVars;\n\n                            if (node.__cssVars) {\n                                try {\n                                    transformCss(node.__cssVars.tree, Object.assign({}, settings, {\n                                        variables: variableStore.job,\n                                        onWarning: handleWarning\n                                    }));\n\n                                    const outCss = stringifyCss(node.__cssVars.tree);\n\n                                    if (settings.updateDOM) {\n                                        if (!node.getAttribute('data-cssvars')) {\n                                            node.setAttribute('data-cssvars', 'src');\n                                        }\n\n                                        if (outCss.length) {\n                                            const dataGroup       = node.getAttribute('data-cssvars-group') || ++counters.group;\n                                            const outCssNoSpaces = outCss.replace(/\\s/g,'');\n                                            const outNode        = settings.rootElement.querySelector(`[data-cssvars=\"out\"][data-cssvars-group=\"${dataGroup}\"]`) || document.createElement('style');\n\n                                            hasKeyframesWithVars = hasKeyframesWithVars || regex.cssKeyframes.test(outCss);\n\n                                            if (!outNode.hasAttribute('data-cssvars')) {\n                                                outNode.setAttribute('data-cssvars', 'out');\n                                            }\n\n                                            // Non-transformed CSS\n                                            if (outCssNoSpaces === node.textContent.replace(/\\s/g,'')) {\n                                                isSkip = true;\n\n                                                if (outNode && outNode.parentNode) {\n                                                    node.removeAttribute('data-cssvars-group');\n                                                    outNode.parentNode.removeChild(outNode);\n                                                }\n                                            }\n                                            // Transformed CSS\n                                            else if (outCssNoSpaces !== outNode.textContent.replace(/\\s/g,'')) {\n                                                [node, outNode].forEach(n => {\n                                                    n.setAttribute('data-cssvars-job', counters.job);\n                                                    n.setAttribute('data-cssvars-group', dataGroup);\n                                                });\n                                                outNode.textContent = outCss;\n                                                outCssArray.push(outCss);\n                                                outNodeArray.push(outNode);\n\n                                                if (!outNode.parentNode) {\n                                                    node.parentNode.insertBefore(outNode, node.nextSibling);\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (node.textContent.replace(/\\s/g,'') !== outCss) {\n                                            outCssArray.push(outCss);\n                                        }\n                                    }\n                                }\n                                catch(err) {\n                                    handleError(err.message, node);\n                                }\n                            }\n\n                            if (isSkip) {\n                                node.setAttribute('data-cssvars', 'skip');\n                            }\n\n                            if (!node.hasAttribute('data-cssvars-job')) {\n                                node.setAttribute('data-cssvars-job', counters.job);\n                            }\n                        });\n\n                        // Update source node count\n                        cssVarsSrcNodeCount = settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars=\"out\"])').length;\n\n                        // Process shadow DOM\n                        if (settings.shadowDOM) {\n                            const elms = [\n                                settings.rootElement,\n                                ...settings.rootElement.querySelectorAll('*')\n                            ];\n\n                            // Iterates over all elements in rootElement and calls\n                            // cssVars on each shadowRoot, passing document-level\n                            // custom properties as options.variables.\n                            for (let i = 0, elm; (elm = elms[i]); ++i) {\n                                if (elm.shadowRoot && elm.shadowRoot.querySelector('style')) {\n                                    const shadowSettings = Object.assign({}, settings, {\n                                        rootElement: elm.shadowRoot\n                                    });\n\n                                    cssVars(shadowSettings);\n                                }\n                            }\n                        }\n\n                        // Fix keyframes\n                        if (settings.updateDOM && hasKeyframesWithVars) {\n                            fixKeyframes(settings.rootElement);\n                        }\n\n                        // Reset running flag. Must be done before onComplete\n                        // callback to avoid a callback error preventing the\n                        // flag from being reset after the callback.\n                        cssVarsIsRunning = false;\n\n                        // Callback\n                        settings.onComplete(\n                            outCssArray.join(''),\n                            outNodeArray,\n                            JSON.parse(JSON.stringify(variableStore.job)),\n                            getTimeStamp() - settings.__benchmark\n                        );\n                    }\n                }\n            });\n        }\n    }\n    // Delay function until DOMContentLoaded event is fired\n    /* istanbul ignore next */\n    else {\n        document.addEventListener('DOMContentLoaded', function init(evt) {\n            cssVars(options);\n\n            document.removeEventListener('DOMContentLoaded', init);\n        });\n    }\n}\n\n// Ponyfill reset\ncssVars.reset = function() {\n    // Reset counters\n    counters.job = 0;\n    counters.group = 0;\n\n    // Reset running flag\n    cssVarsIsRunning = false;\n\n    // Disconnect MutationObserver\n    if (cssVarsObserver) {\n        cssVarsObserver.disconnect();\n        cssVarsObserver = null;\n    }\n\n    // Reset source node count\n    cssVarsSrcNodeCount = 0;\n\n    // Reset debounce timer\n    debounceTimer = null;\n\n    // Reset shadowDOM ready flag\n    isShadowDOMReady = false;\n\n    // Reset variable storage\n    for (const prop in variableStore) {\n        variableStore[prop] = {};\n    }\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates mutation observer that executes the ponyfill when a <link> or <style>\n * DOM mutation is observed.\n *\n * @param {object} settings\n */\nfunction addMutationObserver(settings) {\n    function isLink(node) {\n        const isStylesheet = node.tagName === 'LINK' && (node.getAttribute('rel') || '').indexOf('stylesheet') !== -1;\n\n        return isStylesheet && !node.disabled;\n    }\n    function isStyle(node) {\n        return node.tagName === 'STYLE' && !node.disabled;\n    }\n    function isValidAddMutation(mutationNodes) {\n        return Array.apply(null, mutationNodes).some(node => {\n            const isElm           = node.nodeType === 1;\n            const hasAttr         = isElm && node.hasAttribute('data-cssvars');\n            const isStyleWithVars = isStyle(node) && regex.cssVars.test(node.textContent);\n            const isValid         = !hasAttr && (isLink(node) || isStyleWithVars);\n\n            return isValid;\n        });\n    }\n    function isValidRemoveMutation(mutationNodes) {\n        return Array.apply(null, mutationNodes).some(node => {\n            const isElm     = node.nodeType === 1;\n            const isOutNode = isElm && node.getAttribute('data-cssvars') === 'out';\n            const isSrcNode = isElm && node.getAttribute('data-cssvars') === 'src';\n            const isValid   = isSrcNode;\n\n            if (isSrcNode || isOutNode) {\n                const dataGroup  = node.getAttribute('data-cssvars-group');\n                const orphanNode = settings.rootElement.querySelector(`[data-cssvars-group=\"${dataGroup}\"]`);\n\n                if (isSrcNode) {\n                    resetCssNodes(settings.rootElement);\n                    variableStore.dom = {};\n                }\n\n                if (orphanNode) {\n                    orphanNode.parentNode.removeChild(orphanNode);\n                }\n            }\n\n            return isValid;\n        });\n    }\n\n    if (!window.MutationObserver) {\n        return;\n    }\n\n    if (cssVarsObserver) {\n        cssVarsObserver.disconnect();\n        cssVarsObserver = null;\n    }\n\n    cssVarsObserver = new MutationObserver(function(mutations) {\n        const hasValidMutation = mutations.some((mutation) => {\n            let isValid = false;\n\n            if (mutation.type === 'attributes') {\n                isValid = isLink(mutation.target);\n            }\n            else if (mutation.type === 'childList') {\n                isValid = isValidAddMutation(mutation.addedNodes) || isValidRemoveMutation(mutation.removedNodes);\n            }\n\n            return isValid;\n        });\n\n        if (hasValidMutation) {\n            cssVars(settings);\n        }\n    });\n\n    cssVarsObserver.observe(document.documentElement, {\n        attributes     : true,\n        attributeFilter: ['disabled', 'href'],\n        childList      : true,\n        subtree        : true\n    });\n}\n\n/**\n * Debounces cssVars() calls\n *\n * @param {object} settings\n */\nfunction cssVarsDebounced(settings, delay = 100) {\n    clearTimeout(debounceTimer);\n    debounceTimer = setTimeout(function() {\n        settings.__benchmark = null;\n        cssVars(settings);\n    }, delay);\n}\n\n/**\n * Fixes issue with keyframe properties set using CSS custom property not being\n * applied properly in some legacy (IE) and modern (Safari) browsers.\n *\n * @param {object} rootElement\n */\nfunction fixKeyframes(rootElement) {\n    const animationNameProp = [\n        'animation-name',\n        '-moz-animation-name',\n        '-webkit-animation-name'\n    ].filter(prop => getComputedStyle(document.body)[prop])[0];\n\n    if (animationNameProp) {\n        const allNodes      = rootElement.getElementsByTagName('*');\n        const keyframeNodes = [];\n        const nameMarker    = '__CSSVARSPONYFILL-KEYFRAMES__';\n\n        // Modify animation name\n        for (let i = 0, len = allNodes.length; i < len; i++) {\n            const node          = allNodes[i];\n            const animationName = getComputedStyle(node)[animationNameProp];\n\n            if (animationName !== 'none') {\n                node.style[animationNameProp] += nameMarker;\n                keyframeNodes.push(node);\n            }\n        }\n\n        // Force reflow\n        void document.body.offsetHeight;\n\n        // Restore animation name\n        for (let i = 0, len = keyframeNodes.length; i < len; i++) {\n            const nodeStyle = keyframeNodes[i].style;\n\n            nodeStyle[animationNameProp] = nodeStyle[animationNameProp].replace(nameMarker, '');\n        }\n    }\n}\n\n/**\n * Convert relative CSS url(...) values to absolute based on baseUrl\n *\n * @param {string} cssText\n * @param {string} baseUrl\n * @returns {string}\n */\nfunction fixRelativeCssUrls(cssText, baseUrl) {\n    const cssUrls = cssText\n        // Remove comments\n        .replace(regex.cssComments, '')\n        // Match url(...) values\n        .match(regex.cssUrls) || [];\n\n    cssUrls.forEach(cssUrl => {\n        const oldUrl = cssUrl.replace(regex.cssUrls, '$1');\n        const newUrl = getFullUrl(oldUrl, baseUrl);\n\n        cssText = cssText.replace(cssUrl, cssUrl.replace(oldUrl, newUrl));\n    });\n\n    return cssText;\n}\n\n/**\n * Converts all object property names to leading '--' style\n *\n * @param {object} varObj Object containing CSS custom property name:value pairs\n * @returns {object}\n */\nfunction fixVarNames(varObj = {}) {\n    const reLeadingHyphens = /^-{2}/;\n\n    return Object.keys(varObj).reduce((obj, value) => {\n        const key = reLeadingHyphens.test(value) ? value : `--${value.replace(/^-+/, '')}`;\n\n        obj[key] = varObj[value];\n\n        return obj;\n    }, {});\n}\n\n/**\n * Returns fully qualified URL from relative URL and (optional) base URL\n *\n * @param   {string} url\n * @param   {string} [base=location.href]\n * @returns {string}\n */\nfunction getFullUrl(url, base = location.href) {\n    const d = document.implementation.createHTMLDocument('');\n    const b = d.createElement('base');\n    const a = d.createElement('a');\n\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n\n    return a.href;\n}\n\n/**\n * Returns a time stamp in milliseconds\n *\n * @returns {number}\n */\nfunction getTimeStamp() {\n    return isBrowser && (window.performance || {}).now ? window.performance.now() : new Date().getTime();\n}\n\nfunction resetCssNodes(rootElement) {\n    const resetNodes = Array.apply(null, rootElement.querySelectorAll('[data-cssvars=\"skip\"],[data-cssvars=\"src\"]'));\n\n    resetNodes.forEach(node => node.setAttribute('data-cssvars', ''));\n}\n\n\n// Export\n// =============================================================================\nexport default cssVars;\n"],"names":["getUrls","urls","options","arguments","length","undefined","settings","mimeType","onBeforeSend","Function","prototype","onSuccess","onError","onComplete","urlArray","Array","isArray","urlQueue","apply","map","x","isValidCss","cssText","isHTML","trim","charAt","xhr","urlIndex","responseText","returnVal","indexOf","parser","document","createElement","forEach","url","i","setAttribute","href","String","isIElte9","Boolean","all","window","atob","isIElte9CORS","host","split","location","isSameProtocol","protocol","xdr","XDomainRequest","open","timeout","onprogress","ontimeout","onload","onerror","err","setTimeout","send","console","warn","concat","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","getCssData","regex","cssComments","cssImports","rootElement","include","exclude","filter","useCSSOM","sourceNodes","querySelectorAll","node","matchesSelector","cssArray","handleComplete","isComplete","join","handleSuccess","cssIndex","sourceUrl","resolveImports","resolvedCssText","errorData","data","test","parseImportData","baseUrl","ignoreRules","importData","rules","replace","match","rule","absoluteUrls","getFullUrl","absoluteRules","oldUrl","newUrl","callbackFn","__errorData","__errorRules","responseImportData","push","responseArray","importText","linkHref","getAttribute","linkRel","isLink","nodeName","toLowerCase","isStyle","textContent","sheet","cssRules","base","d","implementation","createHTMLDocument","b","a","head","appendChild","body","baseURI","querySelector","elm","selector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","balanced","str","RegExp","maybeMatch","r","range","start","end","pre","slice","post","reg","m","begs","beg","left","right","result","ai","bi","pop","parseCss","css","defaults","preserveStatic","removeComments","_extends","errors","error","msg","Error","re","exec","close","whitespace","comment","type","comments","cmnts","c","s","declaration","at_rule","comment_regexp","prop","val","ret","property","value","declarations","decls","keyframe","vals","values","at_keyframes","vendor","name","frame","frames","keyframes","at_page","sel","selectors","at_page_margin_box","at_fontface","at_supports","supports","at_host","at_media","media","at_custom_m","at_document","at_x","hasVarFunc","some","decl","arr","obj","balancedMatch","hasVarDecl","core","stylesheet","parseVars","cssData","parseHost","store","onWarning","reVarDeclSelectors","stringifyCss","tree","delim","cb","renderMethods","charset","visit","import","namespace","page","nodes","buf","n","txt","walkCss","fn","VAR_PROP_IDENTIFIER","VAR_FUNC_IDENTIFIER","transformCss","preserveVars","variables","splice","resolvedValue","resolveValue","fixNestedCalc","reCalcVal","newVal","__recursiveFallback","valueData","resolveFunc","fallback","Object","hasOwnProperty","replacement","unresolvedFallback","isEmptyVarFunc","isBrowser","isNativeSupport","CSS","counters","group","job","shadowDOM","onlyLegacy","silent","updateDOM","updateURLs","watch","cssKeyframes","cssMediaQueries","cssUrls","cssVarDeclRules","cssVarDecls","cssVarFunc","cssVars","variableStore","dom","user","cssVarsIsRunning","cssVarsObserver","cssVarsSrcNodeCount","debounceTimer","isShadowDOMReady","msgPrefix","handleError","message","sourceNode","handleWarning","addMutationObserver","disconnect","__benchmark","cssVarsDebounced","getTimeStamp","fixVarNames","outNodes","outNode","dataGroup","srcNode","parentNode","removeChild","srcNodes","targetElm","documentElement","keys","key","style","setProperty","shadowRoot","nodeArray","responseUrl","responseURL","statusText","errorMsg","fixRelativeCssUrls","currentVars","hasVarChange","cssTree","__cssVars","resetCssNodes","outCssArray","outNodeArray","hasKeyframesWithVars","isSkip","outCss","outCssNoSpaces","hasAttribute","removeAttribute","insertBefore","nextSibling","elms","shadowSettings","fixKeyframes","JSON","parse","stringify","addEventListener","init","evt","removeEventListener","reset","isStylesheet","tagName","disabled","isValidAddMutation","mutationNodes","isElm","nodeType","hasAttr","isStyleWithVars","isValid","isValidRemoveMutation","isOutNode","isSrcNode","orphanNode","MutationObserver","mutations","hasValidMutation","mutation","target","addedNodes","removedNodes","observe","attributes","attributeFilter","childList","subtree","delay","clearTimeout","animationNameProp","getComputedStyle","allNodes","getElementsByTagName","keyframeNodes","nameMarker","len","animationName","offsetHeight","nodeStyle","cssUrl","varObj","reLeadingHyphens","reduce","performance","now","Date","getTime","resetNodes"],"mappings":"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"}