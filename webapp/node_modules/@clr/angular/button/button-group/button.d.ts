import { EventEmitter, TemplateRef } from '@angular/core';
import { ClrLoadingState } from '../../utils/loading/loading';
import { LoadingListener } from '../../utils/loading/loading-listener';
import { ButtonInGroupService } from '../providers/button-in-group.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrButton implements LoadingListener {
    buttonInGroupService: ButtonInGroupService;
    private toggleService;
    private _enableService;
    templateRef: TemplateRef<ClrButton>;
    constructor(buttonInGroupService: ButtonInGroupService, toggleService: ClrPopoverToggleService);
    private _inMenu;
    get inMenu(): boolean;
    set inMenu(value: boolean);
    private _classNames;
    get classNames(): string;
    set classNames(value: string);
    private _name;
    get name(): string;
    set name(value: string);
    private _type;
    get type(): string;
    set type(value: string);
    private _id;
    get id(): string;
    set id(value: string);
    private _disabled;
    get disabled(): any;
    set disabled(value: any);
    loading: boolean;
    loadingStateChange(state: ClrLoadingState): void;
    _click: EventEmitter<boolean>;
    emitClick($event: any): void;
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrButton>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrButton, "clr-button", never, {
    "inMenu": "clrInMenu";
    "classNames": "class";
    "name": "name";
    "type": "type";
    "id": "id";
    "disabled": "disabled";
}, {
    "_click": "click";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmQudHMiLCJzb3VyY2VzIjpbImJ1dHRvbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsckxvYWRpbmdTdGF0ZSB9IGZyb20gJy4uLy4uL3V0aWxzL2xvYWRpbmcvbG9hZGluZyc7XG5pbXBvcnQgeyBMb2FkaW5nTGlzdGVuZXIgfSBmcm9tICcuLi8uLi91dGlscy9sb2FkaW5nL2xvYWRpbmctbGlzdGVuZXInO1xuaW1wb3J0IHsgQnV0dG9uSW5Hcm91cFNlcnZpY2UgfSBmcm9tICcuLi9wcm92aWRlcnMvYnV0dG9uLWluLWdyb3VwLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9wb3BvdmVyL3Byb3ZpZGVycy9wb3BvdmVyLXRvZ2dsZS5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENsckJ1dHRvbiBpbXBsZW1lbnRzIExvYWRpbmdMaXN0ZW5lciB7XG4gICAgYnV0dG9uSW5Hcm91cFNlcnZpY2U6IEJ1dHRvbkluR3JvdXBTZXJ2aWNlO1xuICAgIHByaXZhdGUgdG9nZ2xlU2VydmljZTtcbiAgICBwcml2YXRlIF9lbmFibGVTZXJ2aWNlO1xuICAgIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxDbHJCdXR0b24+O1xuICAgIGNvbnN0cnVjdG9yKGJ1dHRvbkluR3JvdXBTZXJ2aWNlOiBCdXR0b25Jbkdyb3VwU2VydmljZSwgdG9nZ2xlU2VydmljZTogQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2UpO1xuICAgIHByaXZhdGUgX2luTWVudTtcbiAgICBnZXQgaW5NZW51KCk6IGJvb2xlYW47XG4gICAgc2V0IGluTWVudSh2YWx1ZTogYm9vbGVhbik7XG4gICAgcHJpdmF0ZSBfY2xhc3NOYW1lcztcbiAgICBnZXQgY2xhc3NOYW1lcygpOiBzdHJpbmc7XG4gICAgc2V0IGNsYXNzTmFtZXModmFsdWU6IHN0cmluZyk7XG4gICAgcHJpdmF0ZSBfbmFtZTtcbiAgICBnZXQgbmFtZSgpOiBzdHJpbmc7XG4gICAgc2V0IG5hbWUodmFsdWU6IHN0cmluZyk7XG4gICAgcHJpdmF0ZSBfdHlwZTtcbiAgICBnZXQgdHlwZSgpOiBzdHJpbmc7XG4gICAgc2V0IHR5cGUodmFsdWU6IHN0cmluZyk7XG4gICAgcHJpdmF0ZSBfaWQ7XG4gICAgZ2V0IGlkKCk6IHN0cmluZztcbiAgICBzZXQgaWQodmFsdWU6IHN0cmluZyk7XG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQ7XG4gICAgZ2V0IGRpc2FibGVkKCk6IGFueTtcbiAgICBzZXQgZGlzYWJsZWQodmFsdWU6IGFueSk7XG4gICAgbG9hZGluZzogYm9vbGVhbjtcbiAgICBsb2FkaW5nU3RhdGVDaGFuZ2Uoc3RhdGU6IENsckxvYWRpbmdTdGF0ZSk6IHZvaWQ7XG4gICAgX2NsaWNrOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgZW1pdENsaWNrKCRldmVudDogYW55KTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbn1cbiJdfQ==