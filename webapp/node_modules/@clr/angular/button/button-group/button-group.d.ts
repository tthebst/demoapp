import { QueryList } from '@angular/core';
import { ButtonInGroupService } from '../providers/button-in-group.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrPopoverPosition } from '../../utils/popover/interfaces/popover-position.interface';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ClrButton } from './button';
import * as ɵngcc0 from '@angular/core';
export declare class ClrButtonGroup {
    buttonGroupNewService: ButtonInGroupService;
    private toggleService;
    popoverId: string;
    commonStrings: ClrCommonStringsService;
    buttons: QueryList<ClrButton>;
    constructor(buttonGroupNewService: ButtonInGroupService, toggleService: ClrPopoverToggleService, popoverId: string, commonStrings: ClrCommonStringsService);
    popoverPosition: ClrPopoverPosition;
    get open(): boolean;
    inlineButtons: ClrButton[];
    menuButtons: ClrButton[];
    /**
     * 1. Initializes the initial Button Group View
     * 2. Subscribes to changes on the ContentChildren
     *    in case the user content projection changes
     */
    ngAfterContentInit(): void;
    /**
     * Moves the button into the other ViewContainer
     * when an update is received.
     *
     * @param button
     */
    rearrangeButton(button: ClrButton): void;
    /**
     * Author: Eudes
     *
     * Finds the order of a button w.r.t other buttons
     *
     * @param buttonToMove
     * @returns
     */
    getMoveIndex(buttonToMove: ClrButton): number;
    initializeButtons(): void;
    /**
     * Overflow Menu
     *
     */
    private _menuPosition;
    get menuPosition(): string;
    set menuPosition(pos: string);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrButtonGroup>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrButtonGroup, "clr-button-group", never, {
    "menuPosition": "clrMenuPosition";
}, {}, ["buttons"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWdyb3VwLmQudHMiLCJzb3VyY2VzIjpbImJ1dHRvbi1ncm91cC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnV0dG9uSW5Hcm91cFNlcnZpY2UgfSBmcm9tICcuLi9wcm92aWRlcnMvYnV0dG9uLWluLWdyb3VwLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyUG9wb3ZlclBvc2l0aW9uIH0gZnJvbSAnLi4vLi4vdXRpbHMvcG9wb3Zlci9pbnRlcmZhY2VzL3BvcG92ZXItcG9zaXRpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcG9wb3Zlci9wcm92aWRlcnMvcG9wb3Zlci10b2dnbGUuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJCdXR0b24gfSBmcm9tICcuL2J1dHRvbic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJCdXR0b25Hcm91cCB7XG4gICAgYnV0dG9uR3JvdXBOZXdTZXJ2aWNlOiBCdXR0b25Jbkdyb3VwU2VydmljZTtcbiAgICBwcml2YXRlIHRvZ2dsZVNlcnZpY2U7XG4gICAgcG9wb3ZlcklkOiBzdHJpbmc7XG4gICAgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2U7XG4gICAgYnV0dG9uczogUXVlcnlMaXN0PENsckJ1dHRvbj47XG4gICAgY29uc3RydWN0b3IoYnV0dG9uR3JvdXBOZXdTZXJ2aWNlOiBCdXR0b25Jbkdyb3VwU2VydmljZSwgdG9nZ2xlU2VydmljZTogQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2UsIHBvcG92ZXJJZDogc3RyaW5nLCBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZSk7XG4gICAgcG9wb3ZlclBvc2l0aW9uOiBDbHJQb3BvdmVyUG9zaXRpb247XG4gICAgZ2V0IG9wZW4oKTogYm9vbGVhbjtcbiAgICBpbmxpbmVCdXR0b25zOiBDbHJCdXR0b25bXTtcbiAgICBtZW51QnV0dG9uczogQ2xyQnV0dG9uW107XG4gICAgLyoqXG4gICAgICogMS4gSW5pdGlhbGl6ZXMgdGhlIGluaXRpYWwgQnV0dG9uIEdyb3VwIFZpZXdcbiAgICAgKiAyLiBTdWJzY3JpYmVzIHRvIGNoYW5nZXMgb24gdGhlIENvbnRlbnRDaGlsZHJlblxuICAgICAqICAgIGluIGNhc2UgdGhlIHVzZXIgY29udGVudCBwcm9qZWN0aW9uIGNoYW5nZXNcbiAgICAgKi9cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNb3ZlcyB0aGUgYnV0dG9uIGludG8gdGhlIG90aGVyIFZpZXdDb250YWluZXJcbiAgICAgKiB3aGVuIGFuIHVwZGF0ZSBpcyByZWNlaXZlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBidXR0b25cbiAgICAgKi9cbiAgICByZWFycmFuZ2VCdXR0b24oYnV0dG9uOiBDbHJCdXR0b24pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEF1dGhvcjogRXVkZXNcbiAgICAgKlxuICAgICAqIEZpbmRzIHRoZSBvcmRlciBvZiBhIGJ1dHRvbiB3LnIudCBvdGhlciBidXR0b25zXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYnV0dG9uVG9Nb3ZlXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBnZXRNb3ZlSW5kZXgoYnV0dG9uVG9Nb3ZlOiBDbHJCdXR0b24pOiBudW1iZXI7XG4gICAgaW5pdGlhbGl6ZUJ1dHRvbnMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBPdmVyZmxvdyBNZW51XG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIF9tZW51UG9zaXRpb247XG4gICAgZ2V0IG1lbnVQb3NpdGlvbigpOiBzdHJpbmc7XG4gICAgc2V0IG1lbnVQb3NpdGlvbihwb3M6IHN0cmluZyk7XG59XG4iXX0=