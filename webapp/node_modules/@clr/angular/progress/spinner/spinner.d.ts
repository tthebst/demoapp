import { ElementRef, AfterViewInit } from '@angular/core';
import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrSpinner implements AfterViewInit {
    private el;
    private ariaLiveService;
    constructor(el: ElementRef, ariaLiveService: ClrAriaLiveService);
    ngAfterViewInit(): void;
    /**
     * Default class for all spinners. This class is always true
     */
    get spinnerClass(): boolean;
    private _inline;
    get inlineClass(): boolean;
    set clrInline(value: boolean | string);
    private _inverse;
    get inverseClass(): boolean;
    set clrInverse(value: boolean | string);
    /**
     * By default all spinners are Large. (spinner-lg)
     * To change the size you need to use set clrSmall or clrMedium to TRUE/
     */
    /**
     * Small
     */
    private _small;
    get smallClass(): boolean;
    set clrSmall(value: boolean | string);
    /**
     * When clrSmall & clrMedium are set both to true.
     * The CSS with high priority will be small - so medium size will be ignored.
     *
     * For this reason if clrSmall is set we won't add clrMedium class.
     *
     * NOTE: This is dictated by the CSS rules.
     * DON'T USE clrSmall & clrMedium to toggle classes. This could change without notice.
     *
     * Also there is no logical need to have both of them set to TRUE or FALSE.
     */
    private _medium;
    get mediumClass(): boolean;
    set clrMedium(value: boolean | string);
    /**
     * By default aria-live will be set to `polite` .
     * To change is it you need to set clrAssertive or clrOff to TRUE
     *
     * There is priority:
     *   Default: polite
     *   Asertive
     *   Off
     *
     * In case when for some reason you have clrAssertive=TRUE and clrOff=TRUE,
     * we gonna set `assertive` as value of aria-live.
     *
     */
    /** @deprecated since 3.0, remove in 4.0 */
    assertive: boolean;
    /** @deprecated since 3.0, remove in 4.0 */
    off: boolean;
    get ariaLive(): ClrAriaLivePoliteness;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrSpinner>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrSpinner, "clr-spinner", never, {
    "clrInline": "clrInline";
    "clrInverse": "clrInverse";
    "clrSmall": "clrSmall";
    "clrMedium": "clrMedium";
    "assertive": "clrAssertive";
    "off": "clrOff";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5kLnRzIiwic291cmNlcyI6WyJzcGlubmVyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDbHJBcmlhTGl2ZVNlcnZpY2UsIENsckFyaWFMaXZlUG9saXRlbmVzcyB9IGZyb20gJy4uLy4uL3V0aWxzL2ExMXkvYXJpYS1saXZlLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xyU3Bpbm5lciBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgIHByaXZhdGUgZWw7XG4gICAgcHJpdmF0ZSBhcmlhTGl2ZVNlcnZpY2U7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIGFyaWFMaXZlU2VydmljZTogQ2xyQXJpYUxpdmVTZXJ2aWNlKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGNsYXNzIGZvciBhbGwgc3Bpbm5lcnMuIFRoaXMgY2xhc3MgaXMgYWx3YXlzIHRydWVcbiAgICAgKi9cbiAgICBnZXQgc3Bpbm5lckNsYXNzKCk6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfaW5saW5lO1xuICAgIGdldCBpbmxpbmVDbGFzcygpOiBib29sZWFuO1xuICAgIHNldCBjbHJJbmxpbmUodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpO1xuICAgIHByaXZhdGUgX2ludmVyc2U7XG4gICAgZ2V0IGludmVyc2VDbGFzcygpOiBib29sZWFuO1xuICAgIHNldCBjbHJJbnZlcnNlKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKTtcbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0IGFsbCBzcGlubmVycyBhcmUgTGFyZ2UuIChzcGlubmVyLWxnKVxuICAgICAqIFRvIGNoYW5nZSB0aGUgc2l6ZSB5b3UgbmVlZCB0byB1c2Ugc2V0IGNsclNtYWxsIG9yIGNsck1lZGl1bSB0byBUUlVFL1xuICAgICAqL1xuICAgIC8qKlxuICAgICAqIFNtYWxsXG4gICAgICovXG4gICAgcHJpdmF0ZSBfc21hbGw7XG4gICAgZ2V0IHNtYWxsQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBzZXQgY2xyU21hbGwodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqIFdoZW4gY2xyU21hbGwgJiBjbHJNZWRpdW0gYXJlIHNldCBib3RoIHRvIHRydWUuXG4gICAgICogVGhlIENTUyB3aXRoIGhpZ2ggcHJpb3JpdHkgd2lsbCBiZSBzbWFsbCAtIHNvIG1lZGl1bSBzaXplIHdpbGwgYmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqIEZvciB0aGlzIHJlYXNvbiBpZiBjbHJTbWFsbCBpcyBzZXQgd2Ugd29uJ3QgYWRkIGNsck1lZGl1bSBjbGFzcy5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoaXMgaXMgZGljdGF0ZWQgYnkgdGhlIENTUyBydWxlcy5cbiAgICAgKiBET04nVCBVU0UgY2xyU21hbGwgJiBjbHJNZWRpdW0gdG8gdG9nZ2xlIGNsYXNzZXMuIFRoaXMgY291bGQgY2hhbmdlIHdpdGhvdXQgbm90aWNlLlxuICAgICAqXG4gICAgICogQWxzbyB0aGVyZSBpcyBubyBsb2dpY2FsIG5lZWQgdG8gaGF2ZSBib3RoIG9mIHRoZW0gc2V0IHRvIFRSVUUgb3IgRkFMU0UuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfbWVkaXVtO1xuICAgIGdldCBtZWRpdW1DbGFzcygpOiBib29sZWFuO1xuICAgIHNldCBjbHJNZWRpdW0odmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQgYXJpYS1saXZlIHdpbGwgYmUgc2V0IHRvIGBwb2xpdGVgIC5cbiAgICAgKiBUbyBjaGFuZ2UgaXMgaXQgeW91IG5lZWQgdG8gc2V0IGNsckFzc2VydGl2ZSBvciBjbHJPZmYgdG8gVFJVRVxuICAgICAqXG4gICAgICogVGhlcmUgaXMgcHJpb3JpdHk6XG4gICAgICogICBEZWZhdWx0OiBwb2xpdGVcbiAgICAgKiAgIEFzZXJ0aXZlXG4gICAgICogICBPZmZcbiAgICAgKlxuICAgICAqIEluIGNhc2Ugd2hlbiBmb3Igc29tZSByZWFzb24geW91IGhhdmUgY2xyQXNzZXJ0aXZlPVRSVUUgYW5kIGNsck9mZj1UUlVFLFxuICAgICAqIHdlIGdvbm5hIHNldCBgYXNzZXJ0aXZlYCBhcyB2YWx1ZSBvZiBhcmlhLWxpdmUuXG4gICAgICpcbiAgICAgKi9cbiAgICAvKiogQGRlcHJlY2F0ZWQgc2luY2UgMy4wLCByZW1vdmUgaW4gNC4wICovXG4gICAgYXNzZXJ0aXZlOiBib29sZWFuO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjAsIHJlbW92ZSBpbiA0LjAgKi9cbiAgICBvZmY6IGJvb2xlYW47XG4gICAgZ2V0IGFyaWFMaXZlKCk6IENsckFyaWFMaXZlUG9saXRlbmVzcztcbn1cbiJdfQ==