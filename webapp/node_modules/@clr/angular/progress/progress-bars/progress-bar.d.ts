import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrProgressBar {
    private ariaLiveService;
    constructor(ariaLiveService: ClrAriaLiveService);
    /**
     * Handle component ID
     */
    private _ID;
    externalId: string;
    set id(value: string);
    get id(): string;
    max: number;
    displayval: string;
    private _value;
    get value(): number;
    set value(value: number);
    get progressClass(): boolean;
    private _labeled;
    get labeledClass(): boolean;
    set clrLabeled(value: boolean | string);
    private _fade;
    get fadeClass(): boolean;
    set clrFade(value: boolean | string);
    private _loop;
    get loopClass(): boolean;
    set clrLoop(value: boolean | string);
    private _success;
    get successClass(): boolean;
    /** @deprecated since 2.0, remove in 4.0 */
    set clrSuccess(value: boolean | string);
    private _danger;
    get dangerClass(): boolean;
    /** @deprecated since 2.0, remove in 4.0 */
    set clrDanger(value: boolean | string);
    private _flash;
    get flashClass(): boolean;
    set clrFlash(value: boolean | string);
    private _flashDanger;
    get flashDangerClass(): boolean;
    /** @deprecated since 2.0, remove in 4.0 */
    set clrFlashDanger(value: boolean | string);
    /** @deprecated since 3.0, remove in 4.0 */
    assertive: boolean;
    /** @deprecated since 3.0, remove in 4.0 */
    off: boolean;
    /**
     * Make sure that we always will have something that is readable
     * for the screen reader
     */
    get displayValue(): string;
    /**
     * Display aria-live only when there is value and it's not 0 or equal to the max value
     */
    displayAriaLive(): boolean;
    get ariaLive(): ClrAriaLivePoliteness;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrProgressBar>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrProgressBar, "clr-progress-bar", never, {
    "max": "clrMax";
    "id": "id";
    "value": "clrValue";
    "clrLabeled": "clrLabeled";
    "clrFade": "clrFade";
    "clrLoop": "clrLoop";
    "clrSuccess": "clrSuccess";
    "clrDanger": "clrDanger";
    "clrFlash": "clrFlash";
    "clrFlashDanger": "clrFlashDanger";
    "displayval": "clrDisplayval";
    "assertive": "clrAssertive";
    "off": "clrOff";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtYmFyLmQudHMiLCJzb3VyY2VzIjpbInByb2dyZXNzLWJhci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xyQXJpYUxpdmVTZXJ2aWNlLCBDbHJBcmlhTGl2ZVBvbGl0ZW5lc3MgfSBmcm9tICcuLi8uLi91dGlscy9hMTF5L2FyaWEtbGl2ZS5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENsclByb2dyZXNzQmFyIHtcbiAgICBwcml2YXRlIGFyaWFMaXZlU2VydmljZTtcbiAgICBjb25zdHJ1Y3RvcihhcmlhTGl2ZVNlcnZpY2U6IENsckFyaWFMaXZlU2VydmljZSk7XG4gICAgLyoqXG4gICAgICogSGFuZGxlIGNvbXBvbmVudCBJRFxuICAgICAqL1xuICAgIHByaXZhdGUgX0lEO1xuICAgIGV4dGVybmFsSWQ6IHN0cmluZztcbiAgICBzZXQgaWQodmFsdWU6IHN0cmluZyk7XG4gICAgZ2V0IGlkKCk6IHN0cmluZztcbiAgICBtYXg6IG51bWJlcjtcbiAgICBkaXNwbGF5dmFsOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfdmFsdWU7XG4gICAgZ2V0IHZhbHVlKCk6IG51bWJlcjtcbiAgICBzZXQgdmFsdWUodmFsdWU6IG51bWJlcik7XG4gICAgZ2V0IHByb2dyZXNzQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9sYWJlbGVkO1xuICAgIGdldCBsYWJlbGVkQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBzZXQgY2xyTGFiZWxlZCh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyk7XG4gICAgcHJpdmF0ZSBfZmFkZTtcbiAgICBnZXQgZmFkZUNsYXNzKCk6IGJvb2xlYW47XG4gICAgc2V0IGNsckZhZGUodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpO1xuICAgIHByaXZhdGUgX2xvb3A7XG4gICAgZ2V0IGxvb3BDbGFzcygpOiBib29sZWFuO1xuICAgIHNldCBjbHJMb29wKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKTtcbiAgICBwcml2YXRlIF9zdWNjZXNzO1xuICAgIGdldCBzdWNjZXNzQ2xhc3MoKTogYm9vbGVhbjtcbiAgICAvKiogQGRlcHJlY2F0ZWQgc2luY2UgMi4wLCByZW1vdmUgaW4gNC4wICovXG4gICAgc2V0IGNsclN1Y2Nlc3ModmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpO1xuICAgIHByaXZhdGUgX2RhbmdlcjtcbiAgICBnZXQgZGFuZ2VyQ2xhc3MoKTogYm9vbGVhbjtcbiAgICAvKiogQGRlcHJlY2F0ZWQgc2luY2UgMi4wLCByZW1vdmUgaW4gNC4wICovXG4gICAgc2V0IGNsckRhbmdlcih2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyk7XG4gICAgcHJpdmF0ZSBfZmxhc2g7XG4gICAgZ2V0IGZsYXNoQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBzZXQgY2xyRmxhc2godmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpO1xuICAgIHByaXZhdGUgX2ZsYXNoRGFuZ2VyO1xuICAgIGdldCBmbGFzaERhbmdlckNsYXNzKCk6IGJvb2xlYW47XG4gICAgLyoqIEBkZXByZWNhdGVkIHNpbmNlIDIuMCwgcmVtb3ZlIGluIDQuMCAqL1xuICAgIHNldCBjbHJGbGFzaERhbmdlcih2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyk7XG4gICAgLyoqIEBkZXByZWNhdGVkIHNpbmNlIDMuMCwgcmVtb3ZlIGluIDQuMCAqL1xuICAgIGFzc2VydGl2ZTogYm9vbGVhbjtcbiAgICAvKiogQGRlcHJlY2F0ZWQgc2luY2UgMy4wLCByZW1vdmUgaW4gNC4wICovXG4gICAgb2ZmOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyB3aWxsIGhhdmUgc29tZXRoaW5nIHRoYXQgaXMgcmVhZGFibGVcbiAgICAgKiBmb3IgdGhlIHNjcmVlbiByZWFkZXJcbiAgICAgKi9cbiAgICBnZXQgZGlzcGxheVZhbHVlKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IGFyaWEtbGl2ZSBvbmx5IHdoZW4gdGhlcmUgaXMgdmFsdWUgYW5kIGl0J3Mgbm90IDAgb3IgZXF1YWwgdG8gdGhlIG1heCB2YWx1ZVxuICAgICAqL1xuICAgIGRpc3BsYXlBcmlhTGl2ZSgpOiBib29sZWFuO1xuICAgIGdldCBhcmlhTGl2ZSgpOiBDbHJBcmlhTGl2ZVBvbGl0ZW5lc3M7XG59XG4iXX0=