import { Renderer2 } from '@angular/core';
import { Observable } from 'rxjs';
import { ClrPopoverToggleService } from '../../../utils/popover/providers/popover-toggle.service';
import { FocusService } from '../../../utils/focus/focus.service';
import { FocusableItem } from '../../../utils/focus/focusable-item/focusable-item';
import * as ɵngcc0 from '@angular/core';
export declare class DropdownFocusHandler implements FocusableItem {
    id: string;
    private renderer;
    private parent;
    private toggleService;
    private focusService;
    private platformId;
    constructor(id: string, renderer: Renderer2, parent: DropdownFocusHandler, toggleService: ClrPopoverToggleService, focusService: FocusService, platformId: Object);
    private _unlistenFuncs;
    /**
     * If the dropdown was opened by clicking on the trigger, we automatically move to the first item
     */
    moveToFirstItemWhenOpen(): void;
    private focusBackOnTrigger;
    /**
     * Focus on the menu when it opens, and focus back on the root trigger when the whole dropdown becomes closed
     */
    handleRootFocus(): void;
    private _trigger;
    get trigger(): HTMLElement;
    set trigger(el: HTMLElement);
    private _container;
    get container(): HTMLElement;
    set container(el: HTMLElement);
    focus(): void;
    blur(): void;
    activate(): void;
    private children;
    right?: Observable<FocusableItem>;
    down?: Observable<FocusableItem>;
    up?: Observable<FocusableItem>;
    private openAndGetChildren;
    private closeAndGetThis;
    resetChildren(): void;
    addChildren(children: FocusableItem[]): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DropdownFocusHandler>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DropdownFocusHandler>;
}
export declare const DROPDOWN_FOCUS_HANDLER_PROVIDER: ({
    provide: import("@angular/core").InjectionToken<string>;
    useFactory: typeof import("../../../utils/id-generator/id-generator.service").uniqueIdFactory;
} | import("@angular/core").Type<DropdownFocusHandler> | {
    provide: typeof FocusableItem;
    useExisting: import("@angular/core").Type<DropdownFocusHandler>;
})[];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tZm9jdXMtaGFuZGxlci5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImRyb3Bkb3duLWZvY3VzLWhhbmRsZXIuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvcG9wb3Zlci9wcm92aWRlcnMvcG9wb3Zlci10b2dnbGUuc2VydmljZSc7XG5pbXBvcnQgeyBGb2N1c1NlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi91dGlscy9mb2N1cy9mb2N1cy5zZXJ2aWNlJztcbmltcG9ydCB7IEZvY3VzYWJsZUl0ZW0gfSBmcm9tICcuLi8uLi8uLi91dGlscy9mb2N1cy9mb2N1c2FibGUtaXRlbS9mb2N1c2FibGUtaXRlbSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEcm9wZG93bkZvY3VzSGFuZGxlciBpbXBsZW1lbnRzIEZvY3VzYWJsZUl0ZW0ge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIHBhcmVudDtcbiAgICBwcml2YXRlIHRvZ2dsZVNlcnZpY2U7XG4gICAgcHJpdmF0ZSBmb2N1c1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHBhcmVudDogRHJvcGRvd25Gb2N1c0hhbmRsZXIsIHRvZ2dsZVNlcnZpY2U6IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlLCBmb2N1c1NlcnZpY2U6IEZvY3VzU2VydmljZSwgcGxhdGZvcm1JZDogT2JqZWN0KTtcbiAgICBwcml2YXRlIF91bmxpc3RlbkZ1bmNzO1xuICAgIC8qKlxuICAgICAqIElmIHRoZSBkcm9wZG93biB3YXMgb3BlbmVkIGJ5IGNsaWNraW5nIG9uIHRoZSB0cmlnZ2VyLCB3ZSBhdXRvbWF0aWNhbGx5IG1vdmUgdG8gdGhlIGZpcnN0IGl0ZW1cbiAgICAgKi9cbiAgICBtb3ZlVG9GaXJzdEl0ZW1XaGVuT3BlbigpOiB2b2lkO1xuICAgIHByaXZhdGUgZm9jdXNCYWNrT25UcmlnZ2VyO1xuICAgIC8qKlxuICAgICAqIEZvY3VzIG9uIHRoZSBtZW51IHdoZW4gaXQgb3BlbnMsIGFuZCBmb2N1cyBiYWNrIG9uIHRoZSByb290IHRyaWdnZXIgd2hlbiB0aGUgd2hvbGUgZHJvcGRvd24gYmVjb21lcyBjbG9zZWRcbiAgICAgKi9cbiAgICBoYW5kbGVSb290Rm9jdXMoKTogdm9pZDtcbiAgICBwcml2YXRlIF90cmlnZ2VyO1xuICAgIGdldCB0cmlnZ2VyKCk6IEhUTUxFbGVtZW50O1xuICAgIHNldCB0cmlnZ2VyKGVsOiBIVE1MRWxlbWVudCk7XG4gICAgcHJpdmF0ZSBfY29udGFpbmVyO1xuICAgIGdldCBjb250YWluZXIoKTogSFRNTEVsZW1lbnQ7XG4gICAgc2V0IGNvbnRhaW5lcihlbDogSFRNTEVsZW1lbnQpO1xuICAgIGZvY3VzKCk6IHZvaWQ7XG4gICAgYmx1cigpOiB2b2lkO1xuICAgIGFjdGl2YXRlKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjaGlsZHJlbjtcbiAgICByaWdodD86IE9ic2VydmFibGU8Rm9jdXNhYmxlSXRlbT47XG4gICAgZG93bj86IE9ic2VydmFibGU8Rm9jdXNhYmxlSXRlbT47XG4gICAgdXA/OiBPYnNlcnZhYmxlPEZvY3VzYWJsZUl0ZW0+O1xuICAgIHByaXZhdGUgb3BlbkFuZEdldENoaWxkcmVuO1xuICAgIHByaXZhdGUgY2xvc2VBbmRHZXRUaGlzO1xuICAgIHJlc2V0Q2hpbGRyZW4oKTogdm9pZDtcbiAgICBhZGRDaGlsZHJlbihjaGlsZHJlbjogRm9jdXNhYmxlSXRlbVtdKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY29uc3QgRFJPUERPV05fRk9DVVNfSEFORExFUl9QUk9WSURFUjogKHtcbiAgICBwcm92aWRlOiBpbXBvcnQoXCJAYW5ndWxhci9jb3JlXCIpLkluamVjdGlvblRva2VuPHN0cmluZz47XG4gICAgdXNlRmFjdG9yeTogdHlwZW9mIGltcG9ydChcIi4uLy4uLy4uL3V0aWxzL2lkLWdlbmVyYXRvci9pZC1nZW5lcmF0b3Iuc2VydmljZVwiKS51bmlxdWVJZEZhY3Rvcnk7XG59IHwgaW1wb3J0KFwiQGFuZ3VsYXIvY29yZVwiKS5UeXBlPERyb3Bkb3duRm9jdXNIYW5kbGVyPiB8IHtcbiAgICBwcm92aWRlOiB0eXBlb2YgRm9jdXNhYmxlSXRlbTtcbiAgICB1c2VFeGlzdGluZzogaW1wb3J0KFwiQGFuZ3VsYXIvY29yZVwiKS5UeXBlPERyb3Bkb3duRm9jdXNIYW5kbGVyPjtcbn0pW107XG4iXX0=