import { ElementRef, Injector, OnDestroy } from '@angular/core';
import { AbstractPopover } from '../common/abstract-popover';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { SignpostIdService } from './providers/signpost-id.service';
import { SignpostFocusManager } from './providers/signpost-focus-manager.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrSignpostContent extends AbstractPopover implements OnDestroy {
    commonStrings: ClrCommonStringsService;
    signpostContentId: string;
    private signpostIdService;
    private signpostFocusManager;
    private platformId;
    private document;
    constructor(injector: Injector, parentHost: ElementRef, commonStrings: ClrCommonStringsService, signpostContentId: string, signpostIdService: SignpostIdService, signpostFocusManager: SignpostFocusManager, platformId: Object, document: any);
    /**********
     *
     * @description
     * Close function that uses the signpost instance to toggle the state of the content popover.
     *
     */
    close(): void;
    private _position;
    get position(): string;
    /*********
     *
     * @description
     * A setter for the position of the ClrSignpostContent popover. This is a combination of the following:
     * - anchorPoint - where on the trigger to anchor the ClrSignpostContent
     * - popoverPoint - where on the ClrSignpostContent container to align with the anchorPoint
     * - offsetY - where on the Y axis to align the ClrSignpostContent so it meets specs
     * - offsetX - where on the X axis to align the ClrSignpostContent so it meets specs
     * There are 12 possible positions to place a ClrSignpostContent container:
     * - top-left
     * - top-middle
     * - top-right
     * - right-top
     * - right-middle
     * - right-bottom
     * - bottom-right
     * - bottom-middle
     * - bottom-left
     * - left-bottom
     * - left-middle
     * - left-top
     *
     * I think of it as follows for 'top-left' -> CONTAINER_SIDE-SIDE_POSITION. In this case CONTAINER_SIDE is 'top'
     * meaning the top of the trigger icon (above the icon that hides/shows) the ClrSignpostContent. And, SIDE_POSITION
     * is 'left' meaning two things: 1) the ClrSignpostContent container extends to the left and 2) the 'arrow/pointer'
     * linking the SingpostContent to the trigger points down at the horizontal center of the trigger icon.
     *
     * @param newPosition
     */
    set position(position: string);
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrSignpostContent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrSignpostContent, "clr-signpost-content", never, {
    "position": "clrPosition";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbnBvc3QtY29udGVudC5kLnRzIiwic291cmNlcyI6WyJzaWducG9zdC1jb250ZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgSW5qZWN0b3IsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWJzdHJhY3RQb3BvdmVyIH0gZnJvbSAnLi4vY29tbW9uL2Fic3RyYWN0LXBvcG92ZXInO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2lnbnBvc3RJZFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9zaWducG9zdC1pZC5zZXJ2aWNlJztcbmltcG9ydCB7IFNpZ25wb3N0Rm9jdXNNYW5hZ2VyIH0gZnJvbSAnLi9wcm92aWRlcnMvc2lnbnBvc3QtZm9jdXMtbWFuYWdlci5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENsclNpZ25wb3N0Q29udGVudCBleHRlbmRzIEFic3RyYWN0UG9wb3ZlciBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2U7XG4gICAgc2lnbnBvc3RDb250ZW50SWQ6IHN0cmluZztcbiAgICBwcml2YXRlIHNpZ25wb3N0SWRTZXJ2aWNlO1xuICAgIHByaXZhdGUgc2lnbnBvc3RGb2N1c01hbmFnZXI7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIHByaXZhdGUgZG9jdW1lbnQ7XG4gICAgY29uc3RydWN0b3IoaW5qZWN0b3I6IEluamVjdG9yLCBwYXJlbnRIb3N0OiBFbGVtZW50UmVmLCBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZSwgc2lnbnBvc3RDb250ZW50SWQ6IHN0cmluZywgc2lnbnBvc3RJZFNlcnZpY2U6IFNpZ25wb3N0SWRTZXJ2aWNlLCBzaWducG9zdEZvY3VzTWFuYWdlcjogU2lnbnBvc3RGb2N1c01hbmFnZXIsIHBsYXRmb3JtSWQ6IE9iamVjdCwgZG9jdW1lbnQ6IGFueSk7XG4gICAgLyoqKioqKioqKipcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIENsb3NlIGZ1bmN0aW9uIHRoYXQgdXNlcyB0aGUgc2lnbnBvc3QgaW5zdGFuY2UgdG8gdG9nZ2xlIHRoZSBzdGF0ZSBvZiB0aGUgY29udGVudCBwb3BvdmVyLlxuICAgICAqXG4gICAgICovXG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICBwcml2YXRlIF9wb3NpdGlvbjtcbiAgICBnZXQgcG9zaXRpb24oKTogc3RyaW5nO1xuICAgIC8qKioqKioqKipcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEEgc2V0dGVyIGZvciB0aGUgcG9zaXRpb24gb2YgdGhlIENsclNpZ25wb3N0Q29udGVudCBwb3BvdmVyLiBUaGlzIGlzIGEgY29tYmluYXRpb24gb2YgdGhlIGZvbGxvd2luZzpcbiAgICAgKiAtIGFuY2hvclBvaW50IC0gd2hlcmUgb24gdGhlIHRyaWdnZXIgdG8gYW5jaG9yIHRoZSBDbHJTaWducG9zdENvbnRlbnRcbiAgICAgKiAtIHBvcG92ZXJQb2ludCAtIHdoZXJlIG9uIHRoZSBDbHJTaWducG9zdENvbnRlbnQgY29udGFpbmVyIHRvIGFsaWduIHdpdGggdGhlIGFuY2hvclBvaW50XG4gICAgICogLSBvZmZzZXRZIC0gd2hlcmUgb24gdGhlIFkgYXhpcyB0byBhbGlnbiB0aGUgQ2xyU2lnbnBvc3RDb250ZW50IHNvIGl0IG1lZXRzIHNwZWNzXG4gICAgICogLSBvZmZzZXRYIC0gd2hlcmUgb24gdGhlIFggYXhpcyB0byBhbGlnbiB0aGUgQ2xyU2lnbnBvc3RDb250ZW50IHNvIGl0IG1lZXRzIHNwZWNzXG4gICAgICogVGhlcmUgYXJlIDEyIHBvc3NpYmxlIHBvc2l0aW9ucyB0byBwbGFjZSBhIENsclNpZ25wb3N0Q29udGVudCBjb250YWluZXI6XG4gICAgICogLSB0b3AtbGVmdFxuICAgICAqIC0gdG9wLW1pZGRsZVxuICAgICAqIC0gdG9wLXJpZ2h0XG4gICAgICogLSByaWdodC10b3BcbiAgICAgKiAtIHJpZ2h0LW1pZGRsZVxuICAgICAqIC0gcmlnaHQtYm90dG9tXG4gICAgICogLSBib3R0b20tcmlnaHRcbiAgICAgKiAtIGJvdHRvbS1taWRkbGVcbiAgICAgKiAtIGJvdHRvbS1sZWZ0XG4gICAgICogLSBsZWZ0LWJvdHRvbVxuICAgICAqIC0gbGVmdC1taWRkbGVcbiAgICAgKiAtIGxlZnQtdG9wXG4gICAgICpcbiAgICAgKiBJIHRoaW5rIG9mIGl0IGFzIGZvbGxvd3MgZm9yICd0b3AtbGVmdCcgLT4gQ09OVEFJTkVSX1NJREUtU0lERV9QT1NJVElPTi4gSW4gdGhpcyBjYXNlIENPTlRBSU5FUl9TSURFIGlzICd0b3AnXG4gICAgICogbWVhbmluZyB0aGUgdG9wIG9mIHRoZSB0cmlnZ2VyIGljb24gKGFib3ZlIHRoZSBpY29uIHRoYXQgaGlkZXMvc2hvd3MpIHRoZSBDbHJTaWducG9zdENvbnRlbnQuIEFuZCwgU0lERV9QT1NJVElPTlxuICAgICAqIGlzICdsZWZ0JyBtZWFuaW5nIHR3byB0aGluZ3M6IDEpIHRoZSBDbHJTaWducG9zdENvbnRlbnQgY29udGFpbmVyIGV4dGVuZHMgdG8gdGhlIGxlZnQgYW5kIDIpIHRoZSAnYXJyb3cvcG9pbnRlcidcbiAgICAgKiBsaW5raW5nIHRoZSBTaW5ncG9zdENvbnRlbnQgdG8gdGhlIHRyaWdnZXIgcG9pbnRzIGRvd24gYXQgdGhlIGhvcml6b250YWwgY2VudGVyIG9mIHRoZSB0cmlnZ2VyIGljb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmV3UG9zaXRpb25cbiAgICAgKi9cbiAgICBzZXQgcG9zaXRpb24ocG9zaXRpb246IHN0cmluZyk7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==