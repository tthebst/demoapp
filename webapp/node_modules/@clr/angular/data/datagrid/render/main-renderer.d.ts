import { AfterContentInit, AfterViewChecked, AfterViewInit, ElementRef, OnDestroy, Renderer2 } from '@angular/core';
import { Items } from '../providers/items';
import { Page } from '../providers/page';
import { TableSizeService } from '../providers/table-size.service';
import { DomAdapter } from '../../../utils/dom-adapter/dom-adapter';
import { NoopDomAdapter } from './noop-dom-adapter';
import { DatagridRenderOrganizer } from './render-organizer';
import { ColumnsService } from '../providers/columns.service';
import { DetailService } from '../providers/detail.service';
import * as ɵngcc0 from '@angular/core';
export declare const domAdapterFactory: (platformId: Object) => DomAdapter | NoopDomAdapter;
export declare class DatagridMainRenderer<T = any> implements AfterContentInit, AfterViewInit, AfterViewChecked, OnDestroy {
    private organizer;
    private items;
    private page;
    private domAdapter;
    private el;
    private renderer;
    private detailService;
    private tableSizeService;
    private columnsService;
    constructor(organizer: DatagridRenderOrganizer, items: Items, page: Page, domAdapter: DomAdapter, el: ElementRef, renderer: Renderer2, detailService: DetailService, tableSizeService: TableSizeService, columnsService: ColumnsService);
    private headers;
    private rows;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    private setupColumns;
    private _heightSet;
    private shouldComputeHeight;
    toggleDetailPane(state: boolean): void;
    /**
     * Computes the height of the datagrid.
     *
     * NOTE: We had to choose to set the height instead of the min-height because
     * IE 11 requires the height on the parent for the children flex grow/shrink properties to work.
     * When we used min-height, 1 1 auto doesn't used to work in IE11 :-(
     * But this doesn't affect the fix. It works in both fixed & variable height datagrids.
     *
     * Refer: http://stackoverflow.com/questions/24396205/flex-grow-not-working-in-internet-explorer-11-0
     */
    private computeDatagridHeight;
    private resetDatagridHeight;
    private subscriptions;
    ngOnDestroy(): void;
    /**
     * Makes each header compute its width.
     */
    private computeHeadersWidth;
    /**
     * Indicates if we want to re-compute columns width. This should only happen:
     * 1) When headers change, with columns being added or removed
     * 2) When rows are lazily loaded for the first time
     */
    private columnsSizesStable;
    private shouldStabilizeColumns;
    /**
     * Triggers a whole re-rendring cycle to set column sizes, if needed.
     */
    private stabilizeColumns;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatagridMainRenderer<any>>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DatagridMainRenderer<any>, "clr-datagrid", never, {}, {}, ["headers", "rows"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1yZW5kZXJlci5kLnRzIiwic291cmNlcyI6WyJtYWluLXJlbmRlcmVyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFTQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtEQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0NoZWNrZWQsIEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJdGVtcyB9IGZyb20gJy4uL3Byb3ZpZGVycy9pdGVtcyc7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAnLi4vcHJvdmlkZXJzL3BhZ2UnO1xuaW1wb3J0IHsgVGFibGVTaXplU2VydmljZSB9IGZyb20gJy4uL3Byb3ZpZGVycy90YWJsZS1zaXplLnNlcnZpY2UnO1xuaW1wb3J0IHsgRG9tQWRhcHRlciB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbS1hZGFwdGVyL2RvbS1hZGFwdGVyJztcbmltcG9ydCB7IE5vb3BEb21BZGFwdGVyIH0gZnJvbSAnLi9ub29wLWRvbS1hZGFwdGVyJztcbmltcG9ydCB7IERhdGFncmlkUmVuZGVyT3JnYW5pemVyIH0gZnJvbSAnLi9yZW5kZXItb3JnYW5pemVyJztcbmltcG9ydCB7IENvbHVtbnNTZXJ2aWNlIH0gZnJvbSAnLi4vcHJvdmlkZXJzL2NvbHVtbnMuc2VydmljZSc7XG5pbXBvcnQgeyBEZXRhaWxTZXJ2aWNlIH0gZnJvbSAnLi4vcHJvdmlkZXJzL2RldGFpbC5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGRvbUFkYXB0ZXJGYWN0b3J5OiAocGxhdGZvcm1JZDogT2JqZWN0KSA9PiBEb21BZGFwdGVyIHwgTm9vcERvbUFkYXB0ZXI7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXRhZ3JpZE1haW5SZW5kZXJlcjxUID0gYW55PiBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQsIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBvcmdhbml6ZXI7XG4gICAgcHJpdmF0ZSBpdGVtcztcbiAgICBwcml2YXRlIHBhZ2U7XG4gICAgcHJpdmF0ZSBkb21BZGFwdGVyO1xuICAgIHByaXZhdGUgZWw7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIGRldGFpbFNlcnZpY2U7XG4gICAgcHJpdmF0ZSB0YWJsZVNpemVTZXJ2aWNlO1xuICAgIHByaXZhdGUgY29sdW1uc1NlcnZpY2U7XG4gICAgY29uc3RydWN0b3Iob3JnYW5pemVyOiBEYXRhZ3JpZFJlbmRlck9yZ2FuaXplciwgaXRlbXM6IEl0ZW1zLCBwYWdlOiBQYWdlLCBkb21BZGFwdGVyOiBEb21BZGFwdGVyLCBlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgZGV0YWlsU2VydmljZTogRGV0YWlsU2VydmljZSwgdGFibGVTaXplU2VydmljZTogVGFibGVTaXplU2VydmljZSwgY29sdW1uc1NlcnZpY2U6IENvbHVtbnNTZXJ2aWNlKTtcbiAgICBwcml2YXRlIGhlYWRlcnM7XG4gICAgcHJpdmF0ZSByb3dzO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIHByaXZhdGUgc2V0dXBDb2x1bW5zO1xuICAgIHByaXZhdGUgX2hlaWdodFNldDtcbiAgICBwcml2YXRlIHNob3VsZENvbXB1dGVIZWlnaHQ7XG4gICAgdG9nZ2xlRGV0YWlsUGFuZShzdGF0ZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIGhlaWdodCBvZiB0aGUgZGF0YWdyaWQuXG4gICAgICpcbiAgICAgKiBOT1RFOiBXZSBoYWQgdG8gY2hvb3NlIHRvIHNldCB0aGUgaGVpZ2h0IGluc3RlYWQgb2YgdGhlIG1pbi1oZWlnaHQgYmVjYXVzZVxuICAgICAqIElFIDExIHJlcXVpcmVzIHRoZSBoZWlnaHQgb24gdGhlIHBhcmVudCBmb3IgdGhlIGNoaWxkcmVuIGZsZXggZ3Jvdy9zaHJpbmsgcHJvcGVydGllcyB0byB3b3JrLlxuICAgICAqIFdoZW4gd2UgdXNlZCBtaW4taGVpZ2h0LCAxIDEgYXV0byBkb2Vzbid0IHVzZWQgdG8gd29yayBpbiBJRTExIDotKFxuICAgICAqIEJ1dCB0aGlzIGRvZXNuJ3QgYWZmZWN0IHRoZSBmaXguIEl0IHdvcmtzIGluIGJvdGggZml4ZWQgJiB2YXJpYWJsZSBoZWlnaHQgZGF0YWdyaWRzLlxuICAgICAqXG4gICAgICogUmVmZXI6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQzOTYyMDUvZmxleC1ncm93LW5vdC13b3JraW5nLWluLWludGVybmV0LWV4cGxvcmVyLTExLTBcbiAgICAgKi9cbiAgICBwcml2YXRlIGNvbXB1dGVEYXRhZ3JpZEhlaWdodDtcbiAgICBwcml2YXRlIHJlc2V0RGF0YWdyaWRIZWlnaHQ7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTWFrZXMgZWFjaCBoZWFkZXIgY29tcHV0ZSBpdHMgd2lkdGguXG4gICAgICovXG4gICAgcHJpdmF0ZSBjb21wdXRlSGVhZGVyc1dpZHRoO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiB3ZSB3YW50IHRvIHJlLWNvbXB1dGUgY29sdW1ucyB3aWR0aC4gVGhpcyBzaG91bGQgb25seSBoYXBwZW46XG4gICAgICogMSkgV2hlbiBoZWFkZXJzIGNoYW5nZSwgd2l0aCBjb2x1bW5zIGJlaW5nIGFkZGVkIG9yIHJlbW92ZWRcbiAgICAgKiAyKSBXaGVuIHJvd3MgYXJlIGxhemlseSBsb2FkZWQgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICovXG4gICAgcHJpdmF0ZSBjb2x1bW5zU2l6ZXNTdGFibGU7XG4gICAgcHJpdmF0ZSBzaG91bGRTdGFiaWxpemVDb2x1bW5zO1xuICAgIC8qKlxuICAgICAqIFRyaWdnZXJzIGEgd2hvbGUgcmUtcmVuZHJpbmcgY3ljbGUgdG8gc2V0IGNvbHVtbiBzaXplcywgaWYgbmVlZGVkLlxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhYmlsaXplQ29sdW1ucztcbn1cbiJdfQ==