import { ElementRef, EventEmitter, OnDestroy, Renderer2 } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { DomAdapter } from '../../../utils/dom-adapter/dom-adapter';
import { ColumnResizerService } from '../providers/column-resizer.service';
import { DatagridRenderOrganizer } from './render-organizer';
import { ColumnState } from '../interfaces/column-state.interface';
import { ColumnsService } from '../providers/columns.service';
import * as ɵngcc0 from '@angular/core';
export declare class DatagridHeaderRenderer implements OnDestroy {
    private el;
    private renderer;
    private organizer;
    private domAdapter;
    private columnResizerService;
    private columnsService;
    private columnState;
    constructor(el: ElementRef, renderer: Renderer2, organizer: DatagridRenderOrganizer, domAdapter: DomAdapter, columnResizerService: ColumnResizerService, columnsService: ColumnsService, columnState: BehaviorSubject<ColumnState>);
    resizeEmitter: EventEmitter<number>;
    /**
     * Indicates if the column has a strict width, so it doesn't shrink or expand based on the content.
     */
    private widthSet;
    private autoSet;
    private subscriptions;
    ngOnDestroy(): void;
    private stateChanges;
    private clearWidth;
    private detectStrictWidth;
    private computeWidth;
    getColumnWidthState(): Partial<ColumnState>;
    setColumnState(index: number): void;
    private setWidth;
    private setHidden;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatagridHeaderRenderer>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DatagridHeaderRenderer, "clr-dg-column", never, {}, {
    "resizeEmitter": "clrDgColumnResize";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLXJlbmRlcmVyLmQudHMiLCJzb3VyY2VzIjpbImhlYWRlci1yZW5kZXJlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRG9tQWRhcHRlciB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbS1hZGFwdGVyL2RvbS1hZGFwdGVyJztcbmltcG9ydCB7IENvbHVtblJlc2l6ZXJTZXJ2aWNlIH0gZnJvbSAnLi4vcHJvdmlkZXJzL2NvbHVtbi1yZXNpemVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0YWdyaWRSZW5kZXJPcmdhbml6ZXIgfSBmcm9tICcuL3JlbmRlci1vcmdhbml6ZXInO1xuaW1wb3J0IHsgQ29sdW1uU3RhdGUgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NvbHVtbi1zdGF0ZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ29sdW1uc1NlcnZpY2UgfSBmcm9tICcuLi9wcm92aWRlcnMvY29sdW1ucy5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhdGFncmlkSGVhZGVyUmVuZGVyZXIgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZWw7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIG9yZ2FuaXplcjtcbiAgICBwcml2YXRlIGRvbUFkYXB0ZXI7XG4gICAgcHJpdmF0ZSBjb2x1bW5SZXNpemVyU2VydmljZTtcbiAgICBwcml2YXRlIGNvbHVtbnNTZXJ2aWNlO1xuICAgIHByaXZhdGUgY29sdW1uU3RhdGU7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIG9yZ2FuaXplcjogRGF0YWdyaWRSZW5kZXJPcmdhbml6ZXIsIGRvbUFkYXB0ZXI6IERvbUFkYXB0ZXIsIGNvbHVtblJlc2l6ZXJTZXJ2aWNlOiBDb2x1bW5SZXNpemVyU2VydmljZSwgY29sdW1uc1NlcnZpY2U6IENvbHVtbnNTZXJ2aWNlLCBjb2x1bW5TdGF0ZTogQmVoYXZpb3JTdWJqZWN0PENvbHVtblN0YXRlPik7XG4gICAgcmVzaXplRW1pdHRlcjogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIHRoZSBjb2x1bW4gaGFzIGEgc3RyaWN0IHdpZHRoLCBzbyBpdCBkb2Vzbid0IHNocmluayBvciBleHBhbmQgYmFzZWQgb24gdGhlIGNvbnRlbnQuXG4gICAgICovXG4gICAgcHJpdmF0ZSB3aWR0aFNldDtcbiAgICBwcml2YXRlIGF1dG9TZXQ7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBzdGF0ZUNoYW5nZXM7XG4gICAgcHJpdmF0ZSBjbGVhcldpZHRoO1xuICAgIHByaXZhdGUgZGV0ZWN0U3RyaWN0V2lkdGg7XG4gICAgcHJpdmF0ZSBjb21wdXRlV2lkdGg7XG4gICAgZ2V0Q29sdW1uV2lkdGhTdGF0ZSgpOiBQYXJ0aWFsPENvbHVtblN0YXRlPjtcbiAgICBzZXRDb2x1bW5TdGF0ZShpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBwcml2YXRlIHNldFdpZHRoO1xuICAgIHByaXZhdGUgc2V0SGlkZGVuO1xufVxuIl19