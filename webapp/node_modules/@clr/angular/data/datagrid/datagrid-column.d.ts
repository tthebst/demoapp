import { EventEmitter, OnDestroy, OnInit, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { ClrDatagridSortOrder } from './enums/sort-order.enum';
import { ClrDatagridComparatorInterface } from './interfaces/comparator.interface';
import { FiltersProvider } from './providers/filters';
import { Sort } from './providers/sort';
import { DatagridFilterRegistrar } from './utils/datagrid-filter-registrar';
import { ClrDatagridFilterInterface } from './interfaces/filter.interface';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { DetailService } from './providers/detail.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrDatagridColumn<T = any> extends DatagridFilterRegistrar<T, ClrDatagridFilterInterface<T>> implements OnDestroy, OnInit {
    private _sort;
    private vcr;
    private detailService;
    private changeDetectorRef;
    commonStrings: ClrCommonStringsService;
    constructor(_sort: Sort<T>, filters: FiltersProvider<T>, vcr: ViewContainerRef, detailService: DetailService, changeDetectorRef: ChangeDetectorRef, commonStrings: ClrCommonStringsService);
    showSeparator: boolean;
    /**
     * Subscription to the sort service changes
     */
    private subscriptions;
    ngOnDestroy(): void;
    private listenForDetailPaneChanges;
    private listenForSortingChanges;
    private _field;
    get field(): string;
    private _colType;
    get colType(): 'string' | 'number';
    set colType(value: 'string' | 'number');
    set field(field: string);
    private setupDefaultFilter;
    /**
     * ClrDatagridComparatorInterface to use when sorting the column
     */
    private _sortBy;
    get sortBy(): ClrDatagridComparatorInterface<T> | string;
    set sortBy(comparator: ClrDatagridComparatorInterface<T> | string);
    /**
     * Indicates if the column is sortable
     */
    get sortable(): boolean;
    /**
     * Indicates if the column is currently sorted
     *
     * @deprecated This will be removed soon, in favor of the sortOrder mechanism
     */
    private _sorted;
    get sorted(): boolean;
    /**
     * @deprecated This will be removed soon, in favor of the sortOrder mechanism
     */
    set sorted(value: boolean);
    /**
     * @deprecated This will be removed soon, in favor of the sortOrder mechanism
     */
    sortedChange: EventEmitter<boolean>;
    /**
     * Indicates how the column is currently sorted
     */
    private _sortOrder;
    get sortOrder(): ClrDatagridSortOrder;
    set sortOrder(value: ClrDatagridSortOrder);
    get ariaSort(): "none" | "ascending" | "descending";
    sortOrderChange: EventEmitter<ClrDatagridSortOrder>;
    sortIcon: string;
    /**
     * Sorts the datagrid based on this column
     */
    sort(reverse?: boolean): void;
    /**
     * A custom filter for this column that can be provided in the projected content
     */
    customFilter: boolean;
    set projectedFilter(custom: any);
    private initFilterValue;
    get filterValue(): string | [number, number];
    set updateFilterValue(newValue: string | [number, number]);
    set filterValue(newValue: string | [number, number]);
    filterValueChange: EventEmitter<any>;
    private wrappedInjector;
    ngOnInit(): void;
    get _view(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrDatagridColumn<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrDatagridColumn<any>, "clr-dg-column", never, {
    "field": "clrDgField";
    "colType": "clrDgColType";
    "updateFilterValue": "clrFilterValue";
    "sortBy": "clrDgSortBy";
    "sorted": "clrDgSorted";
    "sortOrder": "clrDgSortOrder";
}, {
    "sortedChange": "clrDgSortedChange";
    "sortOrderChange": "clrDgSortOrderChange";
    "filterValueChange": "clrFilterValueChange";
}, ["projectedFilter"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtY29sdW1uLmQudHMiLCJzb3VyY2VzIjpbImRhdGFncmlkLWNvbHVtbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uSW5pdCwgVmlld0NvbnRhaW5lclJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsckRhdGFncmlkU29ydE9yZGVyIH0gZnJvbSAnLi9lbnVtcy9zb3J0LW9yZGVyLmVudW0nO1xuaW1wb3J0IHsgQ2xyRGF0YWdyaWRDb21wYXJhdG9ySW50ZXJmYWNlIH0gZnJvbSAnLi9pbnRlcmZhY2VzL2NvbXBhcmF0b3IuaW50ZXJmYWNlJztcbmltcG9ydCB7IEZpbHRlcnNQcm92aWRlciB9IGZyb20gJy4vcHJvdmlkZXJzL2ZpbHRlcnMnO1xuaW1wb3J0IHsgU29ydCB9IGZyb20gJy4vcHJvdmlkZXJzL3NvcnQnO1xuaW1wb3J0IHsgRGF0YWdyaWRGaWx0ZXJSZWdpc3RyYXIgfSBmcm9tICcuL3V0aWxzL2RhdGFncmlkLWZpbHRlci1yZWdpc3RyYXInO1xuaW1wb3J0IHsgQ2xyRGF0YWdyaWRGaWx0ZXJJbnRlcmZhY2UgfSBmcm9tICcuL2ludGVyZmFjZXMvZmlsdGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZSc7XG5pbXBvcnQgeyBEZXRhaWxTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvZGV0YWlsLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xyRGF0YWdyaWRDb2x1bW48VCA9IGFueT4gZXh0ZW5kcyBEYXRhZ3JpZEZpbHRlclJlZ2lzdHJhcjxULCBDbHJEYXRhZ3JpZEZpbHRlckludGVyZmFjZTxUPj4gaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBfc29ydDtcbiAgICBwcml2YXRlIHZjcjtcbiAgICBwcml2YXRlIGRldGFpbFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZTtcbiAgICBjb25zdHJ1Y3Rvcihfc29ydDogU29ydDxUPiwgZmlsdGVyczogRmlsdGVyc1Byb3ZpZGVyPFQ+LCB2Y3I6IFZpZXdDb250YWluZXJSZWYsIGRldGFpbFNlcnZpY2U6IERldGFpbFNlcnZpY2UsIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UpO1xuICAgIHNob3dTZXBhcmF0b3I6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3Vic2NyaXB0aW9uIHRvIHRoZSBzb3J0IHNlcnZpY2UgY2hhbmdlc1xuICAgICAqL1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByaXZhdGUgbGlzdGVuRm9yRGV0YWlsUGFuZUNoYW5nZXM7XG4gICAgcHJpdmF0ZSBsaXN0ZW5Gb3JTb3J0aW5nQ2hhbmdlcztcbiAgICBwcml2YXRlIF9maWVsZDtcbiAgICBnZXQgZmllbGQoKTogc3RyaW5nO1xuICAgIHByaXZhdGUgX2NvbFR5cGU7XG4gICAgZ2V0IGNvbFR5cGUoKTogJ3N0cmluZycgfCAnbnVtYmVyJztcbiAgICBzZXQgY29sVHlwZSh2YWx1ZTogJ3N0cmluZycgfCAnbnVtYmVyJyk7XG4gICAgc2V0IGZpZWxkKGZpZWxkOiBzdHJpbmcpO1xuICAgIHByaXZhdGUgc2V0dXBEZWZhdWx0RmlsdGVyO1xuICAgIC8qKlxuICAgICAqIENsckRhdGFncmlkQ29tcGFyYXRvckludGVyZmFjZSB0byB1c2Ugd2hlbiBzb3J0aW5nIHRoZSBjb2x1bW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9zb3J0Qnk7XG4gICAgZ2V0IHNvcnRCeSgpOiBDbHJEYXRhZ3JpZENvbXBhcmF0b3JJbnRlcmZhY2U8VD4gfCBzdHJpbmc7XG4gICAgc2V0IHNvcnRCeShjb21wYXJhdG9yOiBDbHJEYXRhZ3JpZENvbXBhcmF0b3JJbnRlcmZhY2U8VD4gfCBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiB0aGUgY29sdW1uIGlzIHNvcnRhYmxlXG4gICAgICovXG4gICAgZ2V0IHNvcnRhYmxlKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIHRoZSBjb2x1bW4gaXMgY3VycmVudGx5IHNvcnRlZFxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgVGhpcyB3aWxsIGJlIHJlbW92ZWQgc29vbiwgaW4gZmF2b3Igb2YgdGhlIHNvcnRPcmRlciBtZWNoYW5pc21cbiAgICAgKi9cbiAgICBwcml2YXRlIF9zb3J0ZWQ7XG4gICAgZ2V0IHNvcnRlZCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFRoaXMgd2lsbCBiZSByZW1vdmVkIHNvb24sIGluIGZhdm9yIG9mIHRoZSBzb3J0T3JkZXIgbWVjaGFuaXNtXG4gICAgICovXG4gICAgc2V0IHNvcnRlZCh2YWx1ZTogYm9vbGVhbik7XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVGhpcyB3aWxsIGJlIHJlbW92ZWQgc29vbiwgaW4gZmF2b3Igb2YgdGhlIHNvcnRPcmRlciBtZWNoYW5pc21cbiAgICAgKi9cbiAgICBzb3J0ZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaG93IHRoZSBjb2x1bW4gaXMgY3VycmVudGx5IHNvcnRlZFxuICAgICAqL1xuICAgIHByaXZhdGUgX3NvcnRPcmRlcjtcbiAgICBnZXQgc29ydE9yZGVyKCk6IENsckRhdGFncmlkU29ydE9yZGVyO1xuICAgIHNldCBzb3J0T3JkZXIodmFsdWU6IENsckRhdGFncmlkU29ydE9yZGVyKTtcbiAgICBnZXQgYXJpYVNvcnQoKTogXCJub25lXCIgfCBcImFzY2VuZGluZ1wiIHwgXCJkZXNjZW5kaW5nXCI7XG4gICAgc29ydE9yZGVyQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Q2xyRGF0YWdyaWRTb3J0T3JkZXI+O1xuICAgIHNvcnRJY29uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU29ydHMgdGhlIGRhdGFncmlkIGJhc2VkIG9uIHRoaXMgY29sdW1uXG4gICAgICovXG4gICAgc29ydChyZXZlcnNlPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQSBjdXN0b20gZmlsdGVyIGZvciB0aGlzIGNvbHVtbiB0aGF0IGNhbiBiZSBwcm92aWRlZCBpbiB0aGUgcHJvamVjdGVkIGNvbnRlbnRcbiAgICAgKi9cbiAgICBjdXN0b21GaWx0ZXI6IGJvb2xlYW47XG4gICAgc2V0IHByb2plY3RlZEZpbHRlcihjdXN0b206IGFueSk7XG4gICAgcHJpdmF0ZSBpbml0RmlsdGVyVmFsdWU7XG4gICAgZ2V0IGZpbHRlclZhbHVlKCk6IHN0cmluZyB8IFtudW1iZXIsIG51bWJlcl07XG4gICAgc2V0IHVwZGF0ZUZpbHRlclZhbHVlKG5ld1ZhbHVlOiBzdHJpbmcgfCBbbnVtYmVyLCBudW1iZXJdKTtcbiAgICBzZXQgZmlsdGVyVmFsdWUobmV3VmFsdWU6IHN0cmluZyB8IFtudW1iZXIsIG51bWJlcl0pO1xuICAgIGZpbHRlclZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwcml2YXRlIHdyYXBwZWRJbmplY3RvcjtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIGdldCBfdmlldygpOiBhbnk7XG59XG4iXX0=