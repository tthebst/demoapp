import { AfterContentInit, AfterViewInit, ElementRef, EventEmitter, QueryList, Renderer2, ViewContainerRef } from '@angular/core';
import { ClrDatagridCell } from './datagrid-cell';
import { DisplayModeService } from './providers/display-mode.service';
import { ExpandableRowsCount } from './providers/global-expandable-rows';
import { RowActionService } from './providers/row-action-service';
import { Selection } from './providers/selection';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { SelectionType } from './enums/selection-type';
import { DatagridIfExpandService } from './datagrid-if-expanded.service';
import { ClrExpandableAnimation } from '../../utils/animations/expandable-animation/expandable-animation';
import { DetailService } from './providers/detail.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrDatagridRow<T = any> implements AfterContentInit, AfterViewInit {
    selection: Selection<T>;
    rowActionService: RowActionService;
    globalExpandable: ExpandableRowsCount;
    expand: DatagridIfExpandService;
    detailService: DetailService;
    private displayMode;
    private vcr;
    private renderer;
    private el;
    commonStrings: ClrCommonStringsService;
    id: string;
    radioId: string;
    checkboxId: string;
    SELECTION_TYPE: typeof SelectionType;
    expandAnimation: ClrExpandableAnimation;
    /**
     * Model of the row, to use for selection
     */
    item: T;
    replaced: any;
    expandAnimationTrigger: boolean;
    constructor(selection: Selection<T>, rowActionService: RowActionService, globalExpandable: ExpandableRowsCount, expand: DatagridIfExpandService, detailService: DetailService, displayMode: DisplayModeService, vcr: ViewContainerRef, renderer: Renderer2, el: ElementRef, commonStrings: ClrCommonStringsService);
    private _selected;
    /**
     * Indicates if the row is selected
     */
    get selected(): boolean;
    set selected(value: boolean);
    set clrDgSelectable(value: boolean);
    get clrDgSelectable(): boolean;
    selectedChanged: EventEmitter<boolean>;
    toggle(selected?: boolean): void;
    get expanded(): boolean;
    set expanded(value: boolean);
    expandedChange: EventEmitter<boolean>;
    toggleExpand(): void;
    detailButton: any;
    private _detailOpenLabel;
    set clrDgDetailOpenLabel(label: string);
    get clrDgDetailOpenLabel(): string;
    private _detailCloseLabel;
    set clrDgDetailCloseLabel(label: string);
    get clrDgDetailCloseLabel(): string;
    /*****
     * property dgCells
     *
     * @description
     * A Query List of the ClrDatagrid cells in this row.
     *
     */
    dgCells: QueryList<ClrDatagridCell>;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    private subscriptions;
    ngOnDestroy(): void;
    displayCells: boolean;
    _stickyCells: ViewContainerRef;
    _scrollableCells: ViewContainerRef;
    _calculatedCells: ViewContainerRef;
    private wrappedInjector;
    ngOnInit(): void;
    get _view(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrDatagridRow<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrDatagridRow<any>, "clr-dg-row", never, {
    "selected": "clrDgSelected";
    "clrDgSelectable": "clrDgSelectable";
    "expanded": "clrDgExpanded";
    "clrDgDetailOpenLabel": "clrDgDetailOpenLabel";
    "clrDgDetailCloseLabel": "clrDgDetailCloseLabel";
    "item": "clrDgItem";
}, {
    "selectedChanged": "clrDgSelectedChange";
    "expandedChange": "clrDgExpandedChange";
}, ["dgCells"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtcm93LmQudHMiLCJzb3VyY2VzIjpbImRhdGFncmlkLXJvdy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUFXQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBK0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBRdWVyeUxpc3QsIFJlbmRlcmVyMiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2xyRGF0YWdyaWRDZWxsIH0gZnJvbSAnLi9kYXRhZ3JpZC1jZWxsJztcbmltcG9ydCB7IERpc3BsYXlNb2RlU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2Rpc3BsYXktbW9kZS5zZXJ2aWNlJztcbmltcG9ydCB7IEV4cGFuZGFibGVSb3dzQ291bnQgfSBmcm9tICcuL3Byb3ZpZGVycy9nbG9iYWwtZXhwYW5kYWJsZS1yb3dzJztcbmltcG9ydCB7IFJvd0FjdGlvblNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9yb3ctYWN0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHsgU2VsZWN0aW9uIH0gZnJvbSAnLi9wcm92aWRlcnMvc2VsZWN0aW9uJztcbmltcG9ydCB7IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvaTE4bi9jb21tb24tc3RyaW5ncy5zZXJ2aWNlJztcbmltcG9ydCB7IFNlbGVjdGlvblR5cGUgfSBmcm9tICcuL2VudW1zL3NlbGVjdGlvbi10eXBlJztcbmltcG9ydCB7IERhdGFncmlkSWZFeHBhbmRTZXJ2aWNlIH0gZnJvbSAnLi9kYXRhZ3JpZC1pZi1leHBhbmRlZC5zZXJ2aWNlJztcbmltcG9ydCB7IENsckV4cGFuZGFibGVBbmltYXRpb24gfSBmcm9tICcuLi8uLi91dGlscy9hbmltYXRpb25zL2V4cGFuZGFibGUtYW5pbWF0aW9uL2V4cGFuZGFibGUtYW5pbWF0aW9uJztcbmltcG9ydCB7IERldGFpbFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9kZXRhaWwuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJEYXRhZ3JpZFJvdzxUID0gYW55PiBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQge1xuICAgIHNlbGVjdGlvbjogU2VsZWN0aW9uPFQ+O1xuICAgIHJvd0FjdGlvblNlcnZpY2U6IFJvd0FjdGlvblNlcnZpY2U7XG4gICAgZ2xvYmFsRXhwYW5kYWJsZTogRXhwYW5kYWJsZVJvd3NDb3VudDtcbiAgICBleHBhbmQ6IERhdGFncmlkSWZFeHBhbmRTZXJ2aWNlO1xuICAgIGRldGFpbFNlcnZpY2U6IERldGFpbFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBkaXNwbGF5TW9kZTtcbiAgICBwcml2YXRlIHZjcjtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgZWw7XG4gICAgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2U7XG4gICAgaWQ6IHN0cmluZztcbiAgICByYWRpb0lkOiBzdHJpbmc7XG4gICAgY2hlY2tib3hJZDogc3RyaW5nO1xuICAgIFNFTEVDVElPTl9UWVBFOiB0eXBlb2YgU2VsZWN0aW9uVHlwZTtcbiAgICBleHBhbmRBbmltYXRpb246IENsckV4cGFuZGFibGVBbmltYXRpb247XG4gICAgLyoqXG4gICAgICogTW9kZWwgb2YgdGhlIHJvdywgdG8gdXNlIGZvciBzZWxlY3Rpb25cbiAgICAgKi9cbiAgICBpdGVtOiBUO1xuICAgIHJlcGxhY2VkOiBhbnk7XG4gICAgZXhwYW5kQW5pbWF0aW9uVHJpZ2dlcjogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rpb246IFNlbGVjdGlvbjxUPiwgcm93QWN0aW9uU2VydmljZTogUm93QWN0aW9uU2VydmljZSwgZ2xvYmFsRXhwYW5kYWJsZTogRXhwYW5kYWJsZVJvd3NDb3VudCwgZXhwYW5kOiBEYXRhZ3JpZElmRXhwYW5kU2VydmljZSwgZGV0YWlsU2VydmljZTogRGV0YWlsU2VydmljZSwgZGlzcGxheU1vZGU6IERpc3BsYXlNb2RlU2VydmljZSwgdmNyOiBWaWV3Q29udGFpbmVyUmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBlbDogRWxlbWVudFJlZiwgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UpO1xuICAgIHByaXZhdGUgX3NlbGVjdGVkO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiB0aGUgcm93IGlzIHNlbGVjdGVkXG4gICAgICovXG4gICAgZ2V0IHNlbGVjdGVkKCk6IGJvb2xlYW47XG4gICAgc2V0IHNlbGVjdGVkKHZhbHVlOiBib29sZWFuKTtcbiAgICBzZXQgY2xyRGdTZWxlY3RhYmxlKHZhbHVlOiBib29sZWFuKTtcbiAgICBnZXQgY2xyRGdTZWxlY3RhYmxlKCk6IGJvb2xlYW47XG4gICAgc2VsZWN0ZWRDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgdG9nZ2xlKHNlbGVjdGVkPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgZ2V0IGV4cGFuZGVkKCk6IGJvb2xlYW47XG4gICAgc2V0IGV4cGFuZGVkKHZhbHVlOiBib29sZWFuKTtcbiAgICBleHBhbmRlZENoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIHRvZ2dsZUV4cGFuZCgpOiB2b2lkO1xuICAgIGRldGFpbEJ1dHRvbjogYW55O1xuICAgIHByaXZhdGUgX2RldGFpbE9wZW5MYWJlbDtcbiAgICBzZXQgY2xyRGdEZXRhaWxPcGVuTGFiZWwobGFiZWw6IHN0cmluZyk7XG4gICAgZ2V0IGNsckRnRGV0YWlsT3BlbkxhYmVsKCk6IHN0cmluZztcbiAgICBwcml2YXRlIF9kZXRhaWxDbG9zZUxhYmVsO1xuICAgIHNldCBjbHJEZ0RldGFpbENsb3NlTGFiZWwobGFiZWw6IHN0cmluZyk7XG4gICAgZ2V0IGNsckRnRGV0YWlsQ2xvc2VMYWJlbCgpOiBzdHJpbmc7XG4gICAgLyoqKioqXG4gICAgICogcHJvcGVydHkgZGdDZWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQSBRdWVyeSBMaXN0IG9mIHRoZSBDbHJEYXRhZ3JpZCBjZWxscyBpbiB0aGlzIHJvdy5cbiAgICAgKlxuICAgICAqL1xuICAgIGRnQ2VsbHM6IFF1ZXJ5TGlzdDxDbHJEYXRhZ3JpZENlbGw+O1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGRpc3BsYXlDZWxsczogYm9vbGVhbjtcbiAgICBfc3RpY2t5Q2VsbHM6IFZpZXdDb250YWluZXJSZWY7XG4gICAgX3Njcm9sbGFibGVDZWxsczogVmlld0NvbnRhaW5lclJlZjtcbiAgICBfY2FsY3VsYXRlZENlbGxzOiBWaWV3Q29udGFpbmVyUmVmO1xuICAgIHByaXZhdGUgd3JhcHBlZEluamVjdG9yO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgZ2V0IF92aWV3KCk6IGFueTtcbn1cbiJdfQ==