import { TrackByFunction } from '@angular/core';
import { Observable } from 'rxjs';
import { FiltersProvider } from './filters';
import { Page } from './page';
import { Sort } from './sort';
import * as ɵngcc0 from '@angular/core';
export declare class Items<T = any> {
    private _filters;
    private _sort;
    private _page;
    constructor(_filters: FiltersProvider<T>, _sort: Sort<T>, _page: Page);
    /**
     * Indicates if the data is currently loading
     */
    loading: boolean;
    /**
     * Tracking function to identify objects. Default is reference equality.
     */
    trackBy: TrackByFunction<T>;
    /**
     * Subscriptions to the other providers changes.
     */
    private _filtersSub;
    private _sortSub;
    private _pageSub;
    /**
     * Cleans up our subscriptions to other providers
     */
    destroy(): void;
    /**
     * Whether we should use smart items for this datagrid or let the user handle
     * everything.
     */
    private _smart;
    get smart(): boolean;
    smartenUp(): void;
    /**
     * List of all items in the datagrid
     */
    private _all;
    get all(): T[];
    set all(items: T[]);
    /**
     * Manually recompute the list of displayed items
     */
    refresh(): void;
    /**
     * Internal temporary step, which we preserve to avoid re-filtering or re-sorting if not necessary
     */
    private _filtered;
    /**
     * List of items currently displayed
     */
    private _displayed;
    get displayed(): T[];
    /**
     * The Observable that lets other classes subscribe to items changes
     */
    private _change;
    private emitChange;
    get change(): Observable<T[]>;
    private _allChanges;
    private emitAllChanges;
    get allChanges(): Observable<T[]>;
    /**
     * Checks if we don't have data to process yet, to abort early operations
     */
    private get uninitialized();
    /**
     * FiltersProvider items from the raw list
     */
    private _filterItems;
    /**
     * Sorts items in the filtered list
     */
    private _sortItems;
    /**
     * Extracts the current page from the sorted list
     */
    private _changePage;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Items<any>>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Items<any>>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMuZC50cyIsInNvdXJjZXMiOlsiaXRlbXMuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFja0J5RnVuY3Rpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEZpbHRlcnNQcm92aWRlciB9IGZyb20gJy4vZmlsdGVycyc7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAnLi9wYWdlJztcbmltcG9ydCB7IFNvcnQgfSBmcm9tICcuL3NvcnQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSXRlbXM8VCA9IGFueT4ge1xuICAgIHByaXZhdGUgX2ZpbHRlcnM7XG4gICAgcHJpdmF0ZSBfc29ydDtcbiAgICBwcml2YXRlIF9wYWdlO1xuICAgIGNvbnN0cnVjdG9yKF9maWx0ZXJzOiBGaWx0ZXJzUHJvdmlkZXI8VD4sIF9zb3J0OiBTb3J0PFQ+LCBfcGFnZTogUGFnZSk7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIHRoZSBkYXRhIGlzIGN1cnJlbnRseSBsb2FkaW5nXG4gICAgICovXG4gICAgbG9hZGluZzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUcmFja2luZyBmdW5jdGlvbiB0byBpZGVudGlmeSBvYmplY3RzLiBEZWZhdWx0IGlzIHJlZmVyZW5jZSBlcXVhbGl0eS5cbiAgICAgKi9cbiAgICB0cmFja0J5OiBUcmFja0J5RnVuY3Rpb248VD47XG4gICAgLyoqXG4gICAgICogU3Vic2NyaXB0aW9ucyB0byB0aGUgb3RoZXIgcHJvdmlkZXJzIGNoYW5nZXMuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfZmlsdGVyc1N1YjtcbiAgICBwcml2YXRlIF9zb3J0U3ViO1xuICAgIHByaXZhdGUgX3BhZ2VTdWI7XG4gICAgLyoqXG4gICAgICogQ2xlYW5zIHVwIG91ciBzdWJzY3JpcHRpb25zIHRvIG90aGVyIHByb3ZpZGVyc1xuICAgICAqL1xuICAgIGRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHdlIHNob3VsZCB1c2Ugc21hcnQgaXRlbXMgZm9yIHRoaXMgZGF0YWdyaWQgb3IgbGV0IHRoZSB1c2VyIGhhbmRsZVxuICAgICAqIGV2ZXJ5dGhpbmcuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfc21hcnQ7XG4gICAgZ2V0IHNtYXJ0KCk6IGJvb2xlYW47XG4gICAgc21hcnRlblVwKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBhbGwgaXRlbXMgaW4gdGhlIGRhdGFncmlkXG4gICAgICovXG4gICAgcHJpdmF0ZSBfYWxsO1xuICAgIGdldCBhbGwoKTogVFtdO1xuICAgIHNldCBhbGwoaXRlbXM6IFRbXSk7XG4gICAgLyoqXG4gICAgICogTWFudWFsbHkgcmVjb21wdXRlIHRoZSBsaXN0IG9mIGRpc3BsYXllZCBpdGVtc1xuICAgICAqL1xuICAgIHJlZnJlc2goKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCB0ZW1wb3Jhcnkgc3RlcCwgd2hpY2ggd2UgcHJlc2VydmUgdG8gYXZvaWQgcmUtZmlsdGVyaW5nIG9yIHJlLXNvcnRpbmcgaWYgbm90IG5lY2Vzc2FyeVxuICAgICAqL1xuICAgIHByaXZhdGUgX2ZpbHRlcmVkO1xuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgaXRlbXMgY3VycmVudGx5IGRpc3BsYXllZFxuICAgICAqL1xuICAgIHByaXZhdGUgX2Rpc3BsYXllZDtcbiAgICBnZXQgZGlzcGxheWVkKCk6IFRbXTtcbiAgICAvKipcbiAgICAgKiBUaGUgT2JzZXJ2YWJsZSB0aGF0IGxldHMgb3RoZXIgY2xhc3NlcyBzdWJzY3JpYmUgdG8gaXRlbXMgY2hhbmdlc1xuICAgICAqL1xuICAgIHByaXZhdGUgX2NoYW5nZTtcbiAgICBwcml2YXRlIGVtaXRDaGFuZ2U7XG4gICAgZ2V0IGNoYW5nZSgpOiBPYnNlcnZhYmxlPFRbXT47XG4gICAgcHJpdmF0ZSBfYWxsQ2hhbmdlcztcbiAgICBwcml2YXRlIGVtaXRBbGxDaGFuZ2VzO1xuICAgIGdldCBhbGxDaGFuZ2VzKCk6IE9ic2VydmFibGU8VFtdPjtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgd2UgZG9uJ3QgaGF2ZSBkYXRhIHRvIHByb2Nlc3MgeWV0LCB0byBhYm9ydCBlYXJseSBvcGVyYXRpb25zXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXQgdW5pbml0aWFsaXplZCgpO1xuICAgIC8qKlxuICAgICAqIEZpbHRlcnNQcm92aWRlciBpdGVtcyBmcm9tIHRoZSByYXcgbGlzdFxuICAgICAqL1xuICAgIHByaXZhdGUgX2ZpbHRlckl0ZW1zO1xuICAgIC8qKlxuICAgICAqIFNvcnRzIGl0ZW1zIGluIHRoZSBmaWx0ZXJlZCBsaXN0XG4gICAgICovXG4gICAgcHJpdmF0ZSBfc29ydEl0ZW1zO1xuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSBjdXJyZW50IHBhZ2UgZnJvbSB0aGUgc29ydGVkIGxpc3RcbiAgICAgKi9cbiAgICBwcml2YXRlIF9jaGFuZ2VQYWdlO1xufVxuIl19