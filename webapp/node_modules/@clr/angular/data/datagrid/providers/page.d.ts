import { Observable } from 'rxjs';
import { StateDebouncer } from './state-debouncer.provider';
import * as ɵngcc0 from '@angular/core';
export declare class Page {
    private stateDebouncer;
    constructor(stateDebouncer: StateDebouncer);
    private preventEmit;
    activated: boolean;
    /**
     * Page size, a value of 0 means no pagination
     */
    private _size;
    get size(): number;
    set size(size: number);
    /**
     * Total items (needed to guess the last page)
     */
    private _totalItems?;
    get totalItems(): number;
    set totalItems(total: number);
    /**
     * Last page
     */
    private _last;
    get last(): number;
    set last(page: number);
    /**
     * The Observable that lets other classes subscribe to page changes
     */
    private _change;
    get change(): Observable<number>;
    private _sizeChange;
    get sizeChange(): Observable<number>;
    /**
     * Current page
     */
    private _current;
    get current(): number;
    set current(page: number);
    /**
     * Moves to the previous page if it exists
     */
    previous(): void;
    /**
     * Moves to the next page if it exists
     */
    next(): void;
    /**
     * Index of the first item displayed on the current page, starting at 0, -1 if none displayed
     */
    get firstItem(): number;
    /**
     * Index of the last item displayed on the current page, starting at 0, -1 if none displayed
     */
    get lastItem(): number;
    /**
     * Resets the page size to 0
     */
    resetPageSize(preventEmit?: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Page>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Page>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5kLnRzIiwic291cmNlcyI6WyJwYWdlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgU3RhdGVEZWJvdW5jZXIgfSBmcm9tICcuL3N0YXRlLWRlYm91bmNlci5wcm92aWRlcic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQYWdlIHtcbiAgICBwcml2YXRlIHN0YXRlRGVib3VuY2VyO1xuICAgIGNvbnN0cnVjdG9yKHN0YXRlRGVib3VuY2VyOiBTdGF0ZURlYm91bmNlcik7XG4gICAgcHJpdmF0ZSBwcmV2ZW50RW1pdDtcbiAgICBhY3RpdmF0ZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUGFnZSBzaXplLCBhIHZhbHVlIG9mIDAgbWVhbnMgbm8gcGFnaW5hdGlvblxuICAgICAqL1xuICAgIHByaXZhdGUgX3NpemU7XG4gICAgZ2V0IHNpemUoKTogbnVtYmVyO1xuICAgIHNldCBzaXplKHNpemU6IG51bWJlcik7XG4gICAgLyoqXG4gICAgICogVG90YWwgaXRlbXMgKG5lZWRlZCB0byBndWVzcyB0aGUgbGFzdCBwYWdlKVxuICAgICAqL1xuICAgIHByaXZhdGUgX3RvdGFsSXRlbXM/O1xuICAgIGdldCB0b3RhbEl0ZW1zKCk6IG51bWJlcjtcbiAgICBzZXQgdG90YWxJdGVtcyh0b3RhbDogbnVtYmVyKTtcbiAgICAvKipcbiAgICAgKiBMYXN0IHBhZ2VcbiAgICAgKi9cbiAgICBwcml2YXRlIF9sYXN0O1xuICAgIGdldCBsYXN0KCk6IG51bWJlcjtcbiAgICBzZXQgbGFzdChwYWdlOiBudW1iZXIpO1xuICAgIC8qKlxuICAgICAqIFRoZSBPYnNlcnZhYmxlIHRoYXQgbGV0cyBvdGhlciBjbGFzc2VzIHN1YnNjcmliZSB0byBwYWdlIGNoYW5nZXNcbiAgICAgKi9cbiAgICBwcml2YXRlIF9jaGFuZ2U7XG4gICAgZ2V0IGNoYW5nZSgpOiBPYnNlcnZhYmxlPG51bWJlcj47XG4gICAgcHJpdmF0ZSBfc2l6ZUNoYW5nZTtcbiAgICBnZXQgc2l6ZUNoYW5nZSgpOiBPYnNlcnZhYmxlPG51bWJlcj47XG4gICAgLyoqXG4gICAgICogQ3VycmVudCBwYWdlXG4gICAgICovXG4gICAgcHJpdmF0ZSBfY3VycmVudDtcbiAgICBnZXQgY3VycmVudCgpOiBudW1iZXI7XG4gICAgc2V0IGN1cnJlbnQocGFnZTogbnVtYmVyKTtcbiAgICAvKipcbiAgICAgKiBNb3ZlcyB0byB0aGUgcHJldmlvdXMgcGFnZSBpZiBpdCBleGlzdHNcbiAgICAgKi9cbiAgICBwcmV2aW91cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE1vdmVzIHRvIHRoZSBuZXh0IHBhZ2UgaWYgaXQgZXhpc3RzXG4gICAgICovXG4gICAgbmV4dCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEluZGV4IG9mIHRoZSBmaXJzdCBpdGVtIGRpc3BsYXllZCBvbiB0aGUgY3VycmVudCBwYWdlLCBzdGFydGluZyBhdCAwLCAtMSBpZiBub25lIGRpc3BsYXllZFxuICAgICAqL1xuICAgIGdldCBmaXJzdEl0ZW0oKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEluZGV4IG9mIHRoZSBsYXN0IGl0ZW0gZGlzcGxheWVkIG9uIHRoZSBjdXJyZW50IHBhZ2UsIHN0YXJ0aW5nIGF0IDAsIC0xIGlmIG5vbmUgZGlzcGxheWVkXG4gICAgICovXG4gICAgZ2V0IGxhc3RJdGVtKCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIHBhZ2Ugc2l6ZSB0byAwXG4gICAgICovXG4gICAgcmVzZXRQYWdlU2l6ZShwcmV2ZW50RW1pdD86IGJvb2xlYW4pOiB2b2lkO1xufVxuIl19