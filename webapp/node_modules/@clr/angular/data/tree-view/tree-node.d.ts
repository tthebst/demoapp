import { EventEmitter, Injector, OnDestroy, OnInit } from '@angular/core';
import { IfExpandService } from '../../utils/conditional/if-expanded.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrSelectedState } from './models/selected-state.enum';
import { TreeNodeModel } from './models/tree-node.model';
import { TreeFeaturesService } from './tree-features.service';
import { TreeFocusManagerService } from './tree-focus-manager.service';
import { ClrTreeNodeLink } from './tree-node-link';
import * as ɵngcc0 from '@angular/core';
export declare class ClrTreeNode<T> implements OnInit, OnDestroy {
    nodeId: string;
    private platformId;
    featuresService: TreeFeaturesService<T>;
    expandService: IfExpandService;
    commonStrings: ClrCommonStringsService;
    private focusManager;
    STATES: typeof ClrSelectedState;
    private skipEmitChange;
    constructor(nodeId: string, platformId: Object, parent: ClrTreeNode<T>, featuresService: TreeFeaturesService<T>, expandService: IfExpandService, commonStrings: ClrCommonStringsService, focusManager: TreeFocusManagerService<T>, injector: Injector);
    _model: TreeNodeModel<T>;
    isExpandable(): boolean;
    get selected(): ClrSelectedState | boolean;
    set selected(value: ClrSelectedState | boolean);
    selectedChange: EventEmitter<ClrSelectedState>;
    get ariaSelected(): boolean;
    expandable: boolean | undefined;
    get expanded(): boolean;
    set expanded(value: boolean);
    expandedChange: EventEmitter<boolean>;
    private subscriptions;
    contentContainerTabindex: number;
    private contentContainer;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private treeNodeLinkList;
    get treeNodeLink(): ClrTreeNodeLink;
    private setTabIndex;
    private checkTabIndex;
    focusTreeNode(): void;
    broadcastFocusOnContainer(): void;
    onKeyDown(event: KeyboardEvent): void;
    private expandOrFocusFirstChild;
    private collapseOrFocusParent;
    private triggerDefaultAction;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrTreeNode<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrTreeNode<any>, "clr-tree-node", never, {
    "selected": "clrSelected";
    "expanded": "clrExpanded";
    "expandable": "clrExpandable";
}, {
    "selectedChange": "clrSelectedChange";
    "expandedChange": "clrExpandedChange";
}, ["treeNodeLinkList"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLmQudHMiLCJzb3VyY2VzIjpbInRyZWUtbm9kZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEluamVjdG9yLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWZFeHBhbmRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29uZGl0aW9uYWwvaWYtZXhwYW5kZWQuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZSc7XG5pbXBvcnQgeyBDbHJTZWxlY3RlZFN0YXRlIH0gZnJvbSAnLi9tb2RlbHMvc2VsZWN0ZWQtc3RhdGUuZW51bSc7XG5pbXBvcnQgeyBUcmVlTm9kZU1vZGVsIH0gZnJvbSAnLi9tb2RlbHMvdHJlZS1ub2RlLm1vZGVsJztcbmltcG9ydCB7IFRyZWVGZWF0dXJlc1NlcnZpY2UgfSBmcm9tICcuL3RyZWUtZmVhdHVyZXMuc2VydmljZSc7XG5pbXBvcnQgeyBUcmVlRm9jdXNNYW5hZ2VyU2VydmljZSB9IGZyb20gJy4vdHJlZS1mb2N1cy1tYW5hZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyVHJlZU5vZGVMaW5rIH0gZnJvbSAnLi90cmVlLW5vZGUtbGluayc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJUcmVlTm9kZTxUPiBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBub2RlSWQ6IHN0cmluZztcbiAgICBwcml2YXRlIHBsYXRmb3JtSWQ7XG4gICAgZmVhdHVyZXNTZXJ2aWNlOiBUcmVlRmVhdHVyZXNTZXJ2aWNlPFQ+O1xuICAgIGV4cGFuZFNlcnZpY2U6IElmRXhwYW5kU2VydmljZTtcbiAgICBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZTtcbiAgICBwcml2YXRlIGZvY3VzTWFuYWdlcjtcbiAgICBTVEFURVM6IHR5cGVvZiBDbHJTZWxlY3RlZFN0YXRlO1xuICAgIHByaXZhdGUgc2tpcEVtaXRDaGFuZ2U7XG4gICAgY29uc3RydWN0b3Iobm9kZUlkOiBzdHJpbmcsIHBsYXRmb3JtSWQ6IE9iamVjdCwgcGFyZW50OiBDbHJUcmVlTm9kZTxUPiwgZmVhdHVyZXNTZXJ2aWNlOiBUcmVlRmVhdHVyZXNTZXJ2aWNlPFQ+LCBleHBhbmRTZXJ2aWNlOiBJZkV4cGFuZFNlcnZpY2UsIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlLCBmb2N1c01hbmFnZXI6IFRyZWVGb2N1c01hbmFnZXJTZXJ2aWNlPFQ+LCBpbmplY3RvcjogSW5qZWN0b3IpO1xuICAgIF9tb2RlbDogVHJlZU5vZGVNb2RlbDxUPjtcbiAgICBpc0V4cGFuZGFibGUoKTogYm9vbGVhbjtcbiAgICBnZXQgc2VsZWN0ZWQoKTogQ2xyU2VsZWN0ZWRTdGF0ZSB8IGJvb2xlYW47XG4gICAgc2V0IHNlbGVjdGVkKHZhbHVlOiBDbHJTZWxlY3RlZFN0YXRlIHwgYm9vbGVhbik7XG4gICAgc2VsZWN0ZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxDbHJTZWxlY3RlZFN0YXRlPjtcbiAgICBnZXQgYXJpYVNlbGVjdGVkKCk6IGJvb2xlYW47XG4gICAgZXhwYW5kYWJsZTogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgICBnZXQgZXhwYW5kZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgZXhwYW5kZWQodmFsdWU6IGJvb2xlYW4pO1xuICAgIGV4cGFuZGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIGNvbnRlbnRDb250YWluZXJUYWJpbmRleDogbnVtYmVyO1xuICAgIHByaXZhdGUgY29udGVudENvbnRhaW5lcjtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB0cmVlTm9kZUxpbmtMaXN0O1xuICAgIGdldCB0cmVlTm9kZUxpbmsoKTogQ2xyVHJlZU5vZGVMaW5rO1xuICAgIHByaXZhdGUgc2V0VGFiSW5kZXg7XG4gICAgcHJpdmF0ZSBjaGVja1RhYkluZGV4O1xuICAgIGZvY3VzVHJlZU5vZGUoKTogdm9pZDtcbiAgICBicm9hZGNhc3RGb2N1c09uQ29udGFpbmVyKCk6IHZvaWQ7XG4gICAgb25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBwcml2YXRlIGV4cGFuZE9yRm9jdXNGaXJzdENoaWxkO1xuICAgIHByaXZhdGUgY29sbGFwc2VPckZvY3VzUGFyZW50O1xuICAgIHByaXZhdGUgdHJpZ2dlckRlZmF1bHRBY3Rpb247XG59XG4iXX0=