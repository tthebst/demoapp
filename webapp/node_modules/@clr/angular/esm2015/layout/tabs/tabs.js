import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChildren, Inject, Input, HostBinding, ViewContainerRef, ViewChild, PLATFORM_ID, } from '@angular/core';
import { IfActiveService } from '../../utils/conditional/if-active.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { TabsService } from './providers/tabs.service';
import { ClrTab } from './tab';
import { TABS_ID, TABS_ID_PROVIDER } from './tabs-id.provider';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { TabsLayout } from './enums/tabs-layout.enum';
import { ClrKeyFocus } from '../../utils/focus/key-focus/key-focus';
import { startWith, filter } from 'rxjs/operators';
import { isPlatformBrowser } from '@angular/common';
let ClrTabs = class ClrTabs {
    constructor(ifActiveService, toggleService, tabsService, tabsId, commonStrings, platformId) {
        this.ifActiveService = ifActiveService;
        this.toggleService = toggleService;
        this.tabsService = tabsService;
        this.tabsId = tabsId;
        this.commonStrings = commonStrings;
        this.platformId = platformId;
        this.subscriptions = [];
        this._tabLinkDirectives = [];
        this.tabLinkElements = [];
        this.skipFocusCheck = false;
    }
    get overflowPosition() {
        return this._tabLinkDirectives.filter(link => !link.inOverflow).length;
    }
    /* tslint:disable:no-unused-variable */
    set tabContentViewContainer(value) {
        this.tabsService.tabContentViewContainer = value;
    }
    /* tslint:enable:no-unused-variable */
    set layout(layout) {
        if (Object.keys(TabsLayout)
            .map(key => {
            return TabsLayout[key];
        })
            .indexOf(layout) >= 0) {
            this.tabsService.layout = layout;
        }
    }
    get layout() {
        return this.tabsService.layout;
    }
    get tabLinkDirectives() {
        return this._tabLinkDirectives;
    }
    get activeTabInOverflow() {
        return this.tabsService.overflowTabs.indexOf(this.tabsService.activeTab) > -1;
    }
    get tabIds() {
        return this.tabsService.children.map(tab => tab.tabLink.tabLinkId).join(' ');
    }
    ngAfterContentInit() {
        this.subscriptions.push(this.listenForTabLinkChanges(), this.listenForOverflowMenuFocusChanges());
        if (typeof this.ifActiveService.current === 'undefined' && this.tabLinkDirectives[0]) {
            this.tabLinkDirectives[0].activate();
        }
    }
    toggleOverflow(event) {
        this.skipFocusCheck = true;
        this.toggleService.toggleWithEvent(event);
    }
    checkFocusVisible() {
        if (this.skipFocusCheck) {
            this.skipFocusCheck = false;
            return;
        }
        if (!this.toggleService.open && this.inOverflow()) {
            this.toggleService.open = true;
        }
        else if (this.toggleService.open && !this.inOverflow()) {
            this.toggleService.open = false;
        }
    }
    inOverflow() {
        return (this.tabLinkElements.indexOf(document.activeElement) > -1 &&
            this.keyFocus.current >= this.overflowPosition);
    }
    get isVertical() {
        return this.layout === TabsLayout.VERTICAL;
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => {
            sub.unsubscribe();
        });
    }
    listenForTabLinkChanges() {
        return this.tabs.changes.pipe(startWith(this.tabs.map(tab => tab.tabLink))).subscribe(() => {
            this._tabLinkDirectives = this.tabs.map(tab => tab.tabLink);
            this.tabLinkElements = this._tabLinkDirectives.map(tab => tab.el.nativeElement);
        });
    }
    listenForOverflowMenuFocusChanges() {
        return this.toggleService.openChange.pipe(filter(() => isPlatformBrowser(this.platformId))).subscribe(open => {
            if (open && !this.inOverflow()) {
                this.focusToFirstItemInOverflow();
            }
            else if (!open && this.nextFocusedItemIsNotInOverflow()) {
                this.keyFocus.resetTabFocus();
            }
        });
    }
    focusToFirstItemInOverflow() {
        this.keyFocus.moveTo(this.overflowPosition);
    }
    nextFocusedItemIsNotInOverflow() {
        return this.tabLinkElements.find(e => e === document.activeElement) === undefined;
    }
};
ClrTabs.ctorParameters = () => [
    { type: IfActiveService },
    { type: ClrPopoverToggleService },
    { type: TabsService },
    { type: Number, decorators: [{ type: Inject, args: [TABS_ID,] }] },
    { type: ClrCommonStringsService },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    ViewChild('tabContentViewContainer', { static: true, read: ViewContainerRef })
], ClrTabs.prototype, "tabContentViewContainer", null);
__decorate([
    Input('clrLayout')
], ClrTabs.prototype, "layout", null);
__decorate([
    ContentChildren(ClrTab)
], ClrTabs.prototype, "tabs", void 0);
__decorate([
    ViewChild(ClrKeyFocus, { static: true })
], ClrTabs.prototype, "keyFocus", void 0);
__decorate([
    HostBinding('class.tabs-vertical')
], ClrTabs.prototype, "isVertical", null);
ClrTabs = __decorate([
    Component({
        selector: 'clr-tabs',
        template: `
        <ul class="nav" role="tablist" [attr.aria-owns]="tabIds" [clrKeyFocus]="tabLinkElements" clrDirection="both"
            (clrFocusChange)="checkFocusVisible()">
            <!--tab links-->
            <ng-container *ngFor="let link of tabLinkDirectives">
                <ng-container *ngIf="link.tabsId === tabsId && !link.inOverflow">
                    <li role="presentation" class="nav-item">
                        <ng-container [ngTemplateOutlet]="link.templateRefContainer.template"></ng-container>
                    </li>
                </ng-container>
            </ng-container>
            <ng-container *ngIf="tabsService.overflowTabs.length > 0">
                <div class="tabs-overflow bottom-right" [class.open]="toggleService.open" role="presentation">
                    <li role="application" class="nav-item" (click)="toggleOverflow($event)">
                        <button class="btn btn-link nav-link dropdown-toggle" type="button" aria-hidden="true"
                                [class.active]="activeTabInOverflow" [class.open]="inOverflow()" tabIndex="-1">
                            <clr-icon shape="ellipsis-horizontal"
                              [class.is-info]="toggleService.open"
                              [attr.title]="commonStrings.keys.more"></clr-icon>
                        </button>
                    </li>
                    <!--tab links in overflow menu-->
                    <clr-tab-overflow-content>
                        <ng-container *ngFor="let link of tabLinkDirectives">
                            <ng-container *ngIf="link.tabsId === tabsId && link.inOverflow"
                                          [ngTemplateOutlet]="link.templateRefContainer.template">
                            </ng-container>
                        </ng-container>
                    </clr-tab-overflow-content>
                </div>
            </ng-container>
        </ul>
        <ng-container #tabContentViewContainer></ng-container>
    `,
        providers: [IfActiveService, ClrPopoverToggleService, TabsService, TABS_ID_PROVIDER]
    }),
    __param(3, Inject(TABS_ID)),
    __param(5, Inject(PLATFORM_ID))
], ClrTabs);
export { ClrTabs };
//# sourceMappingURL=data:application/json;base64,