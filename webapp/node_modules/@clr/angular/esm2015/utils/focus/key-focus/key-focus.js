/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { EventEmitter, HostListener, Input, Output, Component, ContentChildren } from '@angular/core';
import { ClrKeyFocusItem } from './key-focus-item';
import { ClrFocusDirection } from './enums/focus-direction.enum';
import { KeyCodes } from '@clr/core/common';
import { preventArrowKeyScroll, getKeyCodes } from './util';
let ClrKeyFocus = class ClrKeyFocus {
    constructor() {
        this.direction = ClrFocusDirection.VERTICAL;
        this.focusOnLoad = false;
        this.focusChange = new EventEmitter();
        this._current = 0;
        this.subscriptions = [];
    }
    set focusableItems(elements) {
        // We accept a list of focusable elements (HTMLElements or existing Directives) or auto query for clrKeyFocusItem
        // We accept a list reference in the cases where we cannot use ContentChildren to query
        // ContentChildren can be unavailable if content is projected outside the scope of the component (see tabs).
        if (elements && elements.length) {
            this._focusableItems = elements;
            this.initializeFocus();
        }
    }
    get focusableItems() {
        if (this._focusableItems) {
            return this._focusableItems;
        }
        else {
            return this.clrKeyFocusItems.toArray();
        }
    }
    get current() {
        return this._current;
    }
    ngAfterContentInit() {
        this.subscriptions.push(this.listenForItemUpdates());
        this.initializeFocus();
    }
    ngOnDestroy() {
        this.subscriptions.forEach(s => s.unsubscribe());
    }
    handleKeyboardEvent(event) {
        if (this.prevKeyPressed(event) && this.currentFocusIsNotFirstItem()) {
            this.keyAction(() => this._current--);
        }
        else if (this.nextKeyPressed(event) && this.currentFocusIsNotLastItem()) {
            this.keyAction(() => this._current++);
        }
        else if (event.code === KeyCodes.Home) {
            this.keyAction(() => (this._current = 0));
        }
        else if (event.code === KeyCodes.End) {
            this.keyAction(() => (this._current = this.focusableItems.length - 1));
        }
        preventArrowKeyScroll(event);
    }
    setClickedItemCurrent(event) {
        let position;
        if (this.focusableItems[0].nativeElement) {
            position = this.focusableItems.map(item => item.nativeElement).indexOf(event.target);
        }
        else {
            position = this.focusableItems.indexOf(event.target);
        }
        if (position > -1) {
            this._current = position;
        }
    }
    resetTabFocus() {
        this.currentItem.tabIndex = -1;
        this._current = 0;
        this.currentItem.tabIndex = 0;
    }
    moveTo(position) {
        if (this.positionInRange(position) && position !== this._current) {
            this.keyAction(() => (this._current = position));
        }
    }
    positionInRange(position) {
        return position >= 0 && position < this.focusableItems.length;
    }
    get currentItem() {
        return this.focusableItems[this._current];
    }
    currentFocusIsNotFirstItem() {
        return this._current - 1 >= 0;
    }
    currentFocusIsNotLastItem() {
        return this._current + 1 < this.focusableItems.length;
    }
    initializeFocus() {
        if (this.focusableItems && this.focusableItems.length) {
            this.focusableItems.forEach(i => (i.tabIndex = -1));
            // It is possible that the focus was on an element, whose index is no longer available.
            // This can happen when some of the focusable elements are being removed.
            // In such cases, the new focus is initialized on the last focusable element.
            if (this._current >= this.focusableItems.length) {
                this._current = this.focusableItems.length - 1;
            }
            this.currentItem.tabIndex = 0;
            if (this.focusOnLoad) {
                this.currentItem.focus();
                this.focusChange.next();
            }
        }
    }
    listenForItemUpdates() {
        return this.clrKeyFocusItems.changes.subscribe(() => {
            this.initializeFocus();
        });
    }
    keyAction(action) {
        this.currentItem.tabIndex = -1;
        action.call(this);
        this.currentItem.tabIndex = 0;
        this.currentItem.focus();
        this.focusChange.next();
    }
    nextKeyPressed(event) {
        const keyCodes = getKeyCodes(event);
        switch (this.direction) {
            case ClrFocusDirection.VERTICAL:
                return event.key === keyCodes.ArrowDown;
            case ClrFocusDirection.HORIZONTAL:
                return event.key === keyCodes.ArrowRight;
            case ClrFocusDirection.BOTH:
                return event.key === keyCodes.ArrowDown || event.key === keyCodes.ArrowRight;
            default:
                return false;
        }
    }
    prevKeyPressed(event) {
        const keyCodes = getKeyCodes(event);
        switch (this.direction) {
            case ClrFocusDirection.VERTICAL:
                return event.key === keyCodes.ArrowUp;
            case ClrFocusDirection.HORIZONTAL:
                return event.key === keyCodes.ArrowLeft;
            case ClrFocusDirection.BOTH:
                return event.key === keyCodes.ArrowUp || event.key === keyCodes.ArrowLeft;
            default:
                return false;
        }
    }
};
__decorate([
    Input('clrDirection')
], ClrKeyFocus.prototype, "direction", void 0);
__decorate([
    Input('clrFocusOnLoad')
], ClrKeyFocus.prototype, "focusOnLoad", void 0);
__decorate([
    Output('clrFocusChange')
], ClrKeyFocus.prototype, "focusChange", void 0);
__decorate([
    ContentChildren(ClrKeyFocusItem, { descendants: true })
], ClrKeyFocus.prototype, "clrKeyFocusItems", void 0);
__decorate([
    Input('clrKeyFocus')
], ClrKeyFocus.prototype, "focusableItems", null);
__decorate([
    HostListener('keydown', ['$event'])
], ClrKeyFocus.prototype, "handleKeyboardEvent", null);
__decorate([
    HostListener('click', ['$event'])
], ClrKeyFocus.prototype, "setClickedItemCurrent", null);
ClrKeyFocus = __decorate([
    Component({
        selector: '[clrKeyFocus]',
        template: '<ng-content></ng-content>'
    })
], ClrKeyFocus);
export { ClrKeyFocus };
//# sourceMappingURL=data:application/json;base64,