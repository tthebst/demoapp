import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChildren, Inject, Input, HostBinding, ViewContainerRef, ViewChild, PLATFORM_ID, } from '@angular/core';
import { IfActiveService } from '../../utils/conditional/if-active.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { TabsService } from './providers/tabs.service';
import { ClrTab } from './tab';
import { TABS_ID, TABS_ID_PROVIDER } from './tabs-id.provider';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { TabsLayout } from './enums/tabs-layout.enum';
import { ClrKeyFocus } from '../../utils/focus/key-focus/key-focus';
import { startWith, filter } from 'rxjs/operators';
import { isPlatformBrowser } from '@angular/common';
var ClrTabs = /** @class */ (function () {
    function ClrTabs(ifActiveService, toggleService, tabsService, tabsId, commonStrings, platformId) {
        this.ifActiveService = ifActiveService;
        this.toggleService = toggleService;
        this.tabsService = tabsService;
        this.tabsId = tabsId;
        this.commonStrings = commonStrings;
        this.platformId = platformId;
        this.subscriptions = [];
        this._tabLinkDirectives = [];
        this.tabLinkElements = [];
        this.skipFocusCheck = false;
    }
    Object.defineProperty(ClrTabs.prototype, "overflowPosition", {
        get: function () {
            return this._tabLinkDirectives.filter(function (link) { return !link.inOverflow; }).length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabs.prototype, "tabContentViewContainer", {
        /* tslint:disable:no-unused-variable */
        set: function (value) {
            this.tabsService.tabContentViewContainer = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabs.prototype, "layout", {
        get: function () {
            return this.tabsService.layout;
        },
        /* tslint:enable:no-unused-variable */
        set: function (layout) {
            if (Object.keys(TabsLayout)
                .map(function (key) {
                return TabsLayout[key];
            })
                .indexOf(layout) >= 0) {
                this.tabsService.layout = layout;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabs.prototype, "tabLinkDirectives", {
        get: function () {
            return this._tabLinkDirectives;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabs.prototype, "activeTabInOverflow", {
        get: function () {
            return this.tabsService.overflowTabs.indexOf(this.tabsService.activeTab) > -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTabs.prototype, "tabIds", {
        get: function () {
            return this.tabsService.children.map(function (tab) { return tab.tabLink.tabLinkId; }).join(' ');
        },
        enumerable: true,
        configurable: true
    });
    ClrTabs.prototype.ngAfterContentInit = function () {
        this.subscriptions.push(this.listenForTabLinkChanges(), this.listenForOverflowMenuFocusChanges());
        if (typeof this.ifActiveService.current === 'undefined' && this.tabLinkDirectives[0]) {
            this.tabLinkDirectives[0].activate();
        }
    };
    ClrTabs.prototype.toggleOverflow = function (event) {
        this.skipFocusCheck = true;
        this.toggleService.toggleWithEvent(event);
    };
    ClrTabs.prototype.checkFocusVisible = function () {
        if (this.skipFocusCheck) {
            this.skipFocusCheck = false;
            return;
        }
        if (!this.toggleService.open && this.inOverflow()) {
            this.toggleService.open = true;
        }
        else if (this.toggleService.open && !this.inOverflow()) {
            this.toggleService.open = false;
        }
    };
    ClrTabs.prototype.inOverflow = function () {
        return (this.tabLinkElements.indexOf(document.activeElement) > -1 &&
            this.keyFocus.current >= this.overflowPosition);
    };
    Object.defineProperty(ClrTabs.prototype, "isVertical", {
        get: function () {
            return this.layout === TabsLayout.VERTICAL;
        },
        enumerable: true,
        configurable: true
    });
    ClrTabs.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) {
            sub.unsubscribe();
        });
    };
    ClrTabs.prototype.listenForTabLinkChanges = function () {
        var _this = this;
        return this.tabs.changes.pipe(startWith(this.tabs.map(function (tab) { return tab.tabLink; }))).subscribe(function () {
            _this._tabLinkDirectives = _this.tabs.map(function (tab) { return tab.tabLink; });
            _this.tabLinkElements = _this._tabLinkDirectives.map(function (tab) { return tab.el.nativeElement; });
        });
    };
    ClrTabs.prototype.listenForOverflowMenuFocusChanges = function () {
        var _this = this;
        return this.toggleService.openChange.pipe(filter(function () { return isPlatformBrowser(_this.platformId); })).subscribe(function (open) {
            if (open && !_this.inOverflow()) {
                _this.focusToFirstItemInOverflow();
            }
            else if (!open && _this.nextFocusedItemIsNotInOverflow()) {
                _this.keyFocus.resetTabFocus();
            }
        });
    };
    ClrTabs.prototype.focusToFirstItemInOverflow = function () {
        this.keyFocus.moveTo(this.overflowPosition);
    };
    ClrTabs.prototype.nextFocusedItemIsNotInOverflow = function () {
        return this.tabLinkElements.find(function (e) { return e === document.activeElement; }) === undefined;
    };
    ClrTabs.ctorParameters = function () { return [
        { type: IfActiveService },
        { type: ClrPopoverToggleService },
        { type: TabsService },
        { type: Number, decorators: [{ type: Inject, args: [TABS_ID,] }] },
        { type: ClrCommonStringsService },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    __decorate([
        ViewChild('tabContentViewContainer', { static: true, read: ViewContainerRef })
    ], ClrTabs.prototype, "tabContentViewContainer", null);
    __decorate([
        Input('clrLayout')
    ], ClrTabs.prototype, "layout", null);
    __decorate([
        ContentChildren(ClrTab)
    ], ClrTabs.prototype, "tabs", void 0);
    __decorate([
        ViewChild(ClrKeyFocus, { static: true })
    ], ClrTabs.prototype, "keyFocus", void 0);
    __decorate([
        HostBinding('class.tabs-vertical')
    ], ClrTabs.prototype, "isVertical", null);
    ClrTabs = __decorate([
        Component({
            selector: 'clr-tabs',
            template: "\n        <ul class=\"nav\" role=\"tablist\" [attr.aria-owns]=\"tabIds\" [clrKeyFocus]=\"tabLinkElements\" clrDirection=\"both\"\n            (clrFocusChange)=\"checkFocusVisible()\">\n            <!--tab links-->\n            <ng-container *ngFor=\"let link of tabLinkDirectives\">\n                <ng-container *ngIf=\"link.tabsId === tabsId && !link.inOverflow\">\n                    <li role=\"presentation\" class=\"nav-item\">\n                        <ng-container [ngTemplateOutlet]=\"link.templateRefContainer.template\"></ng-container>\n                    </li>\n                </ng-container>\n            </ng-container>\n            <ng-container *ngIf=\"tabsService.overflowTabs.length > 0\">\n                <div class=\"tabs-overflow bottom-right\" [class.open]=\"toggleService.open\" role=\"presentation\">\n                    <li role=\"application\" class=\"nav-item\" (click)=\"toggleOverflow($event)\">\n                        <button class=\"btn btn-link nav-link dropdown-toggle\" type=\"button\" aria-hidden=\"true\"\n                                [class.active]=\"activeTabInOverflow\" [class.open]=\"inOverflow()\" tabIndex=\"-1\">\n                            <clr-icon shape=\"ellipsis-horizontal\"\n                              [class.is-info]=\"toggleService.open\"\n                              [attr.title]=\"commonStrings.keys.more\"></clr-icon>\n                        </button>\n                    </li>\n                    <!--tab links in overflow menu-->\n                    <clr-tab-overflow-content>\n                        <ng-container *ngFor=\"let link of tabLinkDirectives\">\n                            <ng-container *ngIf=\"link.tabsId === tabsId && link.inOverflow\"\n                                          [ngTemplateOutlet]=\"link.templateRefContainer.template\">\n                            </ng-container>\n                        </ng-container>\n                    </clr-tab-overflow-content>\n                </div>\n            </ng-container>\n        </ul>\n        <ng-container #tabContentViewContainer></ng-container>\n    ",
            providers: [IfActiveService, ClrPopoverToggleService, TabsService, TABS_ID_PROVIDER]
        }),
        __param(3, Inject(TABS_ID)),
        __param(5, Inject(PLATFORM_ID))
    ], ClrTabs);
    return ClrTabs;
}());
export { ClrTabs };
//# sourceMappingURL=data:application/json;base64,