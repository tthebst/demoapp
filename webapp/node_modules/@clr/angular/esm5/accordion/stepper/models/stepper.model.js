/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __extends } from "tslib";
import { AccordionModel } from '../../models/accordion.model';
import { AccordionStatus } from '../../enums/accordion-status.enum';
var StepperModel = /** @class */ (function (_super) {
    __extends(StepperModel, _super);
    function StepperModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(StepperModel.prototype, "allPanelsCompleted", {
        get: function () {
            return this.panels.length && this.getNumberOfIncompletePanels() === 0 && this.getNumberOfOpenPanels() === 0;
        },
        enumerable: true,
        configurable: true
    });
    StepperModel.prototype.addPanel = function (id, open) {
        if (open === void 0) { open = false; }
        _super.prototype.addPanel.call(this, id, open);
        this._panels[id].disabled = true;
    };
    StepperModel.prototype.updatePanelOrder = function (ids) {
        _super.prototype.updatePanelOrder.call(this, ids);
        this.openFirstPanel();
    };
    StepperModel.prototype.togglePanel = function (panelId) {
        if (this._panels[panelId].status === AccordionStatus.Complete) {
            this._panels[panelId].open = !this._panels[panelId].open;
        }
    };
    StepperModel.prototype.navigateToNextPanel = function (currentPanelId, currentPanelValid) {
        if (currentPanelValid === void 0) { currentPanelValid = true; }
        if (currentPanelValid) {
            this.completePanel(currentPanelId);
            this.openNextPanel(this._panels[currentPanelId].id);
        }
        else {
            this.setPanelError(currentPanelId);
        }
    };
    StepperModel.prototype.overrideInitialPanel = function (panelId) {
        var _this = this;
        this.panels.filter(function () { return _this._panels[panelId] !== undefined; }).forEach(function (panel) {
            if (panel.index < _this._panels[panelId].index) {
                _this.completePanel(panel.id);
            }
            else if (panel.id === panelId) {
                _this._panels[panel.id].open = true;
            }
            else {
                _this._panels[panel.id].open = false;
            }
        });
    };
    StepperModel.prototype.setPanelsWithErrors = function (ids) {
        var _this = this;
        ids.forEach(function (id) { return _this.setPanelError(id); });
    };
    StepperModel.prototype.resetPanels = function () {
        var _this = this;
        this.panels.forEach(function (p) { return _this.resetPanel(p.id); });
        this.openFirstPanel();
    };
    StepperModel.prototype.getNextPanel = function (currentPanelId) {
        var _this = this;
        return this.panels.find(function (s) { return s.index === _this._panels[currentPanelId].index + 1; });
    };
    StepperModel.prototype.resetAllFuturePanels = function (panelId) {
        var _this = this;
        this.panels.filter(function (panel) { return panel.index >= _this._panels[panelId].index; }).forEach(function (panel) { return _this.resetPanel(panel.id); });
    };
    StepperModel.prototype.resetPanel = function (panelId) {
        this._panels[panelId].status = AccordionStatus.Inactive;
        this._panels[panelId].open = false;
        this._panels[panelId].disabled = true;
    };
    StepperModel.prototype.openFirstPanel = function () {
        var firstPanel = this.getFirstPanel();
        this._panels[firstPanel.id].open = true;
        this._panels[firstPanel.id].disabled = true;
    };
    StepperModel.prototype.completePanel = function (panelId) {
        this._panels[panelId].status = AccordionStatus.Complete;
        this._panels[panelId].disabled = false;
        this._panels[panelId].open = false;
    };
    StepperModel.prototype.openNextPanel = function (currentPanelId) {
        var nextPanel = this.getNextPanel(currentPanelId);
        if (nextPanel) {
            this.resetAllFuturePanels(nextPanel.id);
            this._panels[nextPanel.id].open = true;
            this._panels[nextPanel.id].disabled = true;
        }
    };
    StepperModel.prototype.setPanelError = function (panelId) {
        this.resetAllFuturePanels(panelId);
        this._panels[panelId].open = true;
        this._panels[panelId].status = AccordionStatus.Error;
    };
    StepperModel.prototype.getFirstPanel = function () {
        return this.panels.find(function (panel) { return panel.index === 0; });
    };
    StepperModel.prototype.getNumberOfIncompletePanels = function () {
        return this.panels.reduce(function (prev, next) { return (next.status !== AccordionStatus.Complete ? prev + 1 : prev); }, 0);
    };
    StepperModel.prototype.getNumberOfOpenPanels = function () {
        return this.panels.reduce(function (prev, next) { return (next.open !== false ? prev + 1 : prev); }, 0);
    };
    return StepperModel;
}(AccordionModel));
export { StepperModel };
//# sourceMappingURL=data:application/json;base64,