import { EventEmitter, SimpleChanges, OnInit, OnChanges, QueryList } from '@angular/core';
import { Observable } from 'rxjs';
import { ClrCommonStringsService } from '../utils/i18n/common-strings.service';
import { AccordionService } from './providers/accordion.service';
import { AccordionStatus } from './enums/accordion-status.enum';
import { IfExpandService } from '../utils/conditional/if-expanded.service';
import { AccordionPanelModel } from './models/accordion.model';
import { ClrAccordionDescription } from './accordion-description';
import * as ɵngcc0 from '@angular/core';
export declare class ClrAccordionPanel implements OnInit, OnChanges {
    commonStrings: ClrCommonStringsService;
    private accordionService;
    private ifExpandService;
    id: string;
    disabled: boolean;
    panelOpen: boolean;
    panelOpenChange: EventEmitter<boolean>;
    accordionDescription: QueryList<ClrAccordionDescription>;
    panel: Observable<AccordionPanelModel>;
    readonly AccordionStatus: typeof AccordionStatus;
    isAccordion: boolean;
    constructor(commonStrings: ClrCommonStringsService, accordionService: AccordionService, ifExpandService: IfExpandService, id: string);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    togglePanel(): void;
    collapsePanelOnAnimationDone(panel: AccordionPanelModel): void;
    getPanelStateClasses(panel: AccordionPanelModel): string;
    getAccordionContentId(id: string): string;
    getAccordionHeaderId(id: string): string;
    private emitPanelChange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrAccordionPanel>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrAccordionPanel, "clr-accordion-panel", never, {
    "disabled": "clrAccordionPanelDisabled";
    "panelOpen": "clrAccordionPanelOpen";
}, {
    "panelOpenChange": "clrAccordionPanelOpenChange";
}, ["accordionDescription"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLXBhbmVsLmQudHMiLCJzb3VyY2VzIjpbImFjY29yZGlvbi1wYW5lbC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgU2ltcGxlQ2hhbmdlcywgT25Jbml0LCBPbkNoYW5nZXMsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWNjb3JkaW9uU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2FjY29yZGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEFjY29yZGlvblN0YXR1cyB9IGZyb20gJy4vZW51bXMvYWNjb3JkaW9uLXN0YXR1cy5lbnVtJztcbmltcG9ydCB7IElmRXhwYW5kU2VydmljZSB9IGZyb20gJy4uL3V0aWxzL2NvbmRpdGlvbmFsL2lmLWV4cGFuZGVkLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWNjb3JkaW9uUGFuZWxNb2RlbCB9IGZyb20gJy4vbW9kZWxzL2FjY29yZGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBDbHJBY2NvcmRpb25EZXNjcmlwdGlvbiB9IGZyb20gJy4vYWNjb3JkaW9uLWRlc2NyaXB0aW9uJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENsckFjY29yZGlvblBhbmVsIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICAgIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlO1xuICAgIHByaXZhdGUgYWNjb3JkaW9uU2VydmljZTtcbiAgICBwcml2YXRlIGlmRXhwYW5kU2VydmljZTtcbiAgICBpZDogc3RyaW5nO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIHBhbmVsT3BlbjogYm9vbGVhbjtcbiAgICBwYW5lbE9wZW5DaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICBhY2NvcmRpb25EZXNjcmlwdGlvbjogUXVlcnlMaXN0PENsckFjY29yZGlvbkRlc2NyaXB0aW9uPjtcbiAgICBwYW5lbDogT2JzZXJ2YWJsZTxBY2NvcmRpb25QYW5lbE1vZGVsPjtcbiAgICByZWFkb25seSBBY2NvcmRpb25TdGF0dXM6IHR5cGVvZiBBY2NvcmRpb25TdGF0dXM7XG4gICAgaXNBY2NvcmRpb246IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UsIGFjY29yZGlvblNlcnZpY2U6IEFjY29yZGlvblNlcnZpY2UsIGlmRXhwYW5kU2VydmljZTogSWZFeHBhbmRTZXJ2aWNlLCBpZDogc3RyaW5nKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIHRvZ2dsZVBhbmVsKCk6IHZvaWQ7XG4gICAgY29sbGFwc2VQYW5lbE9uQW5pbWF0aW9uRG9uZShwYW5lbDogQWNjb3JkaW9uUGFuZWxNb2RlbCk6IHZvaWQ7XG4gICAgZ2V0UGFuZWxTdGF0ZUNsYXNzZXMocGFuZWw6IEFjY29yZGlvblBhbmVsTW9kZWwpOiBzdHJpbmc7XG4gICAgZ2V0QWNjb3JkaW9uQ29udGVudElkKGlkOiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgZ2V0QWNjb3JkaW9uSGVhZGVySWQoaWQ6IHN0cmluZyk6IHN0cmluZztcbiAgICBwcml2YXRlIGVtaXRQYW5lbENoYW5nZTtcbn1cbiJdfQ==