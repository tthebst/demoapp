import { EventEmitter, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';
import { IfActiveService } from './if-active.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrIfActive implements OnDestroy {
    private ifActiveService;
    private id;
    private template;
    private container;
    private subscription;
    private wasActive;
    constructor(ifActiveService: IfActiveService, id: number, template: TemplateRef<any>, container: ViewContainerRef);
    private checkAndUpdateView;
    /*********
     *
     * @description
     * A setter that updates IfActiveService.active with value.
     *
     * @param value
     */
    set active(value: boolean);
    /**********
     * @property activeChange
     *
     * @description
     * An event emitter that emits when the active property is set to allow for 2way binding when the directive is
     * used with de-structured / de-sugared syntax.
     *
     */
    activeChange: EventEmitter<boolean>;
    /********
     *
     * @description
     * A getter that returns the current IfActiveService.active value.
     */
    get active(): boolean;
    /*********
     *
     * @description
     * Function that takes a any value and either created an embedded view for the associated ViewContainerRef or,
     * Clears all views from the ViewContainerRef
     * @param value
     */
    updateView(value: boolean): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrIfActive>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ClrIfActive, "[clrIfActive]", never, {
    "active": "clrIfActive";
}, {
    "activeChange": "clrIfActiveChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWYtYWN0aXZlLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJpZi1hY3RpdmUuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWZBY3RpdmVTZXJ2aWNlIH0gZnJvbSAnLi9pZi1hY3RpdmUuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJJZkFjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBpZkFjdGl2ZVNlcnZpY2U7XG4gICAgcHJpdmF0ZSBpZDtcbiAgICBwcml2YXRlIHRlbXBsYXRlO1xuICAgIHByaXZhdGUgY29udGFpbmVyO1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgd2FzQWN0aXZlO1xuICAgIGNvbnN0cnVjdG9yKGlmQWN0aXZlU2VydmljZTogSWZBY3RpdmVTZXJ2aWNlLCBpZDogbnVtYmVyLCB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PiwgY29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmKTtcbiAgICBwcml2YXRlIGNoZWNrQW5kVXBkYXRlVmlldztcbiAgICAvKioqKioqKioqXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBBIHNldHRlciB0aGF0IHVwZGF0ZXMgSWZBY3RpdmVTZXJ2aWNlLmFjdGl2ZSB3aXRoIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgc2V0IGFjdGl2ZSh2YWx1ZTogYm9vbGVhbik7XG4gICAgLyoqKioqKioqKipcbiAgICAgKiBAcHJvcGVydHkgYWN0aXZlQ2hhbmdlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBBbiBldmVudCBlbWl0dGVyIHRoYXQgZW1pdHMgd2hlbiB0aGUgYWN0aXZlIHByb3BlcnR5IGlzIHNldCB0byBhbGxvdyBmb3IgMndheSBiaW5kaW5nIHdoZW4gdGhlIGRpcmVjdGl2ZSBpc1xuICAgICAqIHVzZWQgd2l0aCBkZS1zdHJ1Y3R1cmVkIC8gZGUtc3VnYXJlZCBzeW50YXguXG4gICAgICpcbiAgICAgKi9cbiAgICBhY3RpdmVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICAvKioqKioqKipcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEEgZ2V0dGVyIHRoYXQgcmV0dXJucyB0aGUgY3VycmVudCBJZkFjdGl2ZVNlcnZpY2UuYWN0aXZlIHZhbHVlLlxuICAgICAqL1xuICAgIGdldCBhY3RpdmUoKTogYm9vbGVhbjtcbiAgICAvKioqKioqKioqXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBGdW5jdGlvbiB0aGF0IHRha2VzIGEgYW55IHZhbHVlIGFuZCBlaXRoZXIgY3JlYXRlZCBhbiBlbWJlZGRlZCB2aWV3IGZvciB0aGUgYXNzb2NpYXRlZCBWaWV3Q29udGFpbmVyUmVmIG9yLFxuICAgICAqIENsZWFycyBhbGwgdmlld3MgZnJvbSB0aGUgVmlld0NvbnRhaW5lclJlZlxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqL1xuICAgIHVwZGF0ZVZpZXcodmFsdWU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=