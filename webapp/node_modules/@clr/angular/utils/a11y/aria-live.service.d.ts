import { NgZone, OnDestroy } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare enum ClrAriaLivePoliteness {
    off = "off",
    polite = "polite",
    assertive = "assertive"
}
/**
 * This service handle `aria-live` accessibility attribute. The issue is that you need
 * to have the DOM Element with attribute `aria-live` before you could insert content
 * and SR (Screen Reader) pick the change and announce it.
 *
 * ```typescript
 * import { ClrAriaLiveService } from 'src/clr-angular/utils/a11y/aria-live.service';
 *
 * @Component({
 * selector: 'clr-demo-component',
 * providers: [ClrAriaLiveService],
 * template: `
 *   <ng-content></ng-content>
 * `,
 * })
 * export class DemoComponent {
 *  constructor(ariaLiveService: ClrAriaLiveService) {}
 *
 *  public actionThatWillTriggerChange() {
 *    this.ariaLiveService.announce('message that I want to announce to SR');
 *  }
 * }
 * ```
 *
 */
export declare class ClrAriaLiveService implements OnDestroy {
    private ngZone;
    private platformId;
    private ariaLiveElement;
    private document;
    private previousTimeout;
    constructor(ngZone: NgZone, _document: any, platformId: Object);
    private _id;
    /**
     * get access to the internal HTML `id` that gonna be used for the AriaLive container.
     * @return ID of the DOM Element as string.
     */
    get id(): string;
    /**
     * Append text content inside the AriaLive Container. This method will check if the
     * DOM Element is existing if not it will create one for us and the will apply the text.
     *
     * ```typescript
     * this.ariaLiveService.announce(this.el.nativeElement);
     * // or
     * this.ariaLiveService.announce('Message to announce to SR');
     * ```
     *
     * @remark
     * When second argument is `AriaLivePoliteness.off` we won't create aria container or update it.
     * The reason for that is that we don't want to do additional work if the SR will ignore it.
     *
     * @param message - This could be simple string or HTMLElement
     * @param politeness - 'polite', 'assertive' or 'off'
     */
    announce(message: string | HTMLElement, politeness?: ClrAriaLivePoliteness): void;
    /**
     * onDestroy life cycle - must stop all active setTimeouts and remove the AriaLive
     * container from the document.
     */
    ngOnDestroy(): void;
    /**
     * Create AriaLive DOM element as a last child of the document.
     * After the element is created, we gonna apply Clarity class to hide it from
     * the screen and set the `aria-live` politness.
     *
     * `clr-sr-only` is the CSS class that is used to hide the element from the screen.
     *
     * @remark
     * Calling this method multiple times will create multiple DOM Elements, that
     * won't be tracked and will be GC after the service is destroyed.
     *
     * @return AriaLive container as HTMLElement
     *
     */
    private createContainer;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrAriaLiveService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJpYS1saXZlLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiYXJpYS1saXZlLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlGQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nWm9uZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5leHBvcnQgZGVjbGFyZSBlbnVtIENsckFyaWFMaXZlUG9saXRlbmVzcyB7XG4gICAgb2ZmID0gXCJvZmZcIixcbiAgICBwb2xpdGUgPSBcInBvbGl0ZVwiLFxuICAgIGFzc2VydGl2ZSA9IFwiYXNzZXJ0aXZlXCJcbn1cbi8qKlxuICogVGhpcyBzZXJ2aWNlIGhhbmRsZSBgYXJpYS1saXZlYCBhY2Nlc3NpYmlsaXR5IGF0dHJpYnV0ZS4gVGhlIGlzc3VlIGlzIHRoYXQgeW91IG5lZWRcbiAqIHRvIGhhdmUgdGhlIERPTSBFbGVtZW50IHdpdGggYXR0cmlidXRlIGBhcmlhLWxpdmVgIGJlZm9yZSB5b3UgY291bGQgaW5zZXJ0IGNvbnRlbnRcbiAqIGFuZCBTUiAoU2NyZWVuIFJlYWRlcikgcGljayB0aGUgY2hhbmdlIGFuZCBhbm5vdW5jZSBpdC5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBDbHJBcmlhTGl2ZVNlcnZpY2UgfSBmcm9tICdzcmMvY2xyLWFuZ3VsYXIvdXRpbHMvYTExeS9hcmlhLWxpdmUuc2VydmljZSc7XG4gKlxuICogQENvbXBvbmVudCh7XG4gKiBzZWxlY3RvcjogJ2Nsci1kZW1vLWNvbXBvbmVudCcsXG4gKiBwcm92aWRlcnM6IFtDbHJBcmlhTGl2ZVNlcnZpY2VdLFxuICogdGVtcGxhdGU6IGBcbiAqICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICogYCxcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgRGVtb0NvbXBvbmVudCB7XG4gKiAgY29uc3RydWN0b3IoYXJpYUxpdmVTZXJ2aWNlOiBDbHJBcmlhTGl2ZVNlcnZpY2UpIHt9XG4gKlxuICogIHB1YmxpYyBhY3Rpb25UaGF0V2lsbFRyaWdnZXJDaGFuZ2UoKSB7XG4gKiAgICB0aGlzLmFyaWFMaXZlU2VydmljZS5hbm5vdW5jZSgnbWVzc2FnZSB0aGF0IEkgd2FudCB0byBhbm5vdW5jZSB0byBTUicpO1xuICogIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xyQXJpYUxpdmVTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICBwcml2YXRlIHBsYXRmb3JtSWQ7XG4gICAgcHJpdmF0ZSBhcmlhTGl2ZUVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBkb2N1bWVudDtcbiAgICBwcml2YXRlIHByZXZpb3VzVGltZW91dDtcbiAgICBjb25zdHJ1Y3RvcihuZ1pvbmU6IE5nWm9uZSwgX2RvY3VtZW50OiBhbnksIHBsYXRmb3JtSWQ6IE9iamVjdCk7XG4gICAgcHJpdmF0ZSBfaWQ7XG4gICAgLyoqXG4gICAgICogZ2V0IGFjY2VzcyB0byB0aGUgaW50ZXJuYWwgSFRNTCBgaWRgIHRoYXQgZ29ubmEgYmUgdXNlZCBmb3IgdGhlIEFyaWFMaXZlIGNvbnRhaW5lci5cbiAgICAgKiBAcmV0dXJuIElEIG9mIHRoZSBET00gRWxlbWVudCBhcyBzdHJpbmcuXG4gICAgICovXG4gICAgZ2V0IGlkKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBcHBlbmQgdGV4dCBjb250ZW50IGluc2lkZSB0aGUgQXJpYUxpdmUgQ29udGFpbmVyLiBUaGlzIG1ldGhvZCB3aWxsIGNoZWNrIGlmIHRoZVxuICAgICAqIERPTSBFbGVtZW50IGlzIGV4aXN0aW5nIGlmIG5vdCBpdCB3aWxsIGNyZWF0ZSBvbmUgZm9yIHVzIGFuZCB0aGUgd2lsbCBhcHBseSB0aGUgdGV4dC5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmFyaWFMaXZlU2VydmljZS5hbm5vdW5jZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAqIC8vIG9yXG4gICAgICogdGhpcy5hcmlhTGl2ZVNlcnZpY2UuYW5ub3VuY2UoJ01lc3NhZ2UgdG8gYW5ub3VuY2UgdG8gU1InKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEByZW1hcmtcbiAgICAgKiBXaGVuIHNlY29uZCBhcmd1bWVudCBpcyBgQXJpYUxpdmVQb2xpdGVuZXNzLm9mZmAgd2Ugd29uJ3QgY3JlYXRlIGFyaWEgY29udGFpbmVyIG9yIHVwZGF0ZSBpdC5cbiAgICAgKiBUaGUgcmVhc29uIGZvciB0aGF0IGlzIHRoYXQgd2UgZG9uJ3Qgd2FudCB0byBkbyBhZGRpdGlvbmFsIHdvcmsgaWYgdGhlIFNSIHdpbGwgaWdub3JlIGl0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBUaGlzIGNvdWxkIGJlIHNpbXBsZSBzdHJpbmcgb3IgSFRNTEVsZW1lbnRcbiAgICAgKiBAcGFyYW0gcG9saXRlbmVzcyAtICdwb2xpdGUnLCAnYXNzZXJ0aXZlJyBvciAnb2ZmJ1xuICAgICAqL1xuICAgIGFubm91bmNlKG1lc3NhZ2U6IHN0cmluZyB8IEhUTUxFbGVtZW50LCBwb2xpdGVuZXNzPzogQ2xyQXJpYUxpdmVQb2xpdGVuZXNzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBvbkRlc3Ryb3kgbGlmZSBjeWNsZSAtIG11c3Qgc3RvcCBhbGwgYWN0aXZlIHNldFRpbWVvdXRzIGFuZCByZW1vdmUgdGhlIEFyaWFMaXZlXG4gICAgICogY29udGFpbmVyIGZyb20gdGhlIGRvY3VtZW50LlxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIEFyaWFMaXZlIERPTSBlbGVtZW50IGFzIGEgbGFzdCBjaGlsZCBvZiB0aGUgZG9jdW1lbnQuXG4gICAgICogQWZ0ZXIgdGhlIGVsZW1lbnQgaXMgY3JlYXRlZCwgd2UgZ29ubmEgYXBwbHkgQ2xhcml0eSBjbGFzcyB0byBoaWRlIGl0IGZyb21cbiAgICAgKiB0aGUgc2NyZWVuIGFuZCBzZXQgdGhlIGBhcmlhLWxpdmVgIHBvbGl0bmVzcy5cbiAgICAgKlxuICAgICAqIGBjbHItc3Itb25seWAgaXMgdGhlIENTUyBjbGFzcyB0aGF0IGlzIHVzZWQgdG8gaGlkZSB0aGUgZWxlbWVudCBmcm9tIHRoZSBzY3JlZW4uXG4gICAgICpcbiAgICAgKiBAcmVtYXJrXG4gICAgICogQ2FsbGluZyB0aGlzIG1ldGhvZCBtdWx0aXBsZSB0aW1lcyB3aWxsIGNyZWF0ZSBtdWx0aXBsZSBET00gRWxlbWVudHMsIHRoYXRcbiAgICAgKiB3b24ndCBiZSB0cmFja2VkIGFuZCB3aWxsIGJlIEdDIGFmdGVyIHRoZSBzZXJ2aWNlIGlzIGRlc3Ryb3llZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gQXJpYUxpdmUgY29udGFpbmVyIGFzIEhUTUxFbGVtZW50XG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZUNvbnRhaW5lcjtcbn1cbiJdfQ==