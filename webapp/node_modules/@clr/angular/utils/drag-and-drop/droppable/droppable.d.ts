import { ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { DomAdapter } from '../../dom-adapter/dom-adapter';
import { ClrDragEvent } from '../drag-event';
import { ClrDropToleranceInterface } from '../interfaces/drop-tolerance.interface';
import { DragAndDropEventBusService } from '../providers/drag-and-drop-event-bus.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrDroppable<T> implements OnInit, OnDestroy {
    private el;
    private eventBus;
    private domAdapter;
    private renderer;
    private dragStartSubscription;
    private dragMoveSubscription;
    private dragEndSubscription;
    private droppableEl;
    private clientRect;
    constructor(el: ElementRef, eventBus: DragAndDropEventBusService<T>, domAdapter: DomAdapter, renderer: Renderer2);
    isDraggableMatch: boolean;
    private _isDraggableOver;
    set isDraggableOver(value: boolean);
    private _group;
    set group(value: string | string[]);
    private _dropTolerance;
    private dropToleranceGenerator;
    set dropTolerance(value: number | string | ClrDropToleranceInterface);
    dragStartEmitter: EventEmitter<ClrDragEvent<T>>;
    dragMoveEmitter: EventEmitter<ClrDragEvent<T>>;
    dragEndEmitter: EventEmitter<ClrDragEvent<T>>;
    dragLeaveEmitter: EventEmitter<ClrDragEvent<T>>;
    dragEnterEmitter: EventEmitter<ClrDragEvent<T>>;
    dropEmitter: EventEmitter<ClrDragEvent<T>>;
    private unsubscribeFrom;
    private checkGroupMatch;
    private isInDropArea;
    private onDragStart;
    private onDragMove;
    private onDragEnd;
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrDroppable<any>>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ClrDroppable<any>, "[clrDroppable]", never, {
    "group": "clrGroup";
    "dropTolerance": "clrDropTolerance";
}, {
    "dragStartEmitter": "clrDragStart";
    "dragMoveEmitter": "clrDragMove";
    "dragEndEmitter": "clrDragEnd";
    "dragLeaveEmitter": "clrDragLeave";
    "dragEnterEmitter": "clrDragEnter";
    "dropEmitter": "clrDrop";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcHBhYmxlLmQudHMiLCJzb3VyY2VzIjpbImRyb3BwYWJsZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21BZGFwdGVyIH0gZnJvbSAnLi4vLi4vZG9tLWFkYXB0ZXIvZG9tLWFkYXB0ZXInO1xuaW1wb3J0IHsgQ2xyRHJhZ0V2ZW50IH0gZnJvbSAnLi4vZHJhZy1ldmVudCc7XG5pbXBvcnQgeyBDbHJEcm9wVG9sZXJhbmNlSW50ZXJmYWNlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9kcm9wLXRvbGVyYW5jZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRHJhZ0FuZERyb3BFdmVudEJ1c1NlcnZpY2UgfSBmcm9tICcuLi9wcm92aWRlcnMvZHJhZy1hbmQtZHJvcC1ldmVudC1idXMuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJEcm9wcGFibGU8VD4gaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBlbDtcbiAgICBwcml2YXRlIGV2ZW50QnVzO1xuICAgIHByaXZhdGUgZG9tQWRhcHRlcjtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgZHJhZ1N0YXJ0U3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgZHJhZ01vdmVTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBkcmFnRW5kU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgZHJvcHBhYmxlRWw7XG4gICAgcHJpdmF0ZSBjbGllbnRSZWN0O1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBldmVudEJ1czogRHJhZ0FuZERyb3BFdmVudEJ1c1NlcnZpY2U8VD4sIGRvbUFkYXB0ZXI6IERvbUFkYXB0ZXIsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIGlzRHJhZ2dhYmxlTWF0Y2g6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfaXNEcmFnZ2FibGVPdmVyO1xuICAgIHNldCBpc0RyYWdnYWJsZU92ZXIodmFsdWU6IGJvb2xlYW4pO1xuICAgIHByaXZhdGUgX2dyb3VwO1xuICAgIHNldCBncm91cCh2YWx1ZTogc3RyaW5nIHwgc3RyaW5nW10pO1xuICAgIHByaXZhdGUgX2Ryb3BUb2xlcmFuY2U7XG4gICAgcHJpdmF0ZSBkcm9wVG9sZXJhbmNlR2VuZXJhdG9yO1xuICAgIHNldCBkcm9wVG9sZXJhbmNlKHZhbHVlOiBudW1iZXIgfCBzdHJpbmcgfCBDbHJEcm9wVG9sZXJhbmNlSW50ZXJmYWNlKTtcbiAgICBkcmFnU3RhcnRFbWl0dGVyOiBFdmVudEVtaXR0ZXI8Q2xyRHJhZ0V2ZW50PFQ+PjtcbiAgICBkcmFnTW92ZUVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxDbHJEcmFnRXZlbnQ8VD4+O1xuICAgIGRyYWdFbmRFbWl0dGVyOiBFdmVudEVtaXR0ZXI8Q2xyRHJhZ0V2ZW50PFQ+PjtcbiAgICBkcmFnTGVhdmVFbWl0dGVyOiBFdmVudEVtaXR0ZXI8Q2xyRHJhZ0V2ZW50PFQ+PjtcbiAgICBkcmFnRW50ZXJFbWl0dGVyOiBFdmVudEVtaXR0ZXI8Q2xyRHJhZ0V2ZW50PFQ+PjtcbiAgICBkcm9wRW1pdHRlcjogRXZlbnRFbWl0dGVyPENsckRyYWdFdmVudDxUPj47XG4gICAgcHJpdmF0ZSB1bnN1YnNjcmliZUZyb207XG4gICAgcHJpdmF0ZSBjaGVja0dyb3VwTWF0Y2g7XG4gICAgcHJpdmF0ZSBpc0luRHJvcEFyZWE7XG4gICAgcHJpdmF0ZSBvbkRyYWdTdGFydDtcbiAgICBwcml2YXRlIG9uRHJhZ01vdmU7XG4gICAgcHJpdmF0ZSBvbkRyYWdFbmQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19