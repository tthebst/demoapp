import { AfterContentInit, ComponentFactoryResolver, ElementRef, EventEmitter, Injector, OnDestroy, ViewContainerRef } from '@angular/core';
import { ClrDragEvent } from '../drag-event';
import { ClrIfDragged } from '../if-dragged';
import { DragEventListenerService } from '../providers/drag-event-listener.service';
import { DragHandleRegistrarService } from '../providers/drag-handle-registrar.service';
import { DraggableSnapshotService } from '../providers/draggable-snapshot.service';
import { GlobalDragModeService } from '../providers/global-drag-mode.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrDraggable<T> implements AfterContentInit, OnDestroy {
    private el;
    private dragEventListener;
    private dragHandleRegistrar;
    private viewContainerRef;
    private cfr;
    private injector;
    private draggableSnapshot;
    private globalDragMode;
    private draggableEl;
    private subscriptions;
    private componentFactory;
    dragOn: boolean;
    constructor(el: ElementRef, dragEventListener: DragEventListenerService<T>, dragHandleRegistrar: DragHandleRegistrarService<T>, viewContainerRef: ViewContainerRef, cfr: ComponentFactoryResolver, injector: Injector, draggableSnapshot: DraggableSnapshotService<T>, globalDragMode: GlobalDragModeService);
    customGhost: ClrIfDragged<T>;
    set dataTransfer(value: T);
    set group(value: string | string[]);
    private createDefaultGhost;
    private destroyDefaultGhost;
    dragStartEmitter: EventEmitter<ClrDragEvent<T>>;
    dragMoveEmitter: EventEmitter<ClrDragEvent<T>>;
    dragEndEmitter: EventEmitter<ClrDragEvent<T>>;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrDraggable<any>>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ClrDraggable<any>, "[clrDraggable]", never, {
    "dataTransfer": "clrDraggable";
    "group": "clrGroup";
}, {
    "dragStartEmitter": "clrDragStart";
    "dragMoveEmitter": "clrDragMove";
    "dragEndEmitter": "clrDragEnd";
}, ["customGhost"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZ2dhYmxlLmQudHMiLCJzb3VyY2VzIjpbImRyYWdnYWJsZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5qZWN0b3IsIE9uRGVzdHJveSwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2xyRHJhZ0V2ZW50IH0gZnJvbSAnLi4vZHJhZy1ldmVudCc7XG5pbXBvcnQgeyBDbHJJZkRyYWdnZWQgfSBmcm9tICcuLi9pZi1kcmFnZ2VkJztcbmltcG9ydCB7IERyYWdFdmVudExpc3RlbmVyU2VydmljZSB9IGZyb20gJy4uL3Byb3ZpZGVycy9kcmFnLWV2ZW50LWxpc3RlbmVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRHJhZ0hhbmRsZVJlZ2lzdHJhclNlcnZpY2UgfSBmcm9tICcuLi9wcm92aWRlcnMvZHJhZy1oYW5kbGUtcmVnaXN0cmFyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRHJhZ2dhYmxlU25hcHNob3RTZXJ2aWNlIH0gZnJvbSAnLi4vcHJvdmlkZXJzL2RyYWdnYWJsZS1zbmFwc2hvdC5zZXJ2aWNlJztcbmltcG9ydCB7IEdsb2JhbERyYWdNb2RlU2VydmljZSB9IGZyb20gJy4uL3Byb3ZpZGVycy9nbG9iYWwtZHJhZy1tb2RlLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xyRHJhZ2dhYmxlPFQ+IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGVsO1xuICAgIHByaXZhdGUgZHJhZ0V2ZW50TGlzdGVuZXI7XG4gICAgcHJpdmF0ZSBkcmFnSGFuZGxlUmVnaXN0cmFyO1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIGNmcjtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIHByaXZhdGUgZHJhZ2dhYmxlU25hcHNob3Q7XG4gICAgcHJpdmF0ZSBnbG9iYWxEcmFnTW9kZTtcbiAgICBwcml2YXRlIGRyYWdnYWJsZUVsO1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICBwcml2YXRlIGNvbXBvbmVudEZhY3Rvcnk7XG4gICAgZHJhZ09uOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBkcmFnRXZlbnRMaXN0ZW5lcjogRHJhZ0V2ZW50TGlzdGVuZXJTZXJ2aWNlPFQ+LCBkcmFnSGFuZGxlUmVnaXN0cmFyOiBEcmFnSGFuZGxlUmVnaXN0cmFyU2VydmljZTxUPiwgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIGluamVjdG9yOiBJbmplY3RvciwgZHJhZ2dhYmxlU25hcHNob3Q6IERyYWdnYWJsZVNuYXBzaG90U2VydmljZTxUPiwgZ2xvYmFsRHJhZ01vZGU6IEdsb2JhbERyYWdNb2RlU2VydmljZSk7XG4gICAgY3VzdG9tR2hvc3Q6IENscklmRHJhZ2dlZDxUPjtcbiAgICBzZXQgZGF0YVRyYW5zZmVyKHZhbHVlOiBUKTtcbiAgICBzZXQgZ3JvdXAodmFsdWU6IHN0cmluZyB8IHN0cmluZ1tdKTtcbiAgICBwcml2YXRlIGNyZWF0ZURlZmF1bHRHaG9zdDtcbiAgICBwcml2YXRlIGRlc3Ryb3lEZWZhdWx0R2hvc3Q7XG4gICAgZHJhZ1N0YXJ0RW1pdHRlcjogRXZlbnRFbWl0dGVyPENsckRyYWdFdmVudDxUPj47XG4gICAgZHJhZ01vdmVFbWl0dGVyOiBFdmVudEVtaXR0ZXI8Q2xyRHJhZ0V2ZW50PFQ+PjtcbiAgICBkcmFnRW5kRW1pdHRlcjogRXZlbnRFbWl0dGVyPENsckRyYWdFdmVudDxUPj47XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==