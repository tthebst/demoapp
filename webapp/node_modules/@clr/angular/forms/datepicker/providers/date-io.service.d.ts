import { LocaleHelperService } from './locale-helper.service';
import { DateRange } from '../interfaces/date-range.interface';
import * as ɵngcc0 from '@angular/core';
export declare class DateIOService {
    private _localeHelperService;
    disabledDates: DateRange;
    cldrLocaleDateFormat: string;
    private localeDisplayFormat;
    private delimiters;
    constructor(_localeHelperService: LocaleHelperService);
    setMinDate(date: string): void;
    setMaxDate(date: string): void;
    private initializeLocaleDisplayFormat;
    private extractDelimiters;
    toLocaleDisplayFormatString(date: Date): string;
    get placeholderText(): string;
    /**
     * Checks if the month entered by the user is valid or not.
     * Note: Month is 0 based.
     */
    private isValidMonth;
    /**
     * Checks if the date is valid depending on the year and month provided.
     */
    private isValidDate;
    /**
     * Validates the parameters provided and returns the date.
     * If the parameters are not
     * valid then return null.
     * NOTE: (Month here is 1 based since the user has provided that as an input)
     */
    private validateAndGetDate;
    getDateValueFromDateString(date: string): Date;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DateIOService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DateIOService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1pby5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImRhdGUtaW8uc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4QkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb2NhbGVIZWxwZXJTZXJ2aWNlIH0gZnJvbSAnLi9sb2NhbGUtaGVscGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0ZVJhbmdlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9kYXRlLXJhbmdlLmludGVyZmFjZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXRlSU9TZXJ2aWNlIHtcbiAgICBwcml2YXRlIF9sb2NhbGVIZWxwZXJTZXJ2aWNlO1xuICAgIGRpc2FibGVkRGF0ZXM6IERhdGVSYW5nZTtcbiAgICBjbGRyTG9jYWxlRGF0ZUZvcm1hdDogc3RyaW5nO1xuICAgIHByaXZhdGUgbG9jYWxlRGlzcGxheUZvcm1hdDtcbiAgICBwcml2YXRlIGRlbGltaXRlcnM7XG4gICAgY29uc3RydWN0b3IoX2xvY2FsZUhlbHBlclNlcnZpY2U6IExvY2FsZUhlbHBlclNlcnZpY2UpO1xuICAgIHNldE1pbkRhdGUoZGF0ZTogc3RyaW5nKTogdm9pZDtcbiAgICBzZXRNYXhEYXRlKGRhdGU6IHN0cmluZyk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBpbml0aWFsaXplTG9jYWxlRGlzcGxheUZvcm1hdDtcbiAgICBwcml2YXRlIGV4dHJhY3REZWxpbWl0ZXJzO1xuICAgIHRvTG9jYWxlRGlzcGxheUZvcm1hdFN0cmluZyhkYXRlOiBEYXRlKTogc3RyaW5nO1xuICAgIGdldCBwbGFjZWhvbGRlclRleHQoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgbW9udGggZW50ZXJlZCBieSB0aGUgdXNlciBpcyB2YWxpZCBvciBub3QuXG4gICAgICogTm90ZTogTW9udGggaXMgMCBiYXNlZC5cbiAgICAgKi9cbiAgICBwcml2YXRlIGlzVmFsaWRNb250aDtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGRhdGUgaXMgdmFsaWQgZGVwZW5kaW5nIG9uIHRoZSB5ZWFyIGFuZCBtb250aCBwcm92aWRlZC5cbiAgICAgKi9cbiAgICBwcml2YXRlIGlzVmFsaWREYXRlO1xuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlcyB0aGUgcGFyYW1ldGVycyBwcm92aWRlZCBhbmQgcmV0dXJucyB0aGUgZGF0ZS5cbiAgICAgKiBJZiB0aGUgcGFyYW1ldGVycyBhcmUgbm90XG4gICAgICogdmFsaWQgdGhlbiByZXR1cm4gbnVsbC5cbiAgICAgKiBOT1RFOiAoTW9udGggaGVyZSBpcyAxIGJhc2VkIHNpbmNlIHRoZSB1c2VyIGhhcyBwcm92aWRlZCB0aGF0IGFzIGFuIGlucHV0KVxuICAgICAqL1xuICAgIHByaXZhdGUgdmFsaWRhdGVBbmRHZXREYXRlO1xuICAgIGdldERhdGVWYWx1ZUZyb21EYXRlU3RyaW5nKGRhdGU6IHN0cmluZyk6IERhdGU7XG59XG4iXX0=