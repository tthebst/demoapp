import { AfterViewInit, ElementRef, EventEmitter, Injector, OnDestroy, OnInit, Renderer2, ViewContainerRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { FocusService } from '../common/providers/focus.service';
import { WrappedFormControl } from '../common/wrapped-control';
import { ClrDateContainer } from './date-container';
import { DateFormControlService } from './providers/date-form-control.service';
import { DateIOService } from './providers/date-io.service';
import { DateNavigationService } from './providers/date-navigation.service';
import { DatepickerEnabledService } from './providers/datepicker-enabled.service';
import { DatepickerFocusService } from './providers/datepicker-focus.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrDateInput extends WrappedFormControl<ClrDateContainer> implements OnInit, AfterViewInit, OnDestroy {
    protected el: ElementRef;
    protected renderer: Renderer2;
    protected control: NgControl;
    private container;
    private dateIOService;
    private dateNavigationService;
    private datepickerEnabledService;
    private dateFormControlService;
    private platformId;
    private focusService;
    private datepickerFocusService;
    placeholder: string;
    dateChange: EventEmitter<Date>;
    set date(date: Date);
    set min(dateString: string);
    set max(dateString: string);
    protected index: number;
    private initialClrDateInputValue;
    private previousDateChange;
    constructor(viewContainerRef: ViewContainerRef, injector: Injector, el: ElementRef, renderer: Renderer2, control: NgControl, container: ClrDateContainer, dateIOService: DateIOService, dateNavigationService: DateNavigationService, datepickerEnabledService: DatepickerEnabledService, dateFormControlService: DateFormControlService, platformId: Object, focusService: FocusService, datepickerFocusService: DatepickerFocusService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    setFocusStates(): void;
    triggerValidation(): void;
    get placeholderText(): string;
    get inputType(): string;
    onValueChange(target: HTMLInputElement): void;
    set disabled(value: boolean | string);
    get disabled(): boolean | string;
    private usingClarityDatepicker;
    private usingNativeDatepicker;
    private setFocus;
    private populateServicesFromContainerComponent;
    private processInitialInputs;
    private updateDate;
    private updateInput;
    private getValidDateValueFromDate;
    private emitDateOutput;
    private datepickerHasFormControl;
    private listenForControlValueChanges;
    private listenForUserSelectedDayChanges;
    private listenForTouchChanges;
    private listenForDirtyChanges;
    private listenForInputRefocus;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrDateInput>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ClrDateInput, "[clrDate]", never, {
    "date": "clrDate";
    "min": "min";
    "max": "max";
    "disabled": "disabled";
    "placeholder": "placeholder";
}, {
    "dateChange": "clrDateChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1pbnB1dC5kLnRzIiwic291cmNlcyI6WyJkYXRlLWlucHV0LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2Q0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEluamVjdG9yLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGb2N1c1NlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vcHJvdmlkZXJzL2ZvY3VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgV3JhcHBlZEZvcm1Db250cm9sIH0gZnJvbSAnLi4vY29tbW9uL3dyYXBwZWQtY29udHJvbCc7XG5pbXBvcnQgeyBDbHJEYXRlQ29udGFpbmVyIH0gZnJvbSAnLi9kYXRlLWNvbnRhaW5lcic7XG5pbXBvcnQgeyBEYXRlRm9ybUNvbnRyb2xTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvZGF0ZS1mb3JtLWNvbnRyb2wuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRlSU9TZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvZGF0ZS1pby5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGVOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2RhdGUtbmF2aWdhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGVwaWNrZXJFbmFibGVkU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2RhdGVwaWNrZXItZW5hYmxlZC5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGVwaWNrZXJGb2N1c1NlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9kYXRlcGlja2VyLWZvY3VzLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xyRGF0ZUlucHV0IGV4dGVuZHMgV3JhcHBlZEZvcm1Db250cm9sPENsckRhdGVDb250YWluZXI+IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCBlbDogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICBwcm90ZWN0ZWQgY29udHJvbDogTmdDb250cm9sO1xuICAgIHByaXZhdGUgY29udGFpbmVyO1xuICAgIHByaXZhdGUgZGF0ZUlPU2VydmljZTtcbiAgICBwcml2YXRlIGRhdGVOYXZpZ2F0aW9uU2VydmljZTtcbiAgICBwcml2YXRlIGRhdGVwaWNrZXJFbmFibGVkU2VydmljZTtcbiAgICBwcml2YXRlIGRhdGVGb3JtQ29udHJvbFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIHByaXZhdGUgZm9jdXNTZXJ2aWNlO1xuICAgIHByaXZhdGUgZGF0ZXBpY2tlckZvY3VzU2VydmljZTtcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICAgIGRhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICBzZXQgZGF0ZShkYXRlOiBEYXRlKTtcbiAgICBzZXQgbWluKGRhdGVTdHJpbmc6IHN0cmluZyk7XG4gICAgc2V0IG1heChkYXRlU3RyaW5nOiBzdHJpbmcpO1xuICAgIHByb3RlY3RlZCBpbmRleDogbnVtYmVyO1xuICAgIHByaXZhdGUgaW5pdGlhbENsckRhdGVJbnB1dFZhbHVlO1xuICAgIHByaXZhdGUgcHJldmlvdXNEYXRlQ2hhbmdlO1xuICAgIGNvbnN0cnVjdG9yKHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIGluamVjdG9yOiBJbmplY3RvciwgZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGNvbnRyb2w6IE5nQ29udHJvbCwgY29udGFpbmVyOiBDbHJEYXRlQ29udGFpbmVyLCBkYXRlSU9TZXJ2aWNlOiBEYXRlSU9TZXJ2aWNlLCBkYXRlTmF2aWdhdGlvblNlcnZpY2U6IERhdGVOYXZpZ2F0aW9uU2VydmljZSwgZGF0ZXBpY2tlckVuYWJsZWRTZXJ2aWNlOiBEYXRlcGlja2VyRW5hYmxlZFNlcnZpY2UsIGRhdGVGb3JtQ29udHJvbFNlcnZpY2U6IERhdGVGb3JtQ29udHJvbFNlcnZpY2UsIHBsYXRmb3JtSWQ6IE9iamVjdCwgZm9jdXNTZXJ2aWNlOiBGb2N1c1NlcnZpY2UsIGRhdGVwaWNrZXJGb2N1c1NlcnZpY2U6IERhdGVwaWNrZXJGb2N1c1NlcnZpY2UpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgc2V0Rm9jdXNTdGF0ZXMoKTogdm9pZDtcbiAgICB0cmlnZ2VyVmFsaWRhdGlvbigpOiB2b2lkO1xuICAgIGdldCBwbGFjZWhvbGRlclRleHQoKTogc3RyaW5nO1xuICAgIGdldCBpbnB1dFR5cGUoKTogc3RyaW5nO1xuICAgIG9uVmFsdWVDaGFuZ2UodGFyZ2V0OiBIVE1MSW5wdXRFbGVtZW50KTogdm9pZDtcbiAgICBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpO1xuICAgIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHwgc3RyaW5nO1xuICAgIHByaXZhdGUgdXNpbmdDbGFyaXR5RGF0ZXBpY2tlcjtcbiAgICBwcml2YXRlIHVzaW5nTmF0aXZlRGF0ZXBpY2tlcjtcbiAgICBwcml2YXRlIHNldEZvY3VzO1xuICAgIHByaXZhdGUgcG9wdWxhdGVTZXJ2aWNlc0Zyb21Db250YWluZXJDb21wb25lbnQ7XG4gICAgcHJpdmF0ZSBwcm9jZXNzSW5pdGlhbElucHV0cztcbiAgICBwcml2YXRlIHVwZGF0ZURhdGU7XG4gICAgcHJpdmF0ZSB1cGRhdGVJbnB1dDtcbiAgICBwcml2YXRlIGdldFZhbGlkRGF0ZVZhbHVlRnJvbURhdGU7XG4gICAgcHJpdmF0ZSBlbWl0RGF0ZU91dHB1dDtcbiAgICBwcml2YXRlIGRhdGVwaWNrZXJIYXNGb3JtQ29udHJvbDtcbiAgICBwcml2YXRlIGxpc3RlbkZvckNvbnRyb2xWYWx1ZUNoYW5nZXM7XG4gICAgcHJpdmF0ZSBsaXN0ZW5Gb3JVc2VyU2VsZWN0ZWREYXlDaGFuZ2VzO1xuICAgIHByaXZhdGUgbGlzdGVuRm9yVG91Y2hDaGFuZ2VzO1xuICAgIHByaXZhdGUgbGlzdGVuRm9yRGlydHlDaGFuZ2VzO1xuICAgIHByaXZhdGUgbGlzdGVuRm9ySW5wdXRSZWZvY3VzO1xufVxuIl19