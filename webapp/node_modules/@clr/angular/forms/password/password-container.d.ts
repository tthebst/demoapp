/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { InjectionToken } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { IfErrorService } from '../common/if-error/if-error.service';
import { ControlClassService } from '../common/providers/control-class.service';
import { FocusService } from '../common/providers/focus.service';
import { LayoutService } from '../common/providers/layout.service';
import { NgControlService } from '../common/providers/ng-control.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrAbstractContainer } from '../common/abstract-container';
import * as ɵngcc0 from '@angular/core';
export declare const TOGGLE_SERVICE: InjectionToken<BehaviorSubject<boolean>>;
export declare function ToggleServiceFactory(): BehaviorSubject<boolean>;
export declare const TOGGLE_SERVICE_PROVIDER: {
    provide: InjectionToken<BehaviorSubject<boolean>>;
    useFactory: typeof ToggleServiceFactory;
};
export declare class ClrPasswordContainer extends ClrAbstractContainer {
    focusService: FocusService;
    private toggleService;
    commonStrings: ClrCommonStringsService;
    show: boolean;
    focus: boolean;
    private _toggle;
    set clrToggle(state: boolean);
    get clrToggle(): boolean;
    constructor(ifErrorService: IfErrorService, layoutService: LayoutService, controlClassService: ControlClassService, ngControlService: NgControlService, focusService: FocusService, toggleService: BehaviorSubject<boolean>, commonStrings: ClrCommonStringsService);
    toggle(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrPasswordContainer>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrPasswordContainer, "clr-password-container", never, {
    "clrToggle": "clrToggle";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY29udGFpbmVyLmQudHMiLCJzb3VyY2VzIjpbInBhc3N3b3JkLWNvbnRhaW5lci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFjQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cbmltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IElmRXJyb3JTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL2lmLWVycm9yL2lmLWVycm9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29udHJvbENsYXNzU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9wcm92aWRlcnMvY29udHJvbC1jbGFzcy5zZXJ2aWNlJztcbmltcG9ydCB7IEZvY3VzU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9wcm92aWRlcnMvZm9jdXMuc2VydmljZSc7XG5pbXBvcnQgeyBMYXlvdXRTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3Byb3ZpZGVycy9sYXlvdXQuc2VydmljZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2xTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3Byb3ZpZGVycy9uZy1jb250cm9sLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQWJzdHJhY3RDb250YWluZXIgfSBmcm9tICcuLi9jb21tb24vYWJzdHJhY3QtY29udGFpbmVyJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFRPR0dMRV9TRVJWSUNFOiBJbmplY3Rpb25Ub2tlbjxCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4+O1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gVG9nZ2xlU2VydmljZUZhY3RvcnkoKTogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgVE9HR0xFX1NFUlZJQ0VfUFJPVklERVI6IHtcbiAgICBwcm92aWRlOiBJbmplY3Rpb25Ub2tlbjxCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4+O1xuICAgIHVzZUZhY3Rvcnk6IHR5cGVvZiBUb2dnbGVTZXJ2aWNlRmFjdG9yeTtcbn07XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJQYXNzd29yZENvbnRhaW5lciBleHRlbmRzIENsckFic3RyYWN0Q29udGFpbmVyIHtcbiAgICBmb2N1c1NlcnZpY2U6IEZvY3VzU2VydmljZTtcbiAgICBwcml2YXRlIHRvZ2dsZVNlcnZpY2U7XG4gICAgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2U7XG4gICAgc2hvdzogYm9vbGVhbjtcbiAgICBmb2N1czogYm9vbGVhbjtcbiAgICBwcml2YXRlIF90b2dnbGU7XG4gICAgc2V0IGNsclRvZ2dsZShzdGF0ZTogYm9vbGVhbik7XG4gICAgZ2V0IGNsclRvZ2dsZSgpOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGlmRXJyb3JTZXJ2aWNlOiBJZkVycm9yU2VydmljZSwgbGF5b3V0U2VydmljZTogTGF5b3V0U2VydmljZSwgY29udHJvbENsYXNzU2VydmljZTogQ29udHJvbENsYXNzU2VydmljZSwgbmdDb250cm9sU2VydmljZTogTmdDb250cm9sU2VydmljZSwgZm9jdXNTZXJ2aWNlOiBGb2N1c1NlcnZpY2UsIHRvZ2dsZVNlcnZpY2U6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPiwgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UpO1xuICAgIHRvZ2dsZSgpOiB2b2lkO1xufVxuIl19