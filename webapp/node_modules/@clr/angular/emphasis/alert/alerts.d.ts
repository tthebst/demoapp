import { AfterContentInit, EventEmitter, OnDestroy, QueryList } from '@angular/core';
import { ClrAlert } from './alert';
import { MultiAlertService } from './providers/multi-alert.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrAlerts implements AfterContentInit, OnDestroy {
    multiAlertService: MultiAlertService;
    private subscriptions;
    set allAlerts(value: QueryList<ClrAlert>);
    /**
     * Input/Output to support two way binding on current alert index
     */
    set _inputCurrentIndex(index: number);
    currentAlertIndexChange: EventEmitter<number>;
    set currentAlertIndex(index: number);
    get currentAlertIndex(): number;
    /**
     * Input/Output to support two way binding on current alert instance
     */
    set currentAlert(alert: ClrAlert);
    get currentAlert(): ClrAlert;
    currentAlertChange: EventEmitter<ClrAlert>;
    /**
     * Ensure we are only dealing with alerts that have not been closed yet
     */
    get alerts(): ClrAlert[];
    get currentAlertType(): string;
    constructor(multiAlertService: MultiAlertService);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrAlerts>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrAlerts, "clr-alerts", never, {
    "_inputCurrentIndex": "clrCurrentAlertIndex";
    "currentAlert": "clrCurrentAlert";
}, {
    "currentAlertIndexChange": "clrCurrentAlertIndexChange";
    "currentAlertChange": "clrCurrentAlertChange";
}, ["allAlerts"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnRzLmQudHMiLCJzb3VyY2VzIjpbImFsZXJ0cy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsckFsZXJ0IH0gZnJvbSAnLi9hbGVydCc7XG5pbXBvcnQgeyBNdWx0aUFsZXJ0U2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL211bHRpLWFsZXJ0LnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xyQWxlcnRzIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgICBtdWx0aUFsZXJ0U2VydmljZTogTXVsdGlBbGVydFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIHNldCBhbGxBbGVydHModmFsdWU6IFF1ZXJ5TGlzdDxDbHJBbGVydD4pO1xuICAgIC8qKlxuICAgICAqIElucHV0L091dHB1dCB0byBzdXBwb3J0IHR3byB3YXkgYmluZGluZyBvbiBjdXJyZW50IGFsZXJ0IGluZGV4XG4gICAgICovXG4gICAgc2V0IF9pbnB1dEN1cnJlbnRJbmRleChpbmRleDogbnVtYmVyKTtcbiAgICBjdXJyZW50QWxlcnRJbmRleENoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgc2V0IGN1cnJlbnRBbGVydEluZGV4KGluZGV4OiBudW1iZXIpO1xuICAgIGdldCBjdXJyZW50QWxlcnRJbmRleCgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogSW5wdXQvT3V0cHV0IHRvIHN1cHBvcnQgdHdvIHdheSBiaW5kaW5nIG9uIGN1cnJlbnQgYWxlcnQgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBzZXQgY3VycmVudEFsZXJ0KGFsZXJ0OiBDbHJBbGVydCk7XG4gICAgZ2V0IGN1cnJlbnRBbGVydCgpOiBDbHJBbGVydDtcbiAgICBjdXJyZW50QWxlcnRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxDbHJBbGVydD47XG4gICAgLyoqXG4gICAgICogRW5zdXJlIHdlIGFyZSBvbmx5IGRlYWxpbmcgd2l0aCBhbGVydHMgdGhhdCBoYXZlIG5vdCBiZWVuIGNsb3NlZCB5ZXRcbiAgICAgKi9cbiAgICBnZXQgYWxlcnRzKCk6IENsckFsZXJ0W107XG4gICAgZ2V0IGN1cnJlbnRBbGVydFR5cGUoKTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKG11bHRpQWxlcnRTZXJ2aWNlOiBNdWx0aUFsZXJ0U2VydmljZSk7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==