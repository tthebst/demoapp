import { ChangeDetectorRef, ElementRef, EventEmitter, AfterViewInit, QueryList, OnInit, OnDestroy } from '@angular/core';
import { AlertIconAndTypesService } from './providers/icon-and-types.service';
import { MultiAlertService } from './providers/multi-alert.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrAlert implements OnInit, OnDestroy, AfterViewInit {
    private iconService;
    private cdr;
    private multiAlertService;
    private commonStrings;
    private ariaLiveService;
    private subscriptions;
    constructor(iconService: AlertIconAndTypesService, cdr: ChangeDetectorRef, multiAlertService: MultiAlertService, commonStrings: ClrCommonStringsService, ariaLiveService: ClrAriaLiveService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    isSmall: boolean;
    closable: boolean;
    isAppLevel: boolean;
    clrCloseButtonAriaLabel: string;
    _closed: boolean;
    _closedChanged: EventEmitter<boolean>;
    set alertType(val: string);
    get alertType(): string;
    /**
     * clrPolite is not used in the code. Is here just to provide
     * code complition and also mark component what type AriaLive
     * will be used.
     */
    /** @deprecated since 3.0, remove in 4.0 */
    polite: boolean;
    /** @deprecated since 3.0, remove in 4.0 */
    assertive: boolean;
    /** @deprecated since 3.0, remove in 4.0 */
    off: boolean;
    /**
     * There is an order on how the attributes will take effect.
     * Assertive, Off, Polite.
     *
     * Polite is default if non is passed.
     *
     * In the case of setting all of them to true. Assertive will be used.
     *
     */
    get ariaLive(): ClrAriaLivePoliteness;
    set alertIconShape(value: string);
    get alertClass(): string;
    alertTexts: QueryList<ElementRef>;
    /**
     * This handle the find what content to be annonced withing the aria-live container
     * alerts that are hidden will be ignored.
     *
     * @remark
     * We depend on the ClrAlertText Directive to find and parse the alert messages.
     * Also this require the HTML markup for the alert to be
     * ```html
     * <div class="alert" role="alert">
     *    <div class="alert-items">
     *        <div class="alert-item static">
     *            <span class="alert-text">
     *                 ...
     *            </span>
     *        </div>
     *    </div>
     * </div>
     * ```
     */
    private announceAriaLiveMessage;
    private _hidden;
    set hidden(value: boolean);
    get hidden(): boolean;
    close(): void;
    open(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrAlert>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrAlert, "clr-alert", never, {
    "isSmall": "clrAlertSizeSmall";
    "closable": "clrAlertClosable";
    "isAppLevel": "clrAlertAppLevel";
    "clrCloseButtonAriaLabel": "clrCloseButtonAriaLabel";
    "_closed": "clrAlertClosed";
    "polite": "clrPolite";
    "alertType": "clrAlertType";
    "alertIconShape": "clrAlertIcon";
    "assertive": "clrAssertive";
    "off": "clrOff";
}, {
    "_closedChanged": "clrAlertClosedChange";
}, ["alertTexts"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuZC50cyIsInNvdXJjZXMiOlsiYWxlcnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0VBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgQWZ0ZXJWaWV3SW5pdCwgUXVlcnlMaXN0LCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWxlcnRJY29uQW5kVHlwZXNTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvaWNvbi1hbmQtdHlwZXMuc2VydmljZSc7XG5pbXBvcnQgeyBNdWx0aUFsZXJ0U2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL211bHRpLWFsZXJ0LnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQXJpYUxpdmVTZXJ2aWNlLCBDbHJBcmlhTGl2ZVBvbGl0ZW5lc3MgfSBmcm9tICcuLi8uLi91dGlscy9hMTF5L2FyaWEtbGl2ZS5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENsckFsZXJ0IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQge1xuICAgIHByaXZhdGUgaWNvblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBjZHI7XG4gICAgcHJpdmF0ZSBtdWx0aUFsZXJ0U2VydmljZTtcbiAgICBwcml2YXRlIGNvbW1vblN0cmluZ3M7XG4gICAgcHJpdmF0ZSBhcmlhTGl2ZVNlcnZpY2U7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIGNvbnN0cnVjdG9yKGljb25TZXJ2aWNlOiBBbGVydEljb25BbmRUeXBlc1NlcnZpY2UsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIG11bHRpQWxlcnRTZXJ2aWNlOiBNdWx0aUFsZXJ0U2VydmljZSwgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UsIGFyaWFMaXZlU2VydmljZTogQ2xyQXJpYUxpdmVTZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgaXNTbWFsbDogYm9vbGVhbjtcbiAgICBjbG9zYWJsZTogYm9vbGVhbjtcbiAgICBpc0FwcExldmVsOiBib29sZWFuO1xuICAgIGNsckNsb3NlQnV0dG9uQXJpYUxhYmVsOiBzdHJpbmc7XG4gICAgX2Nsb3NlZDogYm9vbGVhbjtcbiAgICBfY2xvc2VkQ2hhbmdlZDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIHNldCBhbGVydFR5cGUodmFsOiBzdHJpbmcpO1xuICAgIGdldCBhbGVydFR5cGUoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIGNsclBvbGl0ZSBpcyBub3QgdXNlZCBpbiB0aGUgY29kZS4gSXMgaGVyZSBqdXN0IHRvIHByb3ZpZGVcbiAgICAgKiBjb2RlIGNvbXBsaXRpb24gYW5kIGFsc28gbWFyayBjb21wb25lbnQgd2hhdCB0eXBlIEFyaWFMaXZlXG4gICAgICogd2lsbCBiZSB1c2VkLlxuICAgICAqL1xuICAgIC8qKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjAsIHJlbW92ZSBpbiA0LjAgKi9cbiAgICBwb2xpdGU6IGJvb2xlYW47XG4gICAgLyoqIEBkZXByZWNhdGVkIHNpbmNlIDMuMCwgcmVtb3ZlIGluIDQuMCAqL1xuICAgIGFzc2VydGl2ZTogYm9vbGVhbjtcbiAgICAvKiogQGRlcHJlY2F0ZWQgc2luY2UgMy4wLCByZW1vdmUgaW4gNC4wICovXG4gICAgb2ZmOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZXJlIGlzIGFuIG9yZGVyIG9uIGhvdyB0aGUgYXR0cmlidXRlcyB3aWxsIHRha2UgZWZmZWN0LlxuICAgICAqIEFzc2VydGl2ZSwgT2ZmLCBQb2xpdGUuXG4gICAgICpcbiAgICAgKiBQb2xpdGUgaXMgZGVmYXVsdCBpZiBub24gaXMgcGFzc2VkLlxuICAgICAqXG4gICAgICogSW4gdGhlIGNhc2Ugb2Ygc2V0dGluZyBhbGwgb2YgdGhlbSB0byB0cnVlLiBBc3NlcnRpdmUgd2lsbCBiZSB1c2VkLlxuICAgICAqXG4gICAgICovXG4gICAgZ2V0IGFyaWFMaXZlKCk6IENsckFyaWFMaXZlUG9saXRlbmVzcztcbiAgICBzZXQgYWxlcnRJY29uU2hhcGUodmFsdWU6IHN0cmluZyk7XG4gICAgZ2V0IGFsZXJ0Q2xhc3MoKTogc3RyaW5nO1xuICAgIGFsZXJ0VGV4dHM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPjtcbiAgICAvKipcbiAgICAgKiBUaGlzIGhhbmRsZSB0aGUgZmluZCB3aGF0IGNvbnRlbnQgdG8gYmUgYW5ub25jZWQgd2l0aGluZyB0aGUgYXJpYS1saXZlIGNvbnRhaW5lclxuICAgICAqIGFsZXJ0cyB0aGF0IGFyZSBoaWRkZW4gd2lsbCBiZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogQHJlbWFya1xuICAgICAqIFdlIGRlcGVuZCBvbiB0aGUgQ2xyQWxlcnRUZXh0IERpcmVjdGl2ZSB0byBmaW5kIGFuZCBwYXJzZSB0aGUgYWxlcnQgbWVzc2FnZXMuXG4gICAgICogQWxzbyB0aGlzIHJlcXVpcmUgdGhlIEhUTUwgbWFya3VwIGZvciB0aGUgYWxlcnQgdG8gYmVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGRpdiBjbGFzcz1cImFsZXJ0XCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgICogICAgPGRpdiBjbGFzcz1cImFsZXJ0LWl0ZW1zXCI+XG4gICAgICogICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydC1pdGVtIHN0YXRpY1wiPlxuICAgICAqICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJhbGVydC10ZXh0XCI+XG4gICAgICogICAgICAgICAgICAgICAgIC4uLlxuICAgICAqICAgICAgICAgICAgPC9zcGFuPlxuICAgICAqICAgICAgICA8L2Rpdj5cbiAgICAgKiAgICA8L2Rpdj5cbiAgICAgKiA8L2Rpdj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwcml2YXRlIGFubm91bmNlQXJpYUxpdmVNZXNzYWdlO1xuICAgIHByaXZhdGUgX2hpZGRlbjtcbiAgICBzZXQgaGlkZGVuKHZhbHVlOiBib29sZWFuKTtcbiAgICBnZXQgaGlkZGVuKCk6IGJvb2xlYW47XG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICBvcGVuKCk6IHZvaWQ7XG59XG4iXX0=