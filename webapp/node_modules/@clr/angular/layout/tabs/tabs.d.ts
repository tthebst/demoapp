import { AfterContentInit, OnDestroy } from '@angular/core';
import { IfActiveService } from '../../utils/conditional/if-active.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { TabsService } from './providers/tabs.service';
import { ClrTabLink } from './tab-link.directive';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { TabsLayout } from './enums/tabs-layout.enum';
import { ClrKeyFocus } from '../../utils/focus/key-focus/key-focus';
import * as ɵngcc0 from '@angular/core';
export declare class ClrTabs implements AfterContentInit, OnDestroy {
    ifActiveService: IfActiveService;
    toggleService: ClrPopoverToggleService;
    tabsService: TabsService;
    tabsId: number;
    commonStrings: ClrCommonStringsService;
    private platformId;
    private subscriptions;
    private get overflowPosition();
    private set tabContentViewContainer(value);
    set layout(layout: TabsLayout);
    get layout(): TabsLayout;
    private tabs;
    private _tabLinkDirectives;
    get tabLinkDirectives(): ClrTabLink[];
    tabLinkElements: HTMLElement[];
    keyFocus: ClrKeyFocus;
    constructor(ifActiveService: IfActiveService, toggleService: ClrPopoverToggleService, tabsService: TabsService, tabsId: number, commonStrings: ClrCommonStringsService, platformId: Object);
    get activeTabInOverflow(): boolean;
    get tabIds(): string;
    ngAfterContentInit(): void;
    skipFocusCheck: boolean;
    toggleOverflow(event: any): void;
    checkFocusVisible(): void;
    inOverflow(): boolean;
    get isVertical(): boolean;
    ngOnDestroy(): void;
    private listenForTabLinkChanges;
    private listenForOverflowMenuFocusChanges;
    private focusToFirstItemInOverflow;
    private nextFocusedItemIsNotInOverflow;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrTabs>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrTabs, "clr-tabs", never, {
    "layout": "clrLayout";
}, {}, ["tabs"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5kLnRzIiwic291cmNlcyI6WyJ0YWJzLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQStCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWZBY3RpdmVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29uZGl0aW9uYWwvaWYtYWN0aXZlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9wb3BvdmVyL3Byb3ZpZGVycy9wb3BvdmVyLXRvZ2dsZS5zZXJ2aWNlJztcbmltcG9ydCB7IFRhYnNTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvdGFicy5zZXJ2aWNlJztcbmltcG9ydCB7IENsclRhYkxpbmsgfSBmcm9tICcuL3RhYi1saW5rLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZSc7XG5pbXBvcnQgeyBUYWJzTGF5b3V0IH0gZnJvbSAnLi9lbnVtcy90YWJzLWxheW91dC5lbnVtJztcbmltcG9ydCB7IENscktleUZvY3VzIH0gZnJvbSAnLi4vLi4vdXRpbHMvZm9jdXMva2V5LWZvY3VzL2tleS1mb2N1cyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJUYWJzIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgICBpZkFjdGl2ZVNlcnZpY2U6IElmQWN0aXZlU2VydmljZTtcbiAgICB0b2dnbGVTZXJ2aWNlOiBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZTtcbiAgICB0YWJzU2VydmljZTogVGFic1NlcnZpY2U7XG4gICAgdGFic0lkOiBudW1iZXI7XG4gICAgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICBwcml2YXRlIGdldCBvdmVyZmxvd1Bvc2l0aW9uKCk7XG4gICAgcHJpdmF0ZSBzZXQgdGFiQ29udGVudFZpZXdDb250YWluZXIodmFsdWUpO1xuICAgIHNldCBsYXlvdXQobGF5b3V0OiBUYWJzTGF5b3V0KTtcbiAgICBnZXQgbGF5b3V0KCk6IFRhYnNMYXlvdXQ7XG4gICAgcHJpdmF0ZSB0YWJzO1xuICAgIHByaXZhdGUgX3RhYkxpbmtEaXJlY3RpdmVzO1xuICAgIGdldCB0YWJMaW5rRGlyZWN0aXZlcygpOiBDbHJUYWJMaW5rW107XG4gICAgdGFiTGlua0VsZW1lbnRzOiBIVE1MRWxlbWVudFtdO1xuICAgIGtleUZvY3VzOiBDbHJLZXlGb2N1cztcbiAgICBjb25zdHJ1Y3RvcihpZkFjdGl2ZVNlcnZpY2U6IElmQWN0aXZlU2VydmljZSwgdG9nZ2xlU2VydmljZTogQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2UsIHRhYnNTZXJ2aWNlOiBUYWJzU2VydmljZSwgdGFic0lkOiBudW1iZXIsIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlLCBwbGF0Zm9ybUlkOiBPYmplY3QpO1xuICAgIGdldCBhY3RpdmVUYWJJbk92ZXJmbG93KCk6IGJvb2xlYW47XG4gICAgZ2V0IHRhYklkcygpOiBzdHJpbmc7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgc2tpcEZvY3VzQ2hlY2s6IGJvb2xlYW47XG4gICAgdG9nZ2xlT3ZlcmZsb3coZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgY2hlY2tGb2N1c1Zpc2libGUoKTogdm9pZDtcbiAgICBpbk92ZXJmbG93KCk6IGJvb2xlYW47XG4gICAgZ2V0IGlzVmVydGljYWwoKTogYm9vbGVhbjtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByaXZhdGUgbGlzdGVuRm9yVGFiTGlua0NoYW5nZXM7XG4gICAgcHJpdmF0ZSBsaXN0ZW5Gb3JPdmVyZmxvd01lbnVGb2N1c0NoYW5nZXM7XG4gICAgcHJpdmF0ZSBmb2N1c1RvRmlyc3RJdGVtSW5PdmVyZmxvdztcbiAgICBwcml2YXRlIG5leHRGb2N1c2VkSXRlbUlzTm90SW5PdmVyZmxvdztcbn1cbiJdfQ==